/**
 * @compiler Bridge.NET 16.0.0-rc
 */
Bridge.assembly("Bridge.Test.Bridge.ClientTest.Batch4", function ($asm, globals) {
    

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner", {
        main: function Main () {
            Bridge.Test.Runtime.ContextHelper.Init();
            QUnit.test("ActivatorTests - NonGenericCreateInstanceWithoutArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests.NonGenericCreateInstanceWithoutArgumentsWorks);
            QUnit.test("ActivatorTests - NonGenericCreateInstanceWithOneArgumentWorks_SPI_1540", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests.NonGenericCreateInstanceWithOneArgumentWorks_SPI_1540);
            QUnit.test("ActivatorTests - NonGenericCreateInstanceWithTwoArgumentsWorks_SPI_1541", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests.NonGenericCreateInstanceWithTwoArgumentsWorks_SPI_1541);
            QUnit.test("ActivatorTests - GenericCreateInstanceWithoutArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests.GenericCreateInstanceWithoutArgumentsWorks);
            QUnit.test("ActivatorTests - GenericCreateInstanceWithOneArgumentWorks_SPI_1542", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests.GenericCreateInstanceWithOneArgumentWorks_SPI_1542);
            QUnit.test("ActivatorTests - GenericCreateInstanceWithTwoArgumentsWorks_SPI_1543", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests.GenericCreateInstanceWithTwoArgumentsWorks_SPI_1543);
            QUnit.test("ActivatorTests - InstantiatingTypeParameterWithDefaultConstructorConstraintWorks_SPI_1544", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests.InstantiatingTypeParameterWithDefaultConstructorConstraintWorks_SPI_1544);
            QUnit.test("ActivatorTests - CreateInstanceWithNoArgumentsWorksForClassWithUnnamedDefaultConstructor", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests.CreateInstanceWithNoArgumentsWorksForClassWithUnnamedDefaultConstructor);
            QUnit.test("ActivatorTests - CreateInstanceWithNoArgumentsWorksForClassWithNamedDefaultConstructor", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests.CreateInstanceWithNoArgumentsWorksForClassWithNamedDefaultConstructor);
            QUnit.test("ActivatorTests - CreateInstanceWithNoArgumentsWorksForClassWithInlineCodeDefaultConstructor_SPI_1545", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests.CreateInstanceWithNoArgumentsWorksForClassWithInlineCodeDefaultConstructor_SPI_1545);
            QUnit.test("ActivatorTests - CreateInstanceWithNoArgumentsWorksForClassWithStaticMethodDefaultConstructor", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests.CreateInstanceWithNoArgumentsWorksForClassWithStaticMethodDefaultConstructor);
            QUnit.test("ActivatorTests - CreateInstanceWithNoArgumentsWorksForClassWithJsonDefaultConstructor", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests.CreateInstanceWithNoArgumentsWorksForClassWithJsonDefaultConstructor);
            QUnit.test("ActivatorTests - CreateInstanceWithNoArgumentsWorksForGenericClassWithNamedDefaultConstructor", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests.CreateInstanceWithNoArgumentsWorksForGenericClassWithNamedDefaultConstructor);
            QUnit.test("AppDomainTests - GetAssembliesWorks_SPI_1646", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AppDomainTests.GetAssembliesWorks_SPI_1646);
            QUnit.test("ArgumentsTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentsTests.LengthWorks);
            QUnit.test("ArgumentsTests - GetArgumentWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentsTests.GetArgumentWorks);
            QUnit.test("ArgumentsTests - ToArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentsTests.ToArrayWorks);
            QUnit.test("ArgumentsTests - ToArrayOfTWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentsTests.ToArrayOfTWorks);
            QUnit.test("ArrayTests - TypePropertiesAreCorrect_SPI_1546", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.TypePropertiesAreCorrect_SPI_1546);
            QUnit.test("ArrayTests - TypePropertiesAreCorrect_SPI_1548", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.TypePropertiesAreCorrect_SPI_1548);
            QUnit.test("ArrayTests - ArrayCanBeAssignedToTheCollectionInterfaces_SPI_1547", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.ArrayCanBeAssignedToTheCollectionInterfaces_SPI_1547);
            QUnit.test("ArrayTests - CreateWithNegativeLenghtShouldThrow", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.CreateWithNegativeLenghtShouldThrow);
            QUnit.test("ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.LengthWorks);
            QUnit.test("ArrayTests - RankIsOne", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.RankIsOne);
            QUnit.test("ArrayTests - GetLengthWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.GetLengthWorks);
            QUnit.test("ArrayTests - GetLowerBound", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.GetLowerBound);
            QUnit.test("ArrayTests - GetUpperBoundWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.GetUpperBoundWorks);
            QUnit.test("ArrayTests - GettingValueByIndexWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.GettingValueByIndexWorks);
            QUnit.test("ArrayTests - GetValueWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.GetValueWorks);
            QUnit.test("ArrayTests - SettingValueByIndexWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.SettingValueByIndexWorks);
            QUnit.test("ArrayTests - SetValueWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.SetValueWorks);
            QUnit.test("ArrayTests - ForeachWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.ForeachWorks);
            QUnit.test("ArrayTests - CloneWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.CloneWorks);
            QUnit.test("ArrayTests - ConcatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.ConcatWorks);
            QUnit.test("ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.ContainsWorks);
            QUnit.test("ArrayTests - ContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.ContainsUsesEqualsMethod);
            QUnit.test("ArrayTests - SliceWithoutEndWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.SliceWithoutEndWorks);
            QUnit.test("ArrayTests - SliceWithEndWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.SliceWithEndWorks);
            QUnit.test("ArrayTests - ForeachWithArrayItemCallbackWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.ForeachWithArrayItemCallbackWorks);
            QUnit.test("ArrayTests - IndexOfWithoutStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.IndexOfWithoutStartIndexWorks);
            QUnit.test("ArrayTests - IndexOfWithoutStartIndexUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.IndexOfWithoutStartIndexUsesEqualsMethod);
            QUnit.test("ArrayTests - IndexOfWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.IndexOfWithStartIndexWorks);
            QUnit.test("ArrayTests - IndexOfWithStartIndexUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.IndexOfWithStartIndexUsesEqualsMethod);
            QUnit.test("ArrayTests - JoinWithoutDelimiterWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.JoinWithoutDelimiterWorks);
            QUnit.test("ArrayTests - JoinWithDelimiterWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.JoinWithDelimiterWorks);
            QUnit.test("ArrayTests - ReverseWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.ReverseWorks);
            QUnit.test("ArrayTests - SortWithDefaultCompareWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.SortWithDefaultCompareWorks);
            QUnit.test("ArrayTests - SortWithCompareCallbackWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.SortWithCompareCallbackWorks);
            QUnit.test("ArrayTests - ForeachWhenCastToIListWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.ForeachWhenCastToIListWorks);
            QUnit.test("ArrayTests - ICollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.ICollectionCountWorks);
            QUnit.test("ArrayTests - ICollectionAddWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.ICollectionAddWorks);
            QUnit.test("ArrayTests - ICollectionClearWorks_NDN_1548", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.ICollectionClearWorks_NDN_1548);
            QUnit.test("ArrayTests - ICollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.ICollectionContainsWorks);
            QUnit.test("ArrayTests - ICollectionContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.ICollectionContainsUsesEqualsMethod);
            QUnit.test("ArrayTests - ICollectionRemoveWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.ICollectionRemoveWorks);
            QUnit.test("ArrayTests - IListIndexingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.IListIndexingWorks);
            QUnit.test("ArrayTests - IListIndexOfWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.IListIndexOfWorks);
            QUnit.test("ArrayTests - IListIndexOfUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.IListIndexOfUsesEqualsMethod);
            QUnit.test("ArrayTests - IListInsertWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.IListInsertWorks);
            QUnit.test("ArrayTests - IListRemoveAtWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.IListRemoveAtWorks);
            QUnit.test("ArrayTests - RepeatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.RepeatWorks);
            QUnit.test("ArrayTests - ClearWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.ClearWorks);
            QUnit.test("ArrayTests - CopyWithDifferentArraysWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.CopyWithDifferentArraysWorks);
            QUnit.test("ArrayTests - CopyWithinArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests.CopyWithinArrayWorks);
            QUnit.test("ComparerTests - TypePropertiesAreCorrect_SPI_1546", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ComparerTests.TypePropertiesAreCorrect_SPI_1546);
            QUnit.test("ComparerTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ComparerTests.TypePropertiesAreCorrect);
            QUnit.test("ComparerTests - DefaultComparerCanOrderNumbers", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ComparerTests.DefaultComparerCanOrderNumbers);
            QUnit.test("ComparerTests - DefaultComparerCanOrderNullValues", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ComparerTests.DefaultComparerCanOrderNullValues);
            QUnit.test("ComparerTests - DefaultComparerUsesCompareMethodIfClassImplementsIComparable", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ComparerTests.DefaultComparerUsesCompareMethodIfClassImplementsIComparable);
            QUnit.test("ComparerTests - CreateWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ComparerTests.CreateWorks);
            QUnit.test("EqualityComparerTests - TypePropertiesAreCorrect_SPI_1546", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.EqualityComparerTests.TypePropertiesAreCorrect_SPI_1546);
            QUnit.test("EqualityComparerTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.EqualityComparerTests.TypePropertiesAreCorrect);
            QUnit.test("EqualityComparerTests - DefaultComparerCanGetHashCodeOfNumber", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.EqualityComparerTests.DefaultComparerCanGetHashCodeOfNumber);
            QUnit.test("EqualityComparerTests - DefaultComparerReturnsZeroAsHashCodeForNullAndUndefined", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.EqualityComparerTests.DefaultComparerReturnsZeroAsHashCodeForNullAndUndefined);
            QUnit.test("EqualityComparerTests - DefaultComparerCanDetermineEquality", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.EqualityComparerTests.DefaultComparerCanDetermineEquality);
            QUnit.test("EqualityComparerTests - DefaultComparerInvokesOverriddenGetHashCode", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.EqualityComparerTests.DefaultComparerInvokesOverriddenGetHashCode);
            QUnit.test("EqualityComparerTests - DefaultComparerInvokesOverriddenEquals", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.EqualityComparerTests.DefaultComparerInvokesOverriddenEquals);
            QUnit.test("GenericDictionaryTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests.TypePropertiesAreCorrect);
            QUnit.test("GenericDictionaryTests - DefaultConstructorWorks_SPI_1549", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests.DefaultConstructorWorks_SPI_1549);
            QUnit.test("GenericDictionaryTests - CapacityConstructorWorks_SPI_1549", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests.CapacityConstructorWorks_SPI_1549);
            QUnit.test("GenericDictionaryTests - CapacityAndEqualityComparerWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests.CapacityAndEqualityComparerWorks);
            QUnit.test("GenericDictionaryTests - CopyConstructorWorks_SPI_1549", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests.CopyConstructorWorks_SPI_1549);
            QUnit.test("GenericDictionaryTests - EqualityComparerOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests.EqualityComparerOnlyConstructorWorks);
            QUnit.test("GenericDictionaryTests - ConstructorWithBothDictionaryAndEqualityComparerWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests.ConstructorWithBothDictionaryAndEqualityComparerWorks);
            QUnit.test("GenericDictionaryTests - CountWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests.CountWorks);
            QUnit.test("GenericDictionaryTests - KeysWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests.KeysWorks);
            QUnit.test("GenericDictionaryTests - ValuesWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests.ValuesWorks);
            QUnit.test("GenericDictionaryTests - IndexerGetterWorksForExistingItems", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests.IndexerGetterWorksForExistingItems);
            QUnit.test("GenericDictionaryTests - IndexerSetterWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests.IndexerSetterWorks);
            QUnit.test("GenericDictionaryTests - IndexerGetterThrowsForNonExistingItems", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests.IndexerGetterThrowsForNonExistingItems);
            QUnit.test("GenericDictionaryTests - AddWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests.AddWorks);
            QUnit.test("GenericDictionaryTests - AddThrowsIfItemAlreadyExists", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests.AddThrowsIfItemAlreadyExists);
            QUnit.test("GenericDictionaryTests - ClearWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests.ClearWorks);
            QUnit.test("GenericDictionaryTests - ContainsKeyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests.ContainsKeyWorks);
            QUnit.test("GenericDictionaryTests - EnumeratingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests.EnumeratingWorks);
            QUnit.test("GenericDictionaryTests - RemoveWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests.RemoveWorks);
            QUnit.test("GenericDictionaryTests - TryGetValueWithIntKeysWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests.TryGetValueWithIntKeysWorks);
            QUnit.test("GenericDictionaryTests - TryGetValueWithObjectKeysWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests.TryGetValueWithObjectKeysWorks);
            QUnit.test("GenericDictionaryTests - CanUseCustomComparer", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests.CanUseCustomComparer);
            QUnit.test("ICollectionTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests.TypePropertiesAreCorrect);
            QUnit.test("ICollectionTests - ArrayImplementsICollection", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests.ArrayImplementsICollection);
            QUnit.test("ICollectionTests - CustomClassThatShouldImplementICollectionDoesSo", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests.CustomClassThatShouldImplementICollectionDoesSo);
            QUnit.test("ICollectionTests - ArrayCastToICollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests.ArrayCastToICollectionCountWorks);
            QUnit.test("ICollectionTests - ClassImplementingICollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests.ClassImplementingICollectionCountWorks);
            QUnit.test("ICollectionTests - ClassImplementingICollectionCastToICollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests.ClassImplementingICollectionCastToICollectionCountWorks);
            QUnit.test("ICollectionTests - ClassImplementingICollectionAddWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests.ClassImplementingICollectionAddWorks);
            QUnit.test("ICollectionTests - ClassImplementingICollectionCastToICollectionAddWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests.ClassImplementingICollectionCastToICollectionAddWorks);
            QUnit.test("ICollectionTests - ClassImplementingICollectionClearWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests.ClassImplementingICollectionClearWorks);
            QUnit.test("ICollectionTests - ClassImplementingICollectionCastToICollectionClearWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests.ClassImplementingICollectionCastToICollectionClearWorks);
            QUnit.test("ICollectionTests - ArrayCastToICollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests.ArrayCastToICollectionContainsWorks);
            QUnit.test("ICollectionTests - ClassImplementingICollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests.ClassImplementingICollectionContainsWorks);
            QUnit.test("ICollectionTests - ClassImplementingICollectionCastToICollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests.ClassImplementingICollectionCastToICollectionContainsWorks);
            QUnit.test("ICollectionTests - ClassImplementingICollectionRemoveWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests.ClassImplementingICollectionRemoveWorks);
            QUnit.test("ICollectionTests - ClassImplementingICollectionCastToICollectionRemoveWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests.ClassImplementingICollectionCastToICollectionRemoveWorks);
            QUnit.test("IDictionaryTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IDictionaryTests.TypePropertiesAreCorrect);
            QUnit.test("IDictionaryTests - ClassImplementsInterfaces_SPI_1626", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IDictionaryTests.ClassImplementsInterfaces_SPI_1626);
            QUnit.test("IDictionaryTests - CountWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IDictionaryTests.CountWorks);
            QUnit.test("IDictionaryTests - KeysWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IDictionaryTests.KeysWorks);
            QUnit.test("IDictionaryTests - GetItemWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IDictionaryTests.GetItemWorks);
            QUnit.test("IDictionaryTests - ValuesWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IDictionaryTests.ValuesWorks);
            QUnit.test("IDictionaryTests - ContainsKeyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IDictionaryTests.ContainsKeyWorks);
            QUnit.test("IDictionaryTests - TryGetValueWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IDictionaryTests.TryGetValueWorks);
            QUnit.test("IDictionaryTests - AddWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IDictionaryTests.AddWorks);
            QUnit.test("IDictionaryTests - ClearWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IDictionaryTests.ClearWorks);
            QUnit.test("IDictionaryTests - SetItemWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IDictionaryTests.SetItemWorks);
            QUnit.test("IEnumerableTests - ArrayImplementsIEnumerable", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IEnumerableTests.ArrayImplementsIEnumerable);
            QUnit.test("IEnumerableTests - CustomClassThatShouldImplementIEnumerableDoesSo", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IEnumerableTests.CustomClassThatShouldImplementIEnumerableDoesSo);
            QUnit.test("IEnumerableTests - ArrayGetEnumeratorMethodWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IEnumerableTests.ArrayGetEnumeratorMethodWorks);
            QUnit.test("IEnumerableTests - ArrayCastToIEnumerableCanBeEnumerated", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IEnumerableTests.ArrayCastToIEnumerableCanBeEnumerated);
            QUnit.test("IEnumerableTests - ClassImplementingIEnumerableCanBeEnumerated", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IEnumerableTests.ClassImplementingIEnumerableCanBeEnumerated);
            QUnit.test("IEnumerableTests - ClassImplementingIEnumerableCastToIEnumerableCanBeEnumerated", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IEnumerableTests.ClassImplementingIEnumerableCastToIEnumerableCanBeEnumerated);
            QUnit.test("IListTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests.TypePropertiesAreCorrect);
            QUnit.test("IListTests - ArrayImplementsIList", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests.ArrayImplementsIList);
            QUnit.test("IListTests - CustomClassThatShouldImplementIListDoesSo", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests.CustomClassThatShouldImplementIListDoesSo);
            QUnit.test("IListTests - ArrayCastToIListGetItemWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests.ArrayCastToIListGetItemWorks);
            QUnit.test("IListTests - ClassImplementingIListGetItemWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests.ClassImplementingIListGetItemWorks);
            QUnit.test("IListTests - ClassImplementingIListCastToIListGetItemWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests.ClassImplementingIListCastToIListGetItemWorks);
            QUnit.test("IListTests - ArrayCastToIListSetItemWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests.ArrayCastToIListSetItemWorks);
            QUnit.test("IListTests - ClassImplementingIListSetItemWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests.ClassImplementingIListSetItemWorks);
            QUnit.test("IListTests - ClassImplementingIListCastToIListSetItemWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests.ClassImplementingIListCastToIListSetItemWorks);
            QUnit.test("IListTests - ArrayCastToIListIndexOfWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests.ArrayCastToIListIndexOfWorks);
            QUnit.test("IListTests - ClassImplementingIListIndexOfWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests.ClassImplementingIListIndexOfWorks);
            QUnit.test("IListTests - ClassImplementingIListCastToIListIndexOfWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests.ClassImplementingIListCastToIListIndexOfWorks);
            QUnit.test("IListTests - ClassImplementingIListInsertWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests.ClassImplementingIListInsertWorks);
            QUnit.test("IListTests - ClassImplementingIListCastToIListInsertWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests.ClassImplementingIListCastToIListInsertWorks);
            QUnit.test("IListTests - ClassImplementingIListRemoveAtWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests.ClassImplementingIListRemoveAtWorks);
            QUnit.test("IListTests - ClassImplementingIListCastToIListRemoveAtWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests.ClassImplementingIListCastToIListRemoveAtWorks);
            QUnit.test("IteratorBlockTests - TypeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable_SPI_1554", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IteratorBlockTests.TypeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable_SPI_1554);
            QUnit.test("IteratorBlockTests - EnumeratingIEnumeratorIteratorToEndWorks_SPI_1555", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IteratorBlockTests.EnumeratingIEnumeratorIteratorToEndWorks_SPI_1555);
            QUnit.test("IteratorBlockTests - PrematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks_SPI_1555", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IteratorBlockTests.PrematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks_SPI_1555);
            QUnit.test("IteratorBlockTests - ExceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks_SPI_1554", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IteratorBlockTests.ExceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks_SPI_1554);
            QUnit.test("IteratorBlockTests - TypeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface_SPI_1554", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IteratorBlockTests.TypeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface_SPI_1554);
            QUnit.test("IteratorBlockTests - EnumeratingIEnumerableIteratorToEndWorks_SPI_1555", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IteratorBlockTests.EnumeratingIEnumerableIteratorToEndWorks_SPI_1555);
            QUnit.test("IteratorBlockTests - PrematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks_SPI_1555", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IteratorBlockTests.PrematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks_SPI_1555);
            QUnit.test("IteratorBlockTests - ExceptionInIEnumerableIteratorBodyExecutesFinallyBlocks_SPI_1554", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IteratorBlockTests.ExceptionInIEnumerableIteratorBodyExecutesFinallyBlocks_SPI_1554);
            QUnit.test("IteratorBlockTests - EnumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IteratorBlockTests.EnumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters);
            QUnit.test("IteratorBlockTests - DifferentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IteratorBlockTests.DifferentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals);
            QUnit.test("KeyValuePairTests - TheConstructorWithParametersCanBeUsed", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.KeyValuePairTests.TheConstructorWithParametersCanBeUsed);
            QUnit.test("KeyValuePairTests - TypeTestWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.KeyValuePairTests.TypeTestWorks);
            QUnit.test("KeyValuePairTests - TypeTestWorksGeneric_SPI_1556", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.KeyValuePairTests.TypeTestWorksGeneric_SPI_1556);
            QUnit.test("KeyValuePairTests - TheDefaultConstructorCanBeUsed_SPI_1556", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.KeyValuePairTests.TheDefaultConstructorCanBeUsed_SPI_1556);
            QUnit.test("KeyValuePairTests - CreatingADefaultKeyValuePairCreatesAnInstanceThatIsNotNull_SPI_1556", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.KeyValuePairTests.CreatingADefaultKeyValuePairCreatesAnInstanceThatIsNotNull_SPI_1556);
            QUnit.test("KeyValuePairTests - ActivatorCreateInstanceWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.KeyValuePairTests.ActivatorCreateInstanceWorks);
            QUnit.test("ListTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.TypePropertiesAreCorrect);
            QUnit.test("ListTests - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.DefaultConstructorWorks);
            QUnit.test("ListTests - ConstructorWithCapacityWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.ConstructorWithCapacityWorks);
            QUnit.test("ListTests - ConstructingFromArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.ConstructingFromArrayWorks);
            QUnit.test("ListTests - ConstructingFromListWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.ConstructingFromListWorks);
            QUnit.test("ListTests - ConstructingFromIEnumerableWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.ConstructingFromIEnumerableWorks);
            QUnit.test("ListTests - CountWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.CountWorks);
            QUnit.test("ListTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.IndexingWorks);
            QUnit.test("ListTests - ForeachWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.ForeachWorks);
            QUnit.test("ListTests - GetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.GetEnumeratorWorks);
            QUnit.test("ListTests - AddWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.AddWorks);
            QUnit.test("ListTests - AddRangeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.AddRangeWorks);
            QUnit.test("ListTests - ClearWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.ClearWorks);
            QUnit.test("ListTests - ConcatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.ConcatWorks);
            QUnit.test("ListTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.ContainsWorks);
            QUnit.test("ListTests - ContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.ContainsUsesEqualsMethod);
            QUnit.test("ListTests - SliceWithoutEndWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.SliceWithoutEndWorks);
            QUnit.test("ListTests - SliceWithEndWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.SliceWithEndWorks);
            QUnit.test("ListTests - IndexOfWithoutStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.IndexOfWithoutStartIndexWorks);
            QUnit.test("ListTests - IndexOfWithoutStartIndexUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.IndexOfWithoutStartIndexUsesEqualsMethod);
            QUnit.test("ListTests - IndexOfWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.IndexOfWithStartIndexWorks);
            QUnit.test("ListTests - IndexOfWithStartIndexUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.IndexOfWithStartIndexUsesEqualsMethod);
            QUnit.test("ListTests - InsertWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.InsertWorks);
            QUnit.test("ListTests - InsertRangeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.InsertRangeWorks);
            QUnit.test("ListTests - JoinWithoutDelimiterWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.JoinWithoutDelimiterWorks);
            QUnit.test("ListTests - JoinWithDelimiterWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.JoinWithDelimiterWorks);
            QUnit.test("ListTests - RemoveWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.RemoveWorks);
            QUnit.test("ListTests - RemoveReturnsFalseIfTheElementWasNotFound", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.RemoveReturnsFalseIfTheElementWasNotFound);
            QUnit.test("ListTests - RemoveCanRemoveNullItem", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.RemoveCanRemoveNullItem);
            QUnit.test("ListTests - RemoveUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.RemoveUsesEqualsMethod);
            QUnit.test("ListTests - RemoveAtWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.RemoveAtWorks);
            QUnit.test("ListTests - RemoveRangeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.RemoveRangeWorks);
            QUnit.test("ListTests - ReverseWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.ReverseWorks);
            QUnit.test("ListTests - SortWithDefaultCompareWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.SortWithDefaultCompareWorks);
            QUnit.test("ListTests - SortWithCompareCallbackWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.SortWithCompareCallbackWorks);
            QUnit.test("ListTests - SortWithIComparerWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.SortWithIComparerWorks);
            QUnit.test("ListTests - ForeachWhenCastToIEnumerableWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.ForeachWhenCastToIEnumerableWorks);
            QUnit.test("ListTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("ListTests - ICollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.ICollectionCountWorks);
            QUnit.test("ListTests - ICollectionAddWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.ICollectionAddWorks);
            QUnit.test("ListTests - ICollectionClearWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.ICollectionClearWorks);
            QUnit.test("ListTests - ICollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.ICollectionContainsWorks);
            QUnit.test("ListTests - ICollectionContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.ICollectionContainsUsesEqualsMethod);
            QUnit.test("ListTests - ICollectionRemoveWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.ICollectionRemoveWorks);
            QUnit.test("ListTests - ICollectionRemoveCanRemoveNullItem", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.ICollectionRemoveCanRemoveNullItem);
            QUnit.test("ListTests - ICollectionRemoveUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.ICollectionRemoveUsesEqualsMethod);
            QUnit.test("ListTests - IListIndexingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.IListIndexingWorks);
            QUnit.test("ListTests - IListIndexOfWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.IListIndexOfWorks);
            QUnit.test("ListTests - IListIndexOfUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.IListIndexOfUsesEqualsMethod);
            QUnit.test("ListTests - IListInsertWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.IListInsertWorks);
            QUnit.test("ListTests - IListRemoveAtWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.IListRemoveAtWorks);
            QUnit.test("ListTests - ToArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests.ToArrayWorks);
            QUnit.test("ReadOnlyCollectionTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests.TypePropertiesAreCorrect);
            QUnit.test("ReadOnlyCollectionTests - ConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests.ConstructorWorks);
            QUnit.test("ReadOnlyCollectionTests - CountWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests.CountWorks);
            QUnit.test("ReadOnlyCollectionTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests.IndexingWorks);
            QUnit.test("ReadOnlyCollectionTests - ForeachWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests.ForeachWorks);
            QUnit.test("ReadOnlyCollectionTests - GetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests.GetEnumeratorWorks);
            QUnit.test("ReadOnlyCollectionTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests.ContainsWorks);
            QUnit.test("ReadOnlyCollectionTests - ContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests.ContainsUsesEqualsMethod);
            QUnit.test("ReadOnlyCollectionTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests.IndexOfWorks);
            QUnit.test("ReadOnlyCollectionTests - ForeachWhenCastToIEnumerableWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests.ForeachWhenCastToIEnumerableWorks);
            QUnit.test("ReadOnlyCollectionTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("ReadOnlyCollectionTests - ICollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests.ICollectionCountWorks);
            QUnit.test("ReadOnlyCollectionTests - ICollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests.ICollectionContainsWorks);
            QUnit.test("ReadOnlyCollectionTests - ICollectionContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests.ICollectionContainsUsesEqualsMethod);
            QUnit.test("ReadOnlyCollectionTests - IListIndexingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests.IListIndexingWorks);
            QUnit.test("ReadOnlyCollectionTests - IListIndexOfWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests.IListIndexOfWorks);
            QUnit.test("ReadOnlyCollectionTests - IListIndexOfUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests.IListIndexOfUsesEqualsMethod);
            QUnit.test("ArrayBufferTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayBufferTests.TypePropertiesAreCorrect);
            QUnit.test("ArrayBufferTests - ConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayBufferTests.ConstructorWorks);
            QUnit.test("ArrayBufferTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayBufferTests.ByteLengthPropertyWorks);
            QUnit.test("DataViewTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests.TypePropertiesAreCorrect);
            QUnit.test("DataViewTests - ArrayBufferOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests.ArrayBufferOnlyConstructorWorks);
            QUnit.test("DataViewTests - ArrayBufferAndByteOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests.ArrayBufferAndByteOffsetConstructorWorks);
            QUnit.test("DataViewTests - ArrayBufferAndByteOffsetAndByteLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests.ArrayBufferAndByteOffsetAndByteLengthConstructorWorks);
            QUnit.test("DataViewTests - GetInt8Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests.GetInt8Works);
            QUnit.test("DataViewTests - GetUint8Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests.GetUint8Works);
            QUnit.test("DataViewTests - GetInt16Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests.GetInt16Works);
            QUnit.test("DataViewTests - GetUint16Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests.GetUint16Works);
            QUnit.test("DataViewTests - GetInt32Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests.GetInt32Works);
            QUnit.test("DataViewTests - GetUint32Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests.GetUint32Works);
            QUnit.test("DataViewTests - GetFloat32Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests.GetFloat32Works);
            QUnit.test("DataViewTests - GetFloat64Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests.GetFloat64Works);
            QUnit.test("DataViewTests - SetInt8Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests.SetInt8Works);
            QUnit.test("DataViewTests - SetUint8Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests.SetUint8Works);
            QUnit.test("DataViewTests - SetInt16Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests.SetInt16Works);
            QUnit.test("DataViewTests - SetUint16Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests.SetUint16Works);
            QUnit.test("DataViewTests - SetInt32Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests.SetInt32Works);
            QUnit.test("DataViewTests - SetUint32Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests.SetUint32Works);
            QUnit.test("DataViewTests - SetFloat32Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests.SetFloat32Works);
            QUnit.test("DataViewTests - SetFloat64Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests.SetFloat64Works);
            QUnit.test("Float32ArrayTests - TypePropertiesAreCorrect_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.TypePropertiesAreCorrect_SPI_1559);
            QUnit.test("Float32ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.LengthConstructorWorks);
            QUnit.test("Float32ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.ConstructorFromIntWorks);
            QUnit.test("Float32ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.CopyConstructorWorks);
            QUnit.test("Float32ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Float32ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Float32ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Float32ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Float32ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.LengthWorks);
            QUnit.test("Float32ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.IndexingWorks);
            QUnit.test("Float32ArrayTests - SetFloat32ArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.SetFloat32ArrayWorks);
            QUnit.test("Float32ArrayTests - SetFloat32ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.SetFloat32ArrayWithOffsetWorks);
            QUnit.test("Float32ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.SetNormalArrayWorks);
            QUnit.test("Float32ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Float32ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Float32ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Float32ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.BufferPropertyWorks);
            QUnit.test("Float32ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Float32ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Float32ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.IndexOfWorks);
            QUnit.test("Float32ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.ContainsWorks);
            QUnit.test("Float32ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Float32ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Float32ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("Float32ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.ICollectionMethodsWork_SPI_1559);
            QUnit.test("Float32ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests.IListMethodsWork_SPI_1559);
            QUnit.test("Float64ArrayTests - TypePropertiesAreCorrect_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.TypePropertiesAreCorrect_SPI_1559);
            QUnit.test("Float64ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.LengthConstructorWorks);
            QUnit.test("Float64ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.ConstructorFromIntWorks);
            QUnit.test("Float64ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.CopyConstructorWorks);
            QUnit.test("Float64ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Float64ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Float64ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Float64ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Float64ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.LengthWorks);
            QUnit.test("Float64ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.IndexingWorks);
            QUnit.test("Float64ArrayTests - SetFloat64ArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.SetFloat64ArrayWorks);
            QUnit.test("Float64ArrayTests - SetFloat64ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.SetFloat64ArrayWithOffsetWorks);
            QUnit.test("Float64ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.SetNormalArrayWorks);
            QUnit.test("Float64ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Float64ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Float64ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Float64ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.BufferPropertyWorks);
            QUnit.test("Float64ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Float64ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Float64ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.IndexOfWorks);
            QUnit.test("Float64ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.ContainsWorks);
            QUnit.test("Float64ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Float64ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Float64ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("Float64ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.ICollectionMethodsWork_SPI_1559);
            QUnit.test("Float64ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests.IListMethodsWork_SPI_1559);
            QUnit.test("Int16ArrayTests - TypePropertiesAreCorrect_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.TypePropertiesAreCorrect_SPI_1559);
            QUnit.test("Int16ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.LengthConstructorWorks);
            QUnit.test("Int16ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.ConstructorFromIntWorks);
            QUnit.test("Int16ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.CopyConstructorWorks);
            QUnit.test("Int16ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Int16ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Int16ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Int16ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Int16ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.LengthWorks);
            QUnit.test("Int16ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.IndexingWorks);
            QUnit.test("Int16ArrayTests - SetInt16ArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.SetInt16ArrayWorks);
            QUnit.test("Int16ArrayTests - SetInt16ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.SetInt16ArrayWithOffsetWorks);
            QUnit.test("Int16ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.SetNormalArrayWorks);
            QUnit.test("Int16ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Int16ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Int16ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Int16ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.BufferPropertyWorks);
            QUnit.test("Int16ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Int16ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Int16ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.IndexOfWorks);
            QUnit.test("Int16ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.ContainsWorks);
            QUnit.test("Int16ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Int16ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Int16ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("Int16ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.ICollectionMethodsWork_SPI_1559);
            QUnit.test("Int16ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests.IListMethodsWork_SPI_1559);
            QUnit.test("Int32ArrayTests - TypePropertiesAreCorrect_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.TypePropertiesAreCorrect_SPI_1559);
            QUnit.test("Int32ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.LengthConstructorWorks);
            QUnit.test("Int32ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.ConstructorFromIntWorks);
            QUnit.test("Int32ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.CopyConstructorWorks);
            QUnit.test("Int32ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Int32ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Int32ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Int32ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Int32ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.LengthWorks);
            QUnit.test("Int32ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.IndexingWorks);
            QUnit.test("Int32ArrayTests - SetInt32ArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.SetInt32ArrayWorks);
            QUnit.test("Int32ArrayTests - SetInt32ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.SetInt32ArrayWithOffsetWorks);
            QUnit.test("Int32ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.SetNormalArrayWorks);
            QUnit.test("Int32ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Int32ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Int32ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Int32ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.BufferPropertyWorks);
            QUnit.test("Int32ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Int32ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Int32ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.IndexOfWorks);
            QUnit.test("Int32ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.ContainsWorks);
            QUnit.test("Int32ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Int32ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Int32ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("Int32ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.ICollectionMethodsWork_SPI_1559);
            QUnit.test("Int32ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests.IListMethodsWork_SPI_1559);
            QUnit.test("Int8ArrayTests - TypePropertiesAreCorrect_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.TypePropertiesAreCorrect_SPI_1559);
            QUnit.test("Int8ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.LengthConstructorWorks);
            QUnit.test("Int8ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.ConstructorFromIntWorks);
            QUnit.test("Int8ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.CopyConstructorWorks);
            QUnit.test("Int8ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Int8ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Int8ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Int8ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Int8ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.LengthWorks);
            QUnit.test("Int8ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.IndexingWorks);
            QUnit.test("Int8ArrayTests - SetInt8ArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.SetInt8ArrayWorks);
            QUnit.test("Int8ArrayTests - SetInt8ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.SetInt8ArrayWithOffsetWorks);
            QUnit.test("Int8ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.SetNormalArrayWorks);
            QUnit.test("Int8ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Int8ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Int8ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Int8ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.BufferPropertyWorks);
            QUnit.test("Int8ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Int8ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Int8ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.IndexOfWorks);
            QUnit.test("Int8ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.ContainsWorks);
            QUnit.test("Int8ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Int8ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Int8ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("Int8ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.ICollectionMethodsWork_SPI_1559);
            QUnit.test("Int8ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests.IListMethodsWork_SPI_1559);
            QUnit.test("Uint16ArrayTests - TypePropertiesAreCorrect_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.TypePropertiesAreCorrect_SPI_1559);
            QUnit.test("Uint16ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.LengthConstructorWorks);
            QUnit.test("Uint16ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.ConstructorFromIntWorks);
            QUnit.test("Uint16ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.CopyConstructorWorks);
            QUnit.test("Uint16ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Uint16ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Uint16ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Uint16ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Uint16ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.LengthWorks);
            QUnit.test("Uint16ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.IndexingWorks);
            QUnit.test("Uint16ArrayTests - SetUint16ArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.SetUint16ArrayWorks);
            QUnit.test("Uint16ArrayTests - SetUint16ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.SetUint16ArrayWithOffsetWorks);
            QUnit.test("Uint16ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.SetNormalArrayWorks);
            QUnit.test("Uint16ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Uint16ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Uint16ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Uint16ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.BufferPropertyWorks);
            QUnit.test("Uint16ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Uint16ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Uint16ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.IndexOfWorks);
            QUnit.test("Uint16ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.ContainsWorks);
            QUnit.test("Uint16ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Uint16ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Uint16ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("Uint16ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.ICollectionMethodsWork_SPI_1559);
            QUnit.test("Uint16ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests.IListMethodsWork_SPI_1559);
            QUnit.test("Uint32ArrayTests - TypePropertiesAreCorrect_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.TypePropertiesAreCorrect_SPI_1559);
            QUnit.test("Uint32ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.LengthConstructorWorks);
            QUnit.test("Uint32ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.ConstructorFromIntWorks);
            QUnit.test("Uint32ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.CopyConstructorWorks);
            QUnit.test("Uint32ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Uint32ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Uint32ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Uint32ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Uint32ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.LengthWorks);
            QUnit.test("Uint32ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.IndexingWorks);
            QUnit.test("Uint32ArrayTests - SetUint32ArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.SetUint32ArrayWorks);
            QUnit.test("Uint32ArrayTests - SetUint32ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.SetUint32ArrayWithOffsetWorks);
            QUnit.test("Uint32ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.SetNormalArrayWorks);
            QUnit.test("Uint32ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Uint32ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Uint32ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Uint32ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.BufferPropertyWorks);
            QUnit.test("Uint32ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Uint32ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Uint32ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.IndexOfWorks);
            QUnit.test("Uint32ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.ContainsWorks);
            QUnit.test("Uint32ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Uint32ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Uint32ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("Uint32ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.ICollectionMethodsWork_SPI_1559);
            QUnit.test("Uint32ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests.IListMethodsWork_SPI_1559);
            QUnit.test("Uint8ArrayTests - TypePropertiesAreCorrect_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.TypePropertiesAreCorrect_SPI_1559);
            QUnit.test("Uint8ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.LengthConstructorWorks);
            QUnit.test("Uint8ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.ConstructorFromIntWorks);
            QUnit.test("Uint8ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.CopyConstructorWorks);
            QUnit.test("Uint8ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Uint8ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Uint8ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Uint8ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Uint8ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.LengthWorks);
            QUnit.test("Uint8ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.IndexingWorks);
            QUnit.test("Uint8ArrayTests - SetUint8ArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.SetUint8ArrayWorks);
            QUnit.test("Uint8ArrayTests - SetUint8ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.SetUint8ArrayWithOffsetWorks);
            QUnit.test("Uint8ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.SetNormalArrayWorks);
            QUnit.test("Uint8ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Uint8ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Uint8ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Uint8ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.BufferPropertyWorks);
            QUnit.test("Uint8ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Uint8ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Uint8ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.IndexOfWorks);
            QUnit.test("Uint8ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.ContainsWorks);
            QUnit.test("Uint8ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Uint8ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Uint8ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("Uint8ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.ICollectionMethodsWork_SPI_1559);
            QUnit.test("Uint8ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests.IListMethodsWork_SPI_1559);
            QUnit.test("Uint8ClampedArrayTests - TypePropertiesAreCorrect_SPI_1560", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.TypePropertiesAreCorrect_SPI_1560);
            QUnit.test("Uint8ClampedArrayTests - TypePropertiesAreCorrect_SPI_1559", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.TypePropertiesAreCorrect_SPI_1559);
            QUnit.test("Uint8ClampedArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.LengthConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.ConstructorFromIntWorks);
            QUnit.test("Uint8ClampedArrayTests - ConstructorFromUint8ArrayWorks_SPI_TODO", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.ConstructorFromUint8ArrayWorks_SPI_TODO);
            QUnit.test("Uint8ClampedArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.CopyConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Uint8ClampedArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.LengthWorks);
            QUnit.test("Uint8ClampedArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.IndexingWorks);
            QUnit.test("Uint8ClampedArrayTests - SetUint8ClampedArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.SetUint8ClampedArrayWorks);
            QUnit.test("Uint8ClampedArrayTests - SetUint8ClampedArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.SetUint8ClampedArrayWithOffsetWorks);
            QUnit.test("Uint8ClampedArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.SetNormalArrayWorks);
            QUnit.test("Uint8ClampedArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Uint8ClampedArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Uint8ClampedArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Uint8ClampedArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.BufferPropertyWorks);
            QUnit.test("Uint8ClampedArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Uint8ClampedArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Uint8ClampedArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.IndexOfWorks);
            QUnit.test("Uint8ClampedArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.ContainsWorks);
            QUnit.test("Uint8ClampedArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Uint8ClampedArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Uint8ClampedArrayTests - IEnumerableGetEnumeratorWorks_SPI_1560", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.IEnumerableGetEnumeratorWorks_SPI_1560);
            QUnit.test("Uint8ClampedArrayTests - ICollectionMethodsWork_SPI_1559_1560", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.ICollectionMethodsWork_SPI_1559_1560);
            QUnit.test("Uint8ClampedArrayTests - IListMethodsWork_SPI_1559_1560", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests.IListMethodsWork_SPI_1559_1560);
            QUnit.test("ConvertTests - ToBase64StringWithOnlyArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ConvertTests.ToBase64StringWithOnlyArrayWorks);
            QUnit.test("ConvertTests - ToBase64StringWithArrayAndFormattingOptionsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ConvertTests.ToBase64StringWithArrayAndFormattingOptionsWorks);
            QUnit.test("ConvertTests - ToBase64StringWithArrayAndOffsetAndLengthWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ConvertTests.ToBase64StringWithArrayAndOffsetAndLengthWorks);
            QUnit.test("ConvertTests - ToBase64StringWithArrayAndOffsetAndLengthAndFormattingOptionsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ConvertTests.ToBase64StringWithArrayAndOffsetAndLengthAndFormattingOptionsWorks);
            QUnit.test("ConvertTests - FromBase64StringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ConvertTests.FromBase64StringWorks);
            QUnit.test("CultureInfoTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CultureInfoTests.TypePropertiesAreCorrect);
            QUnit.test("CultureInfoTests - GetFormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CultureInfoTests.GetFormatWorks);
            QUnit.test("CultureInfoTests - InvariantWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CultureInfoTests.InvariantWorks);
            QUnit.test("DateTimeFormatInfoTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTimeFormatInfoTests.TypePropertiesAreCorrect);
            QUnit.test("DateTimeFormatInfoTests - GetFormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTimeFormatInfoTests.GetFormatWorks);
            QUnit.test("DateTimeFormatInfoTests - InvariantWorks_SPI_1562", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTimeFormatInfoTests.InvariantWorks_SPI_1562);
            QUnit.test("DelegateTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests.TypePropertiesAreCorrect);
            QUnit.test("DelegateTests - CreatingAndInvokingADelegateWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests.CreatingAndInvokingADelegateWorks);
            QUnit.test("DelegateTests - CreateWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests.CreateWorks);
            QUnit.test("DelegateTests - CombineWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests.CombineWorks);
            QUnit.test("DelegateTests - CombineDoesAddsDuplicateDelegates", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests.CombineDoesAddsDuplicateDelegates);
            QUnit.test("DelegateTests - CombineDoesNotAffectOriginal_SPI_1563", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests.CombineDoesNotAffectOriginal_SPI_1563);
            QUnit.test("DelegateTests - AddWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests.AddWorks);
            QUnit.test("DelegateTests - AddAssignWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests.AddAssignWorks);
            QUnit.test("DelegateTests - RemoveWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests.RemoveWorks);
            QUnit.test("DelegateTests - RemoveDoesNotAffectOriginal_SPI_1563", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests.RemoveDoesNotAffectOriginal_SPI_1563);
            QUnit.test("DelegateTests - SubtractingDelegateFromItselfReturnsNull", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests.SubtractingDelegateFromItselfReturnsNull);
            QUnit.test("DelegateTests - RemoveWorksWithMethodGroupConversion_SPI_1563", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests.RemoveWorksWithMethodGroupConversion_SPI_1563);
            QUnit.test("DelegateTests - SubtractWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests.SubtractWorks);
            QUnit.test("DelegateTests - SubtractAssignWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests.SubtractAssignWorks);
            QUnit.test("DelegateTests - CloneWorks_SPI_1563", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests.CloneWorks_SPI_1563);
            QUnit.test("DelegateTests - CloningDelegateToADifferentTypeIsANoOp", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests.CloningDelegateToADifferentTypeIsANoOp);
            QUnit.test("DelegateTests - CloningDelegateToTheSameTypeCreatesANewClone_SPI_1563", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests.CloningDelegateToTheSameTypeCreatesANewClone_SPI_1563);
            QUnit.test("DelegateTests - EqualityAndInequalityOperatorsAndEqualsMethod_SPI_1563", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests.EqualityAndInequalityOperatorsAndEqualsMethod_SPI_1563);
            QUnit.test("DelegateTests - GetInvocationListWorksForImportedFunction_SPI_1563", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests.GetInvocationListWorksForImportedFunction_SPI_1563);
            QUnit.test("DelegateTests - GetInvocationListWorksForMulticastDelegate", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests.GetInvocationListWorksForMulticastDelegate);
            QUnit.test("ContractTests - Assume", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests.Assume);
            QUnit.test("ContractTests - AssumeWithUserMessage", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests.AssumeWithUserMessage);
            QUnit.test("ContractTests - Assert", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests.Assert);
            QUnit.test("ContractTests - AssertWithUserMessage", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests.AssertWithUserMessage);
            QUnit.test("ContractTests - Requires", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests.Requires);
            QUnit.test("ContractTests - RequiresWithUserMessage", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests.RequiresWithUserMessage);
            QUnit.test("ContractTests - RequiresWithTypeException", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests.RequiresWithTypeException);
            QUnit.test("ContractTests - RequiredWithTypeExceptionAndUserMessage", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests.RequiredWithTypeExceptionAndUserMessage);
            QUnit.test("ContractTests - ForAll", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests.ForAll);
            QUnit.test("ContractTests - ForAllWithCollection", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests.ForAllWithCollection);
            QUnit.test("ContractTests - Exists", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests.Exists);
            QUnit.test("ContractTests - ExistsWithCollection", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests.ExistsWithCollection);
            QUnit.test("EnvironmentTests - NewLineIsAStringContainingOnlyTheNewLineChar", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.EnvironmentTests.NewLineIsAStringContainingOnlyTheNewLineChar);
            QUnit.test("AggregateExceptionTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AggregateExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("AggregateExceptionTests - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AggregateExceptionTests.DefaultConstructorWorks);
            QUnit.test("AggregateExceptionTests - ConstructorWithIEnumerableInnerExceptionsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AggregateExceptionTests.ConstructorWithIEnumerableInnerExceptionsWorks);
            QUnit.test("AggregateExceptionTests - ConstructorWithInnerExceptionArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AggregateExceptionTests.ConstructorWithInnerExceptionArrayWorks);
            QUnit.test("AggregateExceptionTests - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AggregateExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("AggregateExceptionTests - ConstructorWithMessageAndIEnumerableInnerExceptionsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AggregateExceptionTests.ConstructorWithMessageAndIEnumerableInnerExceptionsWorks);
            QUnit.test("AggregateExceptionTests - ConstructorWithMessageAndInnerExceptionArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AggregateExceptionTests.ConstructorWithMessageAndInnerExceptionArrayWorks);
            QUnit.test("AggregateExceptionTests - FlattenWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AggregateExceptionTests.FlattenWorks);
            QUnit.test("AmbiguousMatchExceptionTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AmbiguousMatchExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("AmbiguousMatchExceptionTests - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AmbiguousMatchExceptionTests.DefaultConstructorWorks);
            QUnit.test("AmbiguousMatchExceptionTests - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AmbiguousMatchExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("AmbiguousMatchExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AmbiguousMatchExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ArgumentExceptionTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("ArgumentExceptionTests - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentExceptionTests.DefaultConstructorWorks);
            QUnit.test("ArgumentExceptionTests - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("ArgumentExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ArgumentExceptionTests - ConstructorWithMessageAndParamNameWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentExceptionTests.ConstructorWithMessageAndParamNameWorks);
            QUnit.test("ArgumentExceptionTests - ConstructorWithMessageAndParamNameAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentExceptionTests.ConstructorWithMessageAndParamNameAndInnerExceptionWorks);
            QUnit.test("ArgumentNullExceptionTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentNullExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("ArgumentNullExceptionTests - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentNullExceptionTests.DefaultConstructorWorks);
            QUnit.test("ArgumentNullExceptionTests - ConstructorWithParamNameWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentNullExceptionTests.ConstructorWithParamNameWorks);
            QUnit.test("ArgumentNullExceptionTests - ConstructorWithParamNameAndMessageWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentNullExceptionTests.ConstructorWithParamNameAndMessageWorks);
            QUnit.test("ArgumentNullExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentNullExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ArgumentOutOfRangeExceptionTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentOutOfRangeExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("ArgumentOutOfRangeExceptionTests - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentOutOfRangeExceptionTests.DefaultConstructorWorks);
            QUnit.test("ArgumentOutOfRangeExceptionTests - ConstructorWithParamNameWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentOutOfRangeExceptionTests.ConstructorWithParamNameWorks);
            QUnit.test("ArgumentOutOfRangeExceptionTests - ConstructorWithParamNameAndMessageWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentOutOfRangeExceptionTests.ConstructorWithParamNameAndMessageWorks);
            QUnit.test("ArgumentOutOfRangeExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentOutOfRangeExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ArgumentOutOfRangeExceptionTests - ConstructorWithParamNameAndActualValueAndMessageWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentOutOfRangeExceptionTests.ConstructorWithParamNameAndActualValueAndMessageWorks);
            QUnit.test("ArithmeticExceptionTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArithmeticExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("ArithmeticExceptionTests - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArithmeticExceptionTests.DefaultConstructorWorks);
            QUnit.test("ArithmeticExceptionTests - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArithmeticExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("ArithmeticExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArithmeticExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ContractExceptionTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("ContractExceptionTests - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractExceptionTests.DefaultConstructorWorks);
            QUnit.test("DivideByZeroExceptionTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DivideByZeroExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("DivideByZeroExceptionTests - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DivideByZeroExceptionTests.DefaultConstructorWorks);
            QUnit.test("DivideByZeroExceptionTests - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DivideByZeroExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("DivideByZeroExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DivideByZeroExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ErrorExceptionTests - TypePropertiesAreCorrect_SPI_1564", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ErrorExceptionTests.TypePropertiesAreCorrect_SPI_1564);
            QUnit.test("ErrorExceptionTests - ErrorOnlyConstructorWorks_SPI_1564", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ErrorExceptionTests.ErrorOnlyConstructorWorks_SPI_1564);
            QUnit.test("ErrorExceptionTests - ErrorAndMessageAndInnerExceptionConstructorWorks_SPI_1564", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ErrorExceptionTests.ErrorAndMessageAndInnerExceptionConstructorWorks_SPI_1564);
            QUnit.test("ExceptionTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("ExceptionTests - DefaultConstructorWorks_SPI_1669", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExceptionTests.DefaultConstructorWorks_SPI_1669);
            QUnit.test("ExceptionTests - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("ExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ExceptionTests - MessagePropertyCanBeOverridden", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExceptionTests.MessagePropertyCanBeOverridden);
            QUnit.test("ExceptionTests - InnerExceptionPropertyCanBeOverridden", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExceptionTests.InnerExceptionPropertyCanBeOverridden);
            QUnit.test("FormatExceptionTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormatExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("FormatExceptionTests - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormatExceptionTests.DefaultConstructorWorks);
            QUnit.test("FormatExceptionTests - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormatExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("FormatExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormatExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("InvalidCastExceptionTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.InvalidCastExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("InvalidCastExceptionTests - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.InvalidCastExceptionTests.DefaultConstructorWorks);
            QUnit.test("InvalidCastExceptionTests - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.InvalidCastExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("InvalidCastExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.InvalidCastExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("InvalidOperationExceptionTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.InvalidOperationExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("InvalidOperationExceptionTests - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.InvalidOperationExceptionTests.DefaultConstructorWorks);
            QUnit.test("InvalidOperationExceptionTests - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.InvalidOperationExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("InvalidOperationExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.InvalidOperationExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("KeyNotFoundExceptionTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.KeyNotFoundExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("KeyNotFoundExceptionTests - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.KeyNotFoundExceptionTests.DefaultConstructorWorks);
            QUnit.test("KeyNotFoundExceptionTests - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.KeyNotFoundExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("KeyNotFoundExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.KeyNotFoundExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("NotImplementedExceptionTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NotImplementedExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("NotImplementedExceptionTests - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NotImplementedExceptionTests.DefaultConstructorWorks);
            QUnit.test("NotImplementedExceptionTests - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NotImplementedExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("NotImplementedExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NotImplementedExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("NotSupportedExceptionTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NotSupportedExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("NotSupportedExceptionTests - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NotSupportedExceptionTests.DefaultConstructorWorks);
            QUnit.test("NotSupportedExceptionTests - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NotSupportedExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("NotSupportedExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NotSupportedExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("NullReferenceExceptionTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullReferenceExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("NullReferenceExceptionTests - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullReferenceExceptionTests.DefaultConstructorWorks);
            QUnit.test("NullReferenceExceptionTests - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullReferenceExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("NullReferenceExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullReferenceExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("NullReferenceExceptionTests - AccessingAFieldOnANullObjectCausesANullReferenceException", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullReferenceExceptionTests.AccessingAFieldOnANullObjectCausesANullReferenceException);
            QUnit.test("OperationCanceledExceptionTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.OperationCanceledExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("OperationCanceledExceptionTests - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.OperationCanceledExceptionTests.DefaultConstructorWorks);
            QUnit.test("OperationCanceledExceptionTests - CancellationTokenOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.OperationCanceledExceptionTests.CancellationTokenOnlyConstructorWorks);
            QUnit.test("OperationCanceledExceptionTests - MessageOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.OperationCanceledExceptionTests.MessageOnlyConstructorWorks);
            QUnit.test("OperationCanceledExceptionTests - MessageAndInnerExceptionConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.OperationCanceledExceptionTests.MessageAndInnerExceptionConstructorWorks);
            QUnit.test("OperationCanceledExceptionTests - MessageAndCancellationTokenConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.OperationCanceledExceptionTests.MessageAndCancellationTokenConstructorWorks);
            QUnit.test("OperationCanceledExceptionTests - MessageAndInnerExceptionAndCancellationTokenConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.OperationCanceledExceptionTests.MessageAndInnerExceptionAndCancellationTokenConstructorWorks);
            QUnit.test("OverflowExceptionTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.OverflowExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("OverflowExceptionTests - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.OverflowExceptionTests.DefaultConstructorWorks);
            QUnit.test("OverflowExceptionTests - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.OverflowExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("OverflowExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.OverflowExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("PromiseExceptionTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PromiseExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("PromiseExceptionTests - ArgumentsOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PromiseExceptionTests.ArgumentsOnlyConstructorWorks);
            QUnit.test("PromiseExceptionTests - ArgumentsAndMessageConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PromiseExceptionTests.ArgumentsAndMessageConstructorWorks);
            QUnit.test("PromiseExceptionTests - ArgumentsAndMessageAndInnerExceptionConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PromiseExceptionTests.ArgumentsAndMessageAndInnerExceptionConstructorWorks);
            QUnit.test("TaskCanceledExceptionTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskCanceledExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("TaskCanceledExceptionTests - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskCanceledExceptionTests.DefaultConstructorWorks);
            QUnit.test("TaskCanceledExceptionTests - MessageOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskCanceledExceptionTests.MessageOnlyConstructorWorks);
            QUnit.test("TaskCanceledExceptionTests - TaskOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskCanceledExceptionTests.TaskOnlyConstructorWorks);
            QUnit.test("TaskCanceledExceptionTests - MessageAndInnerExceptionConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskCanceledExceptionTests.MessageAndInnerExceptionConstructorWorks);
            QUnit.test("ExceptionTests - ThrowingAndCatchingExceptionsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Bridge_ClientTest_Batch4_ExceptionTests.ThrowingAndCatchingExceptionsWorks);
            QUnit.test("ExceptionTests - ExceptionOfWrongTypeIsNotCaught", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Bridge_ClientTest_Batch4_ExceptionTests.ExceptionOfWrongTypeIsNotCaught);
            QUnit.test("ExceptionTests - CanCatchExceptionAsBaseType", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Bridge_ClientTest_Batch4_ExceptionTests.CanCatchExceptionAsBaseType);
            QUnit.test("ExceptionTests - CanCatchStringAsException", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Bridge_ClientTest_Batch4_ExceptionTests.CanCatchStringAsException);
            QUnit.test("ExceptionTests - CanCatchStringAsCatchAll", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Bridge_ClientTest_Batch4_ExceptionTests.CanCatchStringAsCatchAll);
            QUnit.test("FormattableStringTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormattableStringTests.TypePropertiesAreCorrect);
            QUnit.test("FormattableStringTests - ArgumentCountWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormattableStringTests.ArgumentCountWorks);
            QUnit.test("FormattableStringTests - FormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormattableStringTests.FormatWorks);
            QUnit.test("FormattableStringTests - GetArgumentWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormattableStringTests.GetArgumentWorks);
            QUnit.test("FormattableStringTests - GetArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormattableStringTests.GetArgumentsWorks);
            QUnit.test("FormattableStringTests - ArrayReturnedByGetArgumentsCanBeModified", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormattableStringTests.ArrayReturnedByGetArgumentsCanBeModified);
            QUnit.test("FormattableStringTests - ToStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormattableStringTests.ToStringWorks);
            QUnit.test("FormattableStringTests - ToStringWithFormatProviderWorks_SPI_1651", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormattableStringTests.ToStringWithFormatProviderWorks_SPI_1651);
            QUnit.test("FormattableStringTests - IFormattableToStringWorks_SPI_1633_1651", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormattableStringTests.IFormattableToStringWorks_SPI_1633_1651);
            QUnit.test("FormattableStringTests - InvariantWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormattableStringTests.InvariantWorks);
            QUnit.test("GuidTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.TypePropertiesAreCorrect);
            QUnit.test("GuidTests - DefaultValueWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.DefaultValueWorks);
            QUnit.test("GuidTests - CreateInstanceWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.CreateInstanceWorks);
            QUnit.test("GuidTests - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.DefaultConstructorWorks);
            QUnit.test("GuidTests - EmptyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.EmptyWorks);
            QUnit.test("GuidTests - ToStringWithoutArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.ToStringWithoutArgumentsWorks);
            QUnit.test("GuidTests - ByteArrayConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.ByteArrayConstructorWorks);
            QUnit.test("GuidTests - Int32Int16Int16ByteArrayConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.Int32Int16Int16ByteArrayConstructorWorks);
            QUnit.test("GuidTests - Int32Int16Int16BytesConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.Int32Int16Int16BytesConstructorWorks);
            QUnit.test("GuidTests - UInt32UInt16UInt16BytesConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.UInt32UInt16UInt16BytesConstructorWorks);
            QUnit.test("GuidTests - StringConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.StringConstructorWorks);
            QUnit.test("GuidTests - ParseWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.ParseWorks);
            QUnit.test("GuidTests - ParseExactWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.ParseExactWorks);
            QUnit.test("GuidTests - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.TryParseWorks);
            QUnit.test("GuidTests - TryParseExactWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.TryParseExactWorks);
            QUnit.test("GuidTests - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.CompareToWorks);
            QUnit.test("GuidTests - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.IComparableCompareToWorks);
            QUnit.test("GuidTests - EqualsObjectWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.EqualsObjectWorks);
            QUnit.test("GuidTests - EqualsGuidWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.EqualsGuidWorks);
            QUnit.test("GuidTests - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.IEquatableEqualsWorks);
            QUnit.test("GuidTests - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.GetHashCodeWorks);
            QUnit.test("GuidTests - EqualityOperatorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.EqualityOperatorWorks);
            QUnit.test("GuidTests - InequalityOperatorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.InequalityOperatorWorks);
            QUnit.test("GuidTests - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.ToStringWithFormatWorks);
            QUnit.test("GuidTests - NewGuidWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.NewGuidWorks);
            QUnit.test("GuidTests - ToByteArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests.ToByteArrayWorks);
            QUnit.test("IComparableTests - CallingMethodThroughIComparableInterfaceInvokesImplementingMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IComparableTests.CallingMethodThroughIComparableInterfaceInvokesImplementingMethod);
            QUnit.test("IEquatableTests - CallingMethodThroughIComparableInterfaceInvokesImplementingMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IEquatableTests.CallingMethodThroughIComparableInterfaceInvokesImplementingMethod);
            QUnit.test("IFormattableTests - IFormattableIsRecordedInInterfaceList", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IFormattableTests.IFormattableIsRecordedInInterfaceList);
            QUnit.test("IFormattableTests - CallingMethodThroughIFormattableInterfaceInvokesImplementingMethod_SPI_1565_1633", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IFormattableTests.CallingMethodThroughIFormattableInterfaceInvokesImplementingMethod_SPI_1565_1633);
            QUnit.test("LINQ Expressions - ExpressionProtectedConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.ExpressionProtectedConstructorWorks);
            QUnit.test("LINQ Expressions - SimpleExpressionTreeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.SimpleExpressionTreeWorks);
            QUnit.test("LINQ Expressions - LambdaWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.LambdaWorks);
            QUnit.test("LINQ Expressions - ParameterAndVariableWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.ParameterAndVariableWork);
            QUnit.test("LINQ Expressions - ConstantWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.ConstantWorks);
            QUnit.test("LINQ Expressions - BinaryExpressionsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.BinaryExpressionsWork);
            QUnit.test("LINQ Expressions - UnaryExpressionsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.UnaryExpressionsWork);
            QUnit.test("LINQ Expressions - ArrayLengthWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.ArrayLengthWorks);
            QUnit.test("LINQ Expressions - ConversionsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.ConversionsWork);
            QUnit.test("LINQ Expressions - ArrayIndexWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.ArrayIndexWorks);
            QUnit.test("LINQ Expressions - MultiDimensionalArrayIndexWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.MultiDimensionalArrayIndexWorks);
            QUnit.test("LINQ Expressions - ConditionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.ConditionWorks);
            QUnit.test("LINQ Expressions - CallWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.CallWorks);
            QUnit.test("LINQ Expressions - MethodGroupConversionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.MethodGroupConversionWorks);
            QUnit.test("LINQ Expressions - InvokeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.InvokeWorks);
            QUnit.test("LINQ Expressions - ArrayCreationWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.ArrayCreationWorks);
            QUnit.test("LINQ Expressions - PropertiesAndFieldsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.PropertiesAndFieldsWork);
            QUnit.test("LINQ Expressions - IndexersWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.IndexersWork);
            QUnit.test("LINQ Expressions - IndexExpressionsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.IndexExpressionsWork);
            QUnit.test("LINQ Expressions - ObjectConstructionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.ObjectConstructionWorks);
            QUnit.test("LINQ Expressions - AnonymousTypeConstructionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.AnonymousTypeConstructionWorks);
            QUnit.test("LINQ Expressions - TransparentIdentifiersWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.TransparentIdentifiersWork);
            QUnit.test("LINQ Expressions - NewExpressionWithMembersWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.NewExpressionWithMembersWork);
            QUnit.test("LINQ Expressions - BindWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.BindWorks);
            QUnit.test("LINQ Expressions - ElementInitWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.ElementInitWorks);
            QUnit.test("LINQ Expressions - ListBindWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.ListBindWorks);
            QUnit.test("LINQ Expressions - MemberBindWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.MemberBindWorks);
            QUnit.test("LINQ Expressions - MemberInitWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.MemberInitWorks);
            QUnit.test("LINQ Expressions - ListInitWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.ListInitWorks);
            QUnit.test("LINQ Expressions - TypeIsAndTypeEqualWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.TypeIsAndTypeEqualWork);
            QUnit.test("LINQ Expressions - QuoteWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.QuoteWorks);
            QUnit.test("LINQ Expressions - LocalVariableReferenceWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.LocalVariableReferenceWorks);
            QUnit.test("LINQ Expressions - ThrowAndRethrowWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.ThrowAndRethrowWork);
            QUnit.test("LINQ Expressions - DefaultAndEmptyWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.DefaultAndEmptyWork);
            QUnit.test("LINQ Expressions - BlockWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.BlockWorks);
            QUnit.test("LINQ Expressions - IfThenWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.IfThenWorks);
            QUnit.test("LINQ Expressions - LabelTargetWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.LabelTargetWorks);
            QUnit.test("LINQ Expressions - GotoWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.GotoWorks);
            QUnit.test("LINQ Expressions - LabelExpressionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.LabelExpressionWorks);
            QUnit.test("LINQ Expressions - LoopWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.LoopWorks);
            QUnit.test("LINQ Expressions - SwitchCaseWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.SwitchCaseWorks);
            QUnit.test("LINQ Expressions - SwitchWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.SwitchWorks);
            QUnit.test("LINQ Expressions - CatchBlockWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.CatchBlockWorks);
            QUnit.test("LINQ Expressions - TryWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.TryWorks);
            QUnit.test("LINQ Expressions - DynamicWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests.DynamicWorks);
            QUnit.test("MathTests - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.ConstantsWork);
            QUnit.test("MathTests - AbsOfDoubleWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.AbsOfDoubleWorks);
            QUnit.test("MathTests - AbsOfIntWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.AbsOfIntWorks);
            QUnit.test("MathTests - AbsOfLongWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.AbsOfLongWorks);
            QUnit.test("MathTests - AbsOfSbyteWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.AbsOfSbyteWorks);
            QUnit.test("MathTests - AbsOfShortWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.AbsOfShortWorks);
            QUnit.test("MathTests - AbsOfFloatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.AbsOfFloatWorks);
            QUnit.test("MathTests - AbsOfDecimalWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.AbsOfDecimalWorks);
            QUnit.test("MathTests - AcosWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.AcosWorks);
            QUnit.test("MathTests - AsinWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.AsinWorks);
            QUnit.test("MathTests - AtanWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.AtanWorks);
            QUnit.test("MathTests - Atan2Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.Atan2Works);
            QUnit.test("MathTests - CeilingOfDoubleWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.CeilingOfDoubleWorks);
            QUnit.test("MathTests - CeilingOfDecimalWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.CeilingOfDecimalWorks);
            QUnit.test("MathTests - CosWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.CosWorks);
            QUnit.test("MathTests - CoshWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.CoshWorks);
            QUnit.test("MathTests - SinhWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.SinhWorks);
            QUnit.test("MathTests - TanhWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.TanhWorks);
            QUnit.test("MathTests - ExpWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.ExpWorks);
            QUnit.test("MathTests - FloorOfDoubleWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.FloorOfDoubleWorks);
            QUnit.test("MathTests - FloorOfDecimalWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.FloorOfDecimalWorks);
            QUnit.test("MathTests - LogWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.LogWorks);
            QUnit.test("MathTests - LogWithBaseWorks_SPI_1566", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.LogWithBaseWorks_SPI_1566);
            QUnit.test("MathTests - Log10Works_SPI_1629", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.Log10Works_SPI_1629);
            QUnit.test("MathTests - MaxOfByteWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.MaxOfByteWorks);
            QUnit.test("MathTests - MaxOfDecimalWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.MaxOfDecimalWorks);
            QUnit.test("MathTests - MaxOfDoubleWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.MaxOfDoubleWorks);
            QUnit.test("MathTests - MaxOfShortWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.MaxOfShortWorks);
            QUnit.test("MathTests - MaxOfIntWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.MaxOfIntWorks);
            QUnit.test("MathTests - MaxOfLongWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.MaxOfLongWorks);
            QUnit.test("MathTests - MaxOfSByteWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.MaxOfSByteWorks);
            QUnit.test("MathTests - MaxOfFloatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.MaxOfFloatWorks);
            QUnit.test("MathTests - MaxOfUShortWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.MaxOfUShortWorks);
            QUnit.test("MathTests - MaxOfUIntWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.MaxOfUIntWorks);
            QUnit.test("MathTests - MaxOfULongWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.MaxOfULongWorks);
            QUnit.test("MathTests - MinOfByteWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.MinOfByteWorks);
            QUnit.test("MathTests - MinOfDecimalWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.MinOfDecimalWorks);
            QUnit.test("MathTests - MinOfDoubleWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.MinOfDoubleWorks);
            QUnit.test("MathTests - MinOfShortWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.MinOfShortWorks);
            QUnit.test("MathTests - MinOfIntWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.MinOfIntWorks);
            QUnit.test("MathTests - MinOfLongWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.MinOfLongWorks);
            QUnit.test("MathTests - MinOfSByteWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.MinOfSByteWorks);
            QUnit.test("MathTests - MinOfFloatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.MinOfFloatWorks);
            QUnit.test("MathTests - MinOfUShortWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.MinOfUShortWorks);
            QUnit.test("MathTests - MinOfUIntWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.MinOfUIntWorks);
            QUnit.test("MathTests - MinOfULongWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.MinOfULongWorks);
            QUnit.test("MathTests - PowWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.PowWorks);
            QUnit.test("MathTests - RandomWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.RandomWorks);
            QUnit.test("MathTests - RoundOfDoubleWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.RoundOfDoubleWorks);
            QUnit.test("MathTests - RoundOfDecimalWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.RoundOfDecimalWorks);
            QUnit.test("MathTests - JsRoundOfDoubleWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.JsRoundOfDoubleWorks);
            QUnit.test("MathTests - RoundOfDoubleWithDigitsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.RoundOfDoubleWithDigitsWorks);
            QUnit.test("MathTests - RoundOfDecimalWithDigitsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.RoundOfDecimalWithDigitsWorks);
            QUnit.test("MathTests - SignWithDecimalWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.SignWithDecimalWorks);
            QUnit.test("MathTests - SignWithDoubleWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.SignWithDoubleWorks);
            QUnit.test("MathTests - SignWithFloatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.SignWithFloatWorks);
            QUnit.test("MathTests - SinWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.SinWorks);
            QUnit.test("MathTests - SqrtWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.SqrtWorks);
            QUnit.test("MathTests - TanWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.TanWorks);
            QUnit.test("MathTests - TruncateWithDoubleWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.TruncateWithDoubleWorks);
            QUnit.test("MathTests - TruncateWithDecimalWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.TruncateWithDecimalWorks);
            QUnit.test("MathTests - IEEERemainderWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.IEEERemainderWorks);
            QUnit.test("MathTests - RoundOfDoubleWithMidpointRoundingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.RoundOfDoubleWithMidpointRoundingWorks);
            QUnit.test("MathTests - RoundOfDecimalWithMidpointRoundingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.RoundOfDecimalWithMidpointRoundingWorks);
            QUnit.test("MathTests - RoundOfDoubleWithDigitsAndMidpointRoundingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.RoundOfDoubleWithDigitsAndMidpointRoundingWorks);
            QUnit.test("MathTests - RoundOfDecimalWithDigitsAndMidpointRoundingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.RoundOfDecimalWithDigitsAndMidpointRoundingWorks);
            QUnit.test("MathTests - DivRemWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests.DivRemWorks);
            QUnit.test("MultidimArrayTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests.TypePropertiesAreCorrect);
            QUnit.test("MultidimArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests.LengthWorks);
            QUnit.test("MultidimArrayTests - GettingValueByIndexWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests.GettingValueByIndexWorks);
            QUnit.test("MultidimArrayTests - GetValueWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests.GetValueWorks);
            QUnit.test("MultidimArrayTests - GetValueWorksForUninitializedElement", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests.GetValueWorksForUninitializedElement);
            QUnit.test("MultidimArrayTests - GetValueByIndexWorksForUninitializedElement", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests.GetValueByIndexWorksForUninitializedElement);
            QUnit.test("MultidimArrayTests - SettingValueByIndexWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests.SettingValueByIndexWorks);
            QUnit.test("MultidimArrayTests - SetValueWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests.SetValueWorks);
            QUnit.test("MultidimArrayTests - GetLengthWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests.GetLengthWorks);
            QUnit.test("MultidimArrayTests - GetLowerBoundWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests.GetLowerBoundWorks);
            QUnit.test("MultidimArrayTests - GetUpperBoundWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests.GetUpperBoundWorks);
            QUnit.test("MultidimArrayTests - ForeachWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests.ForeachWorks);
            QUnit.test("MultidimArrayTests - RankWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests.RankWorks);
            QUnit.test("MultidimArrayTests - GetValueWithIndexOutOfRangeThrowsAnException", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests.GetValueWithIndexOutOfRangeThrowsAnException);
            QUnit.test("MultidimArrayTests - SetValueWithIndexOutOfRangeThrowsAnException", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests.SetValueWithIndexOutOfRangeThrowsAnException);
            QUnit.test("NullableTests - TypePropertiesAreCorrect_SPI_1567", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.TypePropertiesAreCorrect_SPI_1567);
            QUnit.test("NullableTests - ConvertingToNullableWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.ConvertingToNullableWorks);
            QUnit.test("NullableTests - HasValueWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.HasValueWorks);
            QUnit.test("NullableTests - BoxingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.BoxingWorks);
            QUnit.test("NullableTests - UnboxingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.UnboxingWorks);
            QUnit.test("NullableTests - ValueWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.ValueWorks);
            QUnit.test("NullableTests - UnboxingValueOfWrongTypeThrowsAnException", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.UnboxingValueOfWrongTypeThrowsAnException);
            QUnit.test("NullableTests - GetValueOrDefaultWithArgWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.GetValueOrDefaultWithArgWorks);
            QUnit.test("NullableTests - LiftedEqualityWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedEqualityWorks);
            QUnit.test("NullableTests - LiftedInequalityWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedInequalityWorks);
            QUnit.test("NullableTests - LiftedLessThanWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedLessThanWorks);
            QUnit.test("NullableTests - LiftedGreaterThanWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedGreaterThanWorks);
            QUnit.test("NullableTests - LiftedLessThanOrEqualWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedLessThanOrEqualWorks);
            QUnit.test("NullableTests - LiftedGreaterThanOrEqualWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedGreaterThanOrEqualWorks);
            QUnit.test("NullableTests - LiftedSubtractionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedSubtractionWorks);
            QUnit.test("NullableTests - LiftedAdditionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedAdditionWorks);
            QUnit.test("NullableTests - LiftedModWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedModWorks);
            QUnit.test("NullableTests - LiftedFloatingPointDivisionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedFloatingPointDivisionWorks);
            QUnit.test("NullableTests - LiftedIntegerDivisionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedIntegerDivisionWorks);
            QUnit.test("NullableTests - LiftedMultiplicationWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedMultiplicationWorks);
            QUnit.test("NullableTests - LiftedBitwiseAndWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedBitwiseAndWorks);
            QUnit.test("NullableTests - LiftedBitwiseOrWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedBitwiseOrWorks);
            QUnit.test("NullableTests - LiftedBitwiseXorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedBitwiseXorWorks);
            QUnit.test("NullableTests - LiftedLeftShiftWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedLeftShiftWorks);
            QUnit.test("NullableTests - LiftedSignedRightShiftWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedSignedRightShiftWorks);
            QUnit.test("NullableTests - LiftedUnsignedRightShiftWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedUnsignedRightShiftWorks);
            QUnit.test("NullableTests - LiftedEqualityWorksWithUserDefinedOperators", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedEqualityWorksWithUserDefinedOperators);
            QUnit.test("NullableTests - LiftedInequalityWorksWithUserDefinedOperators", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedInequalityWorksWithUserDefinedOperators);
            QUnit.test("NullableTests - LiftedLessThanWorksWithUserDefinedOperators", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedLessThanWorksWithUserDefinedOperators);
            QUnit.test("NullableTests - LiftedGreaterThanWorksWithUserDefinedOperators", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedGreaterThanWorksWithUserDefinedOperators);
            QUnit.test("NullableTests - LiftedLessThanOrEqualWorksWithUserDefinedOperators", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedLessThanOrEqualWorksWithUserDefinedOperators);
            QUnit.test("NullableTests - LiftedGreaterThanOrEqualWorksWithUserDefinedOperators", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedGreaterThanOrEqualWorksWithUserDefinedOperators);
            QUnit.test("NullableTests - LiftedAdditionWorksWithUserDefinedOperators", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedAdditionWorksWithUserDefinedOperators);
            QUnit.test("NullableTests - LiftedUnaryMinusWorksWithUserDefinedOperators_SPI_1634", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedUnaryMinusWorksWithUserDefinedOperators_SPI_1634);
            QUnit.test("NullableTests - LiftedBooleanAndWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedBooleanAndWorks);
            QUnit.test("NullableTests - LiftedBooleanOrWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedBooleanOrWorks);
            QUnit.test("NullableTests - LiftedBooleanXorWorks_SPI_1568", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedBooleanXorWorks_SPI_1568);
            QUnit.test("NullableTests - LiftedBooleanNotWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedBooleanNotWorks);
            QUnit.test("NullableTests - LiftedNegationWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedNegationWorks);
            QUnit.test("NullableTests - LiftedUnaryPlusWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedUnaryPlusWorks);
            QUnit.test("NullableTests - LiftedOnesComplementWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.LiftedOnesComplementWorks);
            QUnit.test("NullableTests - CoalesceWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests.CoalesceWorks);
            QUnit.test("NumberFormatInfoTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NumberFormatInfoTests.TypePropertiesAreCorrect);
            QUnit.test("NumberFormatInfoTests - GetFormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NumberFormatInfoTests.GetFormatWorks);
            QUnit.test("NumberFormatInfoTests - InvariantWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NumberFormatInfoTests.InvariantWorks);
            QUnit.test("PropertyAccessorTests - AccessorsCanBeInvokedInstance", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PropertyAccessorTests.AccessorsCanBeInvokedInstance);
            QUnit.test("PropertyAccessorTests - AccessorsCanBeInvokedStatic", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PropertyAccessorTests.AccessorsCanBeInvokedStatic);
            QUnit.test("PropertyAccessorTests - AccessorsCanBeInvokedGeneric", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PropertyAccessorTests.AccessorsCanBeInvokedGeneric);
            QUnit.test("PropertyAccessorTests - AccessorsCanBeInvokedGenericStatic", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PropertyAccessorTests.AccessorsCanBeInvokedGenericStatic);
            QUnit.test("PropertyAccessorTests - BaseAccessorsCanBeInvoked", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PropertyAccessorTests.BaseAccessorsCanBeInvoked);
            QUnit.test("PropertyAccessorTests - BaseAccessorsCanBeInvokedGeneric", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PropertyAccessorTests.BaseAccessorsCanBeInvokedGeneric);
            QUnit.test("RandomTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RandomTests.TypePropertiesAreCorrect);
            QUnit.test("RandomTests - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RandomTests.DefaultConstructorWorks);
            QUnit.test("RandomTests - SeedConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RandomTests.SeedConstructorWorks);
            QUnit.test("RandomTests - NextWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RandomTests.NextWorks);
            QUnit.test("RandomTests - NextWithMaxWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RandomTests.NextWithMaxWorks);
            QUnit.test("RandomTests - NextWithMinAndMaxWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RandomTests.NextWithMinAndMaxWorks);
            QUnit.test("RandomTests - NextDoubleWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RandomTests.NextDoubleWorks);
            QUnit.test("RandomTests - NextBytesWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RandomTests.NextBytesWorks);
            QUnit.test("AssemblyTests - GetExecutingAssemblyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests.GetExecutingAssemblyWorks);
            QUnit.test("AssemblyTests - GetAssemblyForTypeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests.GetAssemblyForTypeWorks);
            QUnit.test("AssemblyTests - FullNameWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests.FullNameWorks);
            QUnit.test("AssemblyTests - ToStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests.ToStringWorks);
            QUnit.test("AssemblyTests - GetTypesWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests.GetTypesWorks);
            QUnit.test("AssemblyTests - GetTypesWithImportedModuleWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests.GetTypesWithImportedModuleWorks);
            QUnit.test("AssemblyTests - GetTypeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests.GetTypeWorks);
            QUnit.test("AssemblyTests - GetTypeWorksWithGenerics", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests.GetTypeWorksWithGenerics);
            QUnit.test("AssemblyTests - GetTypeWithImportedModuleWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests.GetTypeWithImportedModuleWorks);
            QUnit.test("AssemblyTests - AssemblyOfBuiltInTypes", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests.AssemblyOfBuiltInTypes);
            QUnit.test("AssemblyTests - CreateInstanceWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests.CreateInstanceWorks);
            QUnit.test("AssemblyTests - GetCustomAttributesWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests.GetCustomAttributesWorks);
            QUnit.test("AssemblyTests - LoadCanReturnReferenceToLoadedAssembly", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests.LoadCanReturnReferenceToLoadedAssembly);
            QUnit.test("AssemblyTests - GetManifestResourceNamesWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests.GetManifestResourceNamesWorks);
            QUnit.test("AssemblyTests - GetManifestResourceDataAsBase64WithoutTypeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests.GetManifestResourceDataAsBase64WithoutTypeWorks);
            QUnit.test("AssemblyTests - GetManifestResourceDataAsBase64WithTypeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests.GetManifestResourceDataAsBase64WithTypeWorks);
            QUnit.test("AssemblyTests - GetManifestResourceDataWithoutTypeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests.GetManifestResourceDataWithoutTypeWorks);
            QUnit.test("AssemblyTests - GetManifestResourceDataWithTypeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests.GetManifestResourceDataWithTypeWorks);
            QUnit.test("AttributeTests - CanGetCustomTypeAttributesForTypeWithNoAttributes", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.CanGetCustomTypeAttributesForTypeWithNoAttributes);
            QUnit.test("AttributeTests - CanGetCustomTypeAttributesForClassWithAttributes", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.CanGetCustomTypeAttributesForClassWithAttributes);
            QUnit.test("AttributeTests - NonScriptableAttributesAreNotIncluded", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.NonScriptableAttributesAreNotIncluded);
            QUnit.test("AttributeTests - CanGetCustomTypeAttributesForInterfaceWithAttributes", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.CanGetCustomTypeAttributesForInterfaceWithAttributes);
            QUnit.test("AttributeTests - CanGetCustomTypeAttributesForEnumWithAttributes", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.CanGetCustomTypeAttributesForEnumWithAttributes);
            QUnit.test("AttributeTests - InheritedFlagToGetCustomAttributesWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.InheritedFlagToGetCustomAttributesWorks);
            QUnit.test("AttributeTests - DeepInheritanceWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.DeepInheritanceWorks);
            QUnit.test("AttributeTests - OverridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.OverridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass);
            QUnit.test("AttributeTests - ApplyingNewInstanceOfMultipleUseAttributeAddsTheAttribute", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.ApplyingNewInstanceOfMultipleUseAttributeAddsTheAttribute);
            QUnit.test("AttributeTests - NonInheritedAttributeIsNotInherited", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.NonInheritedAttributeIsNotInherited);
            QUnit.test("AttributeTests - GetCustomAttributesTypeFilterWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.GetCustomAttributesTypeFilterWorks);
            QUnit.test("AttributeTests - GetCustomAttributesWorksForOpenGenericClass", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.GetCustomAttributesWorksForOpenGenericClass);
            QUnit.test("AttributeTests - GetCustomAttributesWorksForConstructedGenericClass", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.GetCustomAttributesWorksForConstructedGenericClass);
            QUnit.test("AttributeTests - GetCustomAttributesWorksForOpenGenericInterface", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.GetCustomAttributesWorksForOpenGenericInterface);
            QUnit.test("AttributeTests - GetCustomAttributesWorksForConstructedGenericInterface", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.GetCustomAttributesWorksForConstructedGenericInterface);
            QUnit.test("AttributeTests - AllSupportedScalarTypesCanBeUsedAsAttributeArguments", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.AllSupportedScalarTypesCanBeUsedAsAttributeArguments);
            QUnit.test("AttributeTests - ArraysCanBeUsedAsAttributeArguments", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.ArraysCanBeUsedAsAttributeArguments);
            QUnit.test("AttributeTests - NamedValuesEnumCanBeUsedAsAttributeArgument", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.NamedValuesEnumCanBeUsedAsAttributeArgument);
            QUnit.test("AttributeTests - PropertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.PropertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration);
            QUnit.test("AttributeTests - PropertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.PropertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration);
            QUnit.test("AttributeTests - PropertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.PropertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration);
            QUnit.test("AttributeTests - FieldsCanBeAssignedInAttributeDeclaration", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.FieldsCanBeAssignedInAttributeDeclaration);
            QUnit.test("AttributeTests - CreatingAttributeWithNamedConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.CreatingAttributeWithNamedConstructorWorks);
            QUnit.test("AttributeTests - CreatingAttributeWithInlineCodeConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.CreatingAttributeWithInlineCodeConstructorWorks);
            QUnit.test("AttributeTests - ConditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests.ConditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved);
            QUnit.test("GetMembersTests - GetMembersWithoutBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetMembersWithoutBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetMembersWorksForInterface", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetMembersWorksForInterface);
            QUnit.test("GetMembersTests - GetMembersWithBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetMembersWithBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetMemberWithNameWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetMemberWithNameWorks);
            QUnit.test("GetMembersTests - GetMemberWithNameAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetMemberWithNameAndBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetConstructorsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetConstructorsWorks);
            QUnit.test("GetMembersTests - GetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetConstructorWorks);
            QUnit.test("GetMembersTests - GetMethodsWithoutBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetMethodsWithoutBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetMethodsWithBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetMethodsWithBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetMethodWithNameWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetMethodWithNameWorks);
            QUnit.test("GetMembersTests - GetMethodWithNameAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetMethodWithNameAndBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetMethodWithNameAndArgumentTypesWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetMethodWithNameAndArgumentTypesWorks);
            QUnit.test("GetMembersTests - GetMethodWithNameAndArgumentTypesAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetMethodWithNameAndArgumentTypesAndBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetPropertiesWithoutBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetPropertiesWithoutBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetPropertiesWithBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetPropertiesWithBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetPropertyWithNameWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetPropertyWithNameWorks);
            QUnit.test("GetMembersTests - GetPropertyWithNameAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetPropertyWithNameAndBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetPropertyWithNameAndArgumentTypesWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetPropertyWithNameAndArgumentTypesWorks);
            QUnit.test("GetMembersTests - GetPropertyWithNameAndArgumentTypesAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetPropertyWithNameAndArgumentTypesAndBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetFieldsWithoutBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetFieldsWithoutBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetFieldsWithBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetFieldsWithBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetFieldWithNameWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetFieldWithNameWorks);
            QUnit.test("GetMembersTests - GetFieldWithNameAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetFieldWithNameAndBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetEventsWithoutBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetEventsWithoutBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetEventsWithBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetEventsWithBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetEventWithNameWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetEventWithNameWorks);
            QUnit.test("GetMembersTests - GetEventWithNameAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.GetEventWithNameAndBindingFlagsWorks);
            QUnit.test("GetMembersTests - IsOperatorForMemberInfoWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests.IsOperatorForMemberInfoWorks);
            QUnit.test("ReflectionTests - GetMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.GetMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute);
            QUnit.test("ReflectionTests - StructMemberReflectionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.StructMemberReflectionWorks);
            QUnit.test("ReflectionTests - IsStaticFlagWorksForMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.IsStaticFlagWorksForMethod);
            QUnit.test("ReflectionTests - MemberTypeIsMethodForMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.MemberTypeIsMethodForMethod);
            QUnit.test("ReflectionTests - IsConstructorIsFalseForMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.IsConstructorIsFalseForMethod);
            QUnit.test("ReflectionTests - IsConstructorIsTrueForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.IsConstructorIsTrueForAllKindsOfConstructors);
            QUnit.test("ReflectionTests - IsStaticIsFalseForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.IsStaticIsFalseForAllKindsOfConstructors);
            QUnit.test("ReflectionTests - MemberTypeIsConstructorForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.MemberTypeIsConstructorForAllKindsOfConstructors);
            QUnit.test("ReflectionTests - NameIsCtorForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.NameIsCtorForAllKindsOfConstructors);
            QUnit.test("ReflectionTests - DeclaringTypeIsCorrectForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.DeclaringTypeIsCorrectForAllKindsOfConstructors);
            QUnit.test("ReflectionTests - ScriptNameIsCorrectForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.ScriptNameIsCorrectForAllKindsOfConstructors);
            QUnit.test("ReflectionTests - IsStaticMethodIsTrueOnlyForStaticMethodConstructors", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.IsStaticMethodIsTrueOnlyForStaticMethodConstructors);
            QUnit.test("ReflectionTests - IsExpandParamsIsCorrectForConstructors", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.IsExpandParamsIsCorrectForConstructors);
            QUnit.test("ReflectionTests - SpecialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.SpecialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors);
            QUnit.test("ReflectionTests - DeclaringTypeShouldBeCorrectForMethods", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.DeclaringTypeShouldBeCorrectForMethods);
            QUnit.test("ReflectionTests - ReturnTypeAndParameterTypesAreCorrectForMethods", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.ReturnTypeAndParameterTypesAreCorrectForMethods);
            QUnit.test("ReflectionTests - ParameterTypesShouldBeCorrectForConstructors", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.ParameterTypesShouldBeCorrectForConstructors);
            QUnit.test("ReflectionTests - VoidIsConsideredObjectAsReturnType", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.VoidIsConsideredObjectAsReturnType);
            QUnit.test("ReflectionTests - MethodNameIsTheCSharpName", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.MethodNameIsTheCSharpName);
            QUnit.test("ReflectionTests - TypeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.TypeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes);
            QUnit.test("ReflectionTests - TypeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.TypeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes);
            QUnit.test("ReflectionTests - MethodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.MethodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes);
            QUnit.test("ReflectionTests - IsGenericMethodDefinitionAndTypeParameterCountWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.IsGenericMethodDefinitionAndTypeParameterCountWork);
            QUnit.test("ReflectionTests - ScriptNameWorksForAllKindsOfMethods", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.ScriptNameWorksForAllKindsOfMethods);
            QUnit.test("ReflectionTests - SpecialImplementationExistsOnlyForMethodsImplementedAsInlineCode", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.SpecialImplementationExistsOnlyForMethodsImplementedAsInlineCode);
            QUnit.test("ReflectionTests - IsExpandParamsIsCorrectForMethods", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.IsExpandParamsIsCorrectForMethods);
            QUnit.test("ReflectionTests - CreateDelegateWorksForNonGenericInstanceMethods", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.CreateDelegateWorksForNonGenericInstanceMethods);
            QUnit.test("ReflectionTests - DelegateCreateDelegateWorksForNonGenericInstanceMethods", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.DelegateCreateDelegateWorksForNonGenericInstanceMethods);
            QUnit.test("ReflectionTests - CreateDelegateWorksNonGenericStaticMethods", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.CreateDelegateWorksNonGenericStaticMethods);
            QUnit.test("ReflectionTests - CreateDelegateWorksNonGenericStaticMethodOfGenericType", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.CreateDelegateWorksNonGenericStaticMethodOfGenericType);
            QUnit.test("ReflectionTests - CreateDelegateWorksForGenericInstanceMethods", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.CreateDelegateWorksForGenericInstanceMethods);
            QUnit.test("ReflectionTests - CreateDelegateWorksForGenericStaticMethods", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.CreateDelegateWorksForGenericStaticMethods);
            QUnit.test("ReflectionTests - InvokeWorksForNonGenericInstanceMethods", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.InvokeWorksForNonGenericInstanceMethods);
            QUnit.test("ReflectionTests - InvokeWorksForNonGenericStaticMethods", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.InvokeWorksForNonGenericStaticMethods);
            QUnit.test("ReflectionTests - InvokeWorksForNonGenericInstanceMethodsOnSerializableTypes", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.InvokeWorksForNonGenericInstanceMethodsOnSerializableTypes);
            QUnit.test("ReflectionTests - InvokeWorksForNonGenericInlineCodeMethods", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.InvokeWorksForNonGenericInlineCodeMethods);
            QUnit.test("ReflectionTests - InvokeWorksForGenericInlineCodeMethods", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.InvokeWorksForGenericInlineCodeMethods);
            QUnit.test("ReflectionTests - InvokeWorksForGenericInstanceMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.InvokeWorksForGenericInstanceMethod);
            QUnit.test("ReflectionTests - InvokeWorksForGenericStaticMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.InvokeWorksForGenericStaticMethod);
            QUnit.test("ReflectionTests - InvokeWorksForGenericInstanceMethodsOnSerializableTypes", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.InvokeWorksForGenericInstanceMethodsOnSerializableTypes);
            QUnit.test("ReflectionTests - InvokeWorksForExpandParamsMethods", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.InvokeWorksForExpandParamsMethods);
            QUnit.test("ReflectionTests - InvokeWorksForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.InvokeWorksForAllKindsOfConstructors);
            QUnit.test("ReflectionTests - InvokeWorksForExpandParamsConstructors", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.InvokeWorksForExpandParamsConstructors);
            QUnit.test("ReflectionTests - MemberTypeIsFieldForField", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.MemberTypeIsFieldForField);
            QUnit.test("ReflectionTests - DeclaringTypeIsCorrectForField", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.DeclaringTypeIsCorrectForField);
            QUnit.test("ReflectionTests - NameIsCorrectForField", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.NameIsCorrectForField);
            QUnit.test("ReflectionTests - IsStaticIsCorrectForField", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.IsStaticIsCorrectForField);
            QUnit.test("ReflectionTests - FieldTypeIsCorrectForField", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.FieldTypeIsCorrectForField);
            QUnit.test("ReflectionTests - ScriptNameIsCorrectForField", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.ScriptNameIsCorrectForField);
            QUnit.test("ReflectionTests - GetValueWorksForInstanceField", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.GetValueWorksForInstanceField);
            QUnit.test("ReflectionTests - GetValueWorksForStaticField", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.GetValueWorksForStaticField);
            QUnit.test("ReflectionTests - SetValueWorksForInstanceField", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.SetValueWorksForInstanceField);
            QUnit.test("ReflectionTests - SetValueWorksForStaticField", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.SetValueWorksForStaticField);
            QUnit.test("ReflectionTests - MemberTypeIsEventForEvent", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.MemberTypeIsEventForEvent);
            QUnit.test("ReflectionTests - DeclaringTypeIsCorrectForEvent", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.DeclaringTypeIsCorrectForEvent);
            QUnit.test("ReflectionTests - NameIsCorrectForEvent", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.NameIsCorrectForEvent);
            QUnit.test("ReflectionTests - IsStaticIsCorrectForEvent", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.IsStaticIsCorrectForEvent);
            QUnit.test("ReflectionTests - AddEventHandlerMethodWorksForInstanceEvent", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.AddEventHandlerMethodWorksForInstanceEvent);
            QUnit.test("ReflectionTests - AddEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.AddEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod);
            QUnit.test("ReflectionTests - AddEventHandlerMethodWorksForStaticEvent", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.AddEventHandlerMethodWorksForStaticEvent);
            QUnit.test("ReflectionTests - AddEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.AddEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod);
            QUnit.test("ReflectionTests - RemoveEventHandlerMethodWorksForInstanceEvent", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.RemoveEventHandlerMethodWorksForInstanceEvent);
            QUnit.test("ReflectionTests - RemoveEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.RemoveEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod);
            QUnit.test("ReflectionTests - RemoveEventHandlerMethodWorksForStaticEvent", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.RemoveEventHandlerMethodWorksForStaticEvent);
            QUnit.test("ReflectionTests - RemoveEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.RemoveEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod);
            QUnit.test("ReflectionTests - PropertiesForAddMethodAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.PropertiesForAddMethodAreCorrect);
            QUnit.test("ReflectionTests - PropertiesForRemoveMethodAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.PropertiesForRemoveMethodAreCorrect);
            QUnit.test("ReflectionTests - MemberTypeIsPropertyForProperty", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.MemberTypeIsPropertyForProperty);
            QUnit.test("ReflectionTests - ScriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.ScriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties);
            QUnit.test("ReflectionTests - MemberTypeIsPropertyForIndexer", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.MemberTypeIsPropertyForIndexer);
            QUnit.test("ReflectionTests - DeclaringTypeIsCorrectForProperty", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.DeclaringTypeIsCorrectForProperty);
            QUnit.test("ReflectionTests - DeclaringTypeIsCorrectForIndexer", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.DeclaringTypeIsCorrectForIndexer);
            QUnit.test("ReflectionTests - NameIsCorrectForProperty", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.NameIsCorrectForProperty);
            QUnit.test("ReflectionTests - NameIsCorrectForIndexer", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.NameIsCorrectForIndexer);
            QUnit.test("ReflectionTests - IsStaticIsCorrectForProperty", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.IsStaticIsCorrectForProperty);
            QUnit.test("ReflectionTests - IsStaticIsFalseForIndexer", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.IsStaticIsFalseForIndexer);
            QUnit.test("ReflectionTests - PropertyTypeIsCorrectForProperty", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.PropertyTypeIsCorrectForProperty);
            QUnit.test("ReflectionTests - PropertyTypeIsCorrectForIndexer", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.PropertyTypeIsCorrectForIndexer);
            QUnit.test("ReflectionTests - IndexParameterTypesAreEmptyForProperty", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.IndexParameterTypesAreEmptyForProperty);
            QUnit.test("ReflectionTests - IndexParameterTypesAreCorrectForIndexer", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.IndexParameterTypesAreCorrectForIndexer);
            QUnit.test("ReflectionTests - PropertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.PropertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods);
            QUnit.test("ReflectionTests - PropertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.PropertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods);
            QUnit.test("ReflectionTests - PropertiesForGetMethodAreCorrectForPropertyImplementedAsFields", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.PropertiesForGetMethodAreCorrectForPropertyImplementedAsFields);
            QUnit.test("ReflectionTests - PropertiesForSetMethodAreCorrectForPropertyImplementedAsFields", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.PropertiesForSetMethodAreCorrectForPropertyImplementedAsFields);
            QUnit.test("ReflectionTests - PropertiesForGetMethodAreCorrectForIndexer", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.PropertiesForGetMethodAreCorrectForIndexer);
            QUnit.test("ReflectionTests - PropertiesForSetMethodAreCorrectForIndexer", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.PropertiesForSetMethodAreCorrectForIndexer);
            QUnit.test("ReflectionTests - CanReadAndWriteAndPropertiesWithOnlyOneAccessor", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.CanReadAndWriteAndPropertiesWithOnlyOneAccessor);
            QUnit.test("ReflectionTests - CanReadAndWriteAndIndexersWithOnlyOneAccessor", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.CanReadAndWriteAndIndexersWithOnlyOneAccessor);
            QUnit.test("ReflectionTests - PropertyInfoGetValueWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.PropertyInfoGetValueWorks);
            QUnit.test("ReflectionTests - PropertyInfoSetValueWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.PropertyInfoSetValueWorks);
            QUnit.test("ReflectionTests - MemberAttributesWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.MemberAttributesWork);
            QUnit.test("ReflectionTests - MembersReflectableAttributeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests.MembersReflectableAttributeWorks);
            QUnit.test("TypeSystemLanguageSupportTests - TypeIsWorksForReferenceTypes", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemLanguageSupportTests.TypeIsWorksForReferenceTypes);
            QUnit.test("TypeSystemLanguageSupportTests - TypeAsWorksForReferenceTypes", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemLanguageSupportTests.TypeAsWorksForReferenceTypes);
            QUnit.test("TypeSystemLanguageSupportTests - CastWorksForReferenceTypes", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemLanguageSupportTests.CastWorksForReferenceTypes);
            QUnit.test("TypeSystemLanguageSupportTests - GetTypeWorksOnObjects", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemLanguageSupportTests.GetTypeWorksOnObjects);
            QUnit.test("TypeSystemLanguageSupportTests - GetTypeOnNullInstanceThrowsException", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemLanguageSupportTests.GetTypeOnNullInstanceThrowsException);
            QUnit.test("TypeSystemLanguageSupportTests - CastOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemLanguageSupportTests.CastOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric);
            QUnit.test("TypeSystemLanguageSupportTests - TypeCheckForSubTypeOfGenericType", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemLanguageSupportTests.TypeCheckForSubTypeOfGenericType);
            QUnit.test("TypeSystemTests - FullNamePropertyReturnsTheNameWithTheNamespace", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.FullNamePropertyReturnsTheNameWithTheNamespace);
            QUnit.test("TypeSystemTests - AssemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.AssemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName);
            QUnit.test("TypeSystemTests - AssemblyPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.AssemblyPropertyWorks);
            QUnit.test("TypeSystemTests - NamespacePropertyReturnsTheNamespaceWithoutTheName", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.NamespacePropertyReturnsTheNamespaceWithoutTheName);
            QUnit.test("TypeSystemTests - InstantiatingClassWithConstructorThatNeedsToBeAppliedWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.InstantiatingClassWithConstructorThatNeedsToBeAppliedWorks);
            QUnit.test("TypeSystemTests - NamePropertyRemovesTheNamespace", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.NamePropertyRemovesTheNamespace);
            QUnit.test("TypeSystemTests - GettingBaseTypeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.GettingBaseTypeWorks);
            QUnit.test("TypeSystemTests - GettingImplementedInterfacesWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.GettingImplementedInterfacesWorks);
            QUnit.test("TypeSystemTests - TypeOfAnOpenGenericClassWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.TypeOfAnOpenGenericClassWorks);
            QUnit.test("TypeSystemTests - TypeOfAnOpenGenericInterfaceWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.TypeOfAnOpenGenericInterfaceWorks);
            QUnit.test("TypeSystemTests - TypeOfInstantiatedGenericClassWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.TypeOfInstantiatedGenericClassWorks);
            QUnit.test("TypeSystemTests - TypeOfInstantiatedGenericInterfaceWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.TypeOfInstantiatedGenericInterfaceWorks);
            QUnit.test("TypeSystemTests - ConstructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.ConstructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance);
            QUnit.test("TypeSystemTests - AccessingAStaticMemberInAGenericClassWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.AccessingAStaticMemberInAGenericClassWorks);
            QUnit.test("TypeSystemTests - TypeOfNestedGenericClassWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.TypeOfNestedGenericClassWorks);
            QUnit.test("TypeSystemTests - BaseTypeAndImplementedInterfacesForGenericTypeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.BaseTypeAndImplementedInterfacesForGenericTypeWorks);
            QUnit.test("TypeSystemTests - IsGenericTypeDefinitionWorksAsExpected", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.IsGenericTypeDefinitionWorksAsExpected);
            QUnit.test("TypeSystemTests - GenericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.GenericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes);
            QUnit.test("TypeSystemTests - GetGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.GetGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull);
            QUnit.test("TypeSystemTests - GetGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.GetGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull);
            QUnit.test("TypeSystemTests - IsAssignableFromWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.IsAssignableFromWorks);
            QUnit.test("TypeSystemTests - IsSubclassOfWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.IsSubclassOfWorks);
            QUnit.test("TypeSystemTests - IsClassWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.IsClassWorks);
            QUnit.test("TypeSystemTests - IsEnumWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.IsEnumWorks);
            QUnit.test("TypeSystemTests - IsArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.IsArrayWorks);
            QUnit.test("TypeSystemTests - IsFlagsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.IsFlagsWorks);
            QUnit.test("TypeSystemTests - IsInterfaceWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.IsInterfaceWorks);
            QUnit.test("TypeSystemTests - IsInstanceOfTypeWorksForReferenceTypes", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.IsInstanceOfTypeWorksForReferenceTypes);
            QUnit.test("TypeSystemTests - InvokingBaseUnnamedConstructorWithoutArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.InvokingBaseUnnamedConstructorWithoutArgumentsWorks);
            QUnit.test("TypeSystemTests - InvokingBaseUnnamedConstructorWithArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.InvokingBaseUnnamedConstructorWithArgumentsWorks);
            QUnit.test("TypeSystemTests - InvokingBaseNamedConstructorWithoutArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.InvokingBaseNamedConstructorWithoutArgumentsWorks);
            QUnit.test("TypeSystemTests - InvokingBaseNamedConstructorWithArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.InvokingBaseNamedConstructorWithArgumentsWorks);
            QUnit.test("TypeSystemTests - ConstructingInstanceWithNamedConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.ConstructingInstanceWithNamedConstructorWorks);
            QUnit.test("TypeSystemTests - ConstructingInstanceWithNamedConstructorWorks2", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.ConstructingInstanceWithNamedConstructorWorks2);
            QUnit.test("TypeSystemTests - InvokingBaseMethodWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.InvokingBaseMethodWorks);
            QUnit.test("TypeSystemTests - InvokingGenericBaseMethodWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.InvokingGenericBaseMethodWorks);
            QUnit.test("TypeSystemTests - MethodGroupConversionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.MethodGroupConversionWorks);
            QUnit.test("TypeSystemTests - MethodGroupConversionOnGenericMethodWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.MethodGroupConversionOnGenericMethodWorks);
            QUnit.test("TypeSystemTests - MethodGroupConversionOnBaseMethodWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.MethodGroupConversionOnBaseMethodWorks);
            QUnit.test("TypeSystemTests - MethodGroupConversionOnGenericBaseMethodWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.MethodGroupConversionOnGenericBaseMethodWorks);
            QUnit.test("TypeSystemTests - ImportedInterfaceAppearsAsObjectWhenUsedAsGenericArgument", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.ImportedInterfaceAppearsAsObjectWhenUsedAsGenericArgument);
            QUnit.test("TypeSystemTests - FalseIsFunctionShouldReturnFalse", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.FalseIsFunctionShouldReturnFalse);
            QUnit.test("TypeSystemTests - CastingUndefinedToOtherTypeShouldReturnUndefined", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.CastingUndefinedToOtherTypeShouldReturnUndefined);
            QUnit.test("TypeSystemTests - NonSerializableTypeCanInheritFromSerializableType", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.NonSerializableTypeCanInheritFromSerializableType);
            QUnit.test("TypeSystemTests - InheritingFromRecordWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.InheritingFromRecordWorks);
            QUnit.test("TypeSystemTests - InstanceOfWorksForSerializableTypesWithCustomTypeCheckCode", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.InstanceOfWorksForSerializableTypesWithCustomTypeCheckCode);
            QUnit.test("TypeSystemTests - StaticGetTypeMethodWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.StaticGetTypeMethodWorks);
            QUnit.test("TypeSystemTests - StaticGetTypeMethodWithGenericsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.StaticGetTypeMethodWithGenericsWorks);
            QUnit.test("TypeSystemTests - CastingToNamedValuesEnumCastsToString", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.CastingToNamedValuesEnumCastsToString);
            QUnit.test("TypeSystemTests - CastingToImportedNamedValuesEnumCastsToString", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.CastingToImportedNamedValuesEnumCastsToString);
            QUnit.test("TypeSystemTests - DefaultValueOfNamedValuesEnumIsNull", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.DefaultValueOfNamedValuesEnumIsNull);
            QUnit.test("TypeSystemTests - DefaultValueOfImportedNamedValuesEnumIsNull", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests.DefaultValueOfImportedNamedValuesEnumIsNull);
            QUnit.test("RefParameterTests - CanUseReferenceToLocalVariables", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RefParameterTests.CanUseReferenceToLocalVariables);
            QUnit.test("RefParameterTests - CanUseReferenceToField", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RefParameterTests.CanUseReferenceToField);
            QUnit.test("RefParameterTests - CanUseReferenceToOneDimensionalArray", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RefParameterTests.CanUseReferenceToOneDimensionalArray);
            QUnit.test("RefParameterTests - CanUseReferenceToMultiDimensionalArray", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RefParameterTests.CanUseReferenceToMultiDimensionalArray);
            QUnit.test("RefParameterTests - CanUseReferenceToThis_SPI_1569", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RefParameterTests.CanUseReferenceToThis_SPI_1569);
            QUnit.test("RuntimeHelpersTests - GetHashCodeWoksForObject_SPI_1570", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RuntimeHelpersTests.GetHashCodeWoksForObject_SPI_1570);
            QUnit.test("RuntimeHelpersTests - GetHashCodeCallsGetHashCodeNonVirtually_SPI_1570", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RuntimeHelpersTests.GetHashCodeCallsGetHashCodeNonVirtually_SPI_1570);
            QUnit.test("JsonTests - NonGenericParseWorks_SPI_1574", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.JsonTests.NonGenericParseWorks_SPI_1574);
            QUnit.test("JsonTests - GenericParseWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.JsonTests.GenericParseWorks);
            QUnit.test("JsonTests - NonGenericParseWithCallbackWorks_SPI_1574", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.JsonTests.NonGenericParseWithCallbackWorks_SPI_1574);
            QUnit.test("JsonTests - GenericParseWithCallbackWorks_SPI_1574", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.JsonTests.GenericParseWithCallbackWorks_SPI_1574);
            QUnit.test("JsonTests - StringifyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.JsonTests.StringifyWorks);
            QUnit.test("JsonTests - StringifyWithSerializableMembersArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.JsonTests.StringifyWithSerializableMembersArrayWorks);
            QUnit.test("JsonTests - StringifyWithSerializableMembersArrayAndIntentCountWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.JsonTests.StringifyWithSerializableMembersArrayAndIntentCountWorks);
            QUnit.test("JsonTests - StringifyWithSerializableMembersArrayAndIntentTextWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.JsonTests.StringifyWithSerializableMembersArrayAndIntentTextWorks);
            QUnit.test("JsonTests - StringifyWithCallbackWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.JsonTests.StringifyWithCallbackWorks);
            QUnit.test("JsonTests - StringifyWithCallbackAndIndentCountWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.JsonTests.StringifyWithCallbackAndIndentCountWorks);
            QUnit.test("JsonTests - StringifyWithCallbackAndIndentTextWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.JsonTests.StringifyWithCallbackAndIndentTextWorks);
            QUnit.test("BooleanTests - TypePropertiesAreCorrect_SPI_1575", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.BooleanTests.TypePropertiesAreCorrect_SPI_1575);
            QUnit.test("BooleanTests - DefaultValueIsFalse", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.BooleanTests.DefaultValueIsFalse);
            QUnit.test("BooleanTests - CreatingInstanceReturnsFalse", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.BooleanTests.CreatingInstanceReturnsFalse);
            QUnit.test("BooleanTests - DefaultConstructorReturnsFalse_SPI_1576", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.BooleanTests.DefaultConstructorReturnsFalse_SPI_1576);
            QUnit.test("BooleanTests - ParseWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.BooleanTests.ParseWorks);
            QUnit.test("BooleanTests - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.BooleanTests.GetHashCodeWorks);
            QUnit.test("BooleanTests - ObjectEqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.BooleanTests.ObjectEqualsWorks);
            QUnit.test("BooleanTests - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.BooleanTests.IEquatableEqualsWorks);
            QUnit.test("BooleanTests - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.BooleanTests.CompareToWorks);
            QUnit.test("BooleanTests - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.BooleanTests.IComparableCompareToWorks);
            QUnit.test("ByteTests - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests.TypePropertiesAreCorrect_SPI_1717);
            QUnit.test("ByteTests - CastsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests.CastsWork);
            QUnit.test("ByteTests - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests.DefaultValueIs0);
            QUnit.test("ByteTests - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests.DefaultConstructorReturnsZero);
            QUnit.test("ByteTests - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests.CreatingInstanceReturnsZero);
            QUnit.test("ByteTests - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests.ConstantsWork);
            QUnit.test("ByteTests - FormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests.FormatWorks);
            QUnit.test("ByteTests - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests.ToStringWithFormatWorks);
            QUnit.test("ByteTests - ToStringWithFormatAndProviderWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests.ToStringWithFormatAndProviderWorks);
            QUnit.test("ByteTests - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests.IFormattableToStringWorks);
            QUnit.test("ByteTests - TryParseWorks_SPI_1592", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests.TryParseWorks_SPI_1592);
            QUnit.test("ByteTests - ParseWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests.ParseWorks);
            QUnit.test("ByteTests - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests.ToStringWithoutRadixWorks);
            QUnit.test("ByteTests - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests.ToStringWithRadixWorks);
            QUnit.test("ByteTests - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests.GetHashCodeWorks);
            QUnit.test("ByteTests - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests.EqualsWorks);
            QUnit.test("ByteTests - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests.IEquatableEqualsWorks);
            QUnit.test("ByteTests - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests.CompareToWorks);
            QUnit.test("ByteTests - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests.IComparableCompareToWorks);
            QUnit.test("CharTests - TypePropertiesAreInt32_SPI_1603", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CharTests.TypePropertiesAreInt32_SPI_1603);
            QUnit.test("DateTests - TypePropertiesAreCorrect_SPI_1608_1609", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.TypePropertiesAreCorrect_SPI_1608_1609);
            QUnit.test("DateTests - DefaultConstructorReturnsTodaysDate", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.DefaultConstructorReturnsTodaysDate);
            QUnit.test("DateTests - CreatingInstanceReturnsTodaysDate_SPI_1604", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.CreatingInstanceReturnsTodaysDate_SPI_1604);
            QUnit.test("DateTests - MillisecondSinceEpochConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.MillisecondSinceEpochConstructorWorks);
            QUnit.test("DateTests - StringConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.StringConstructorWorks);
            QUnit.test("DateTests - YMDConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.YMDConstructorWorks);
            QUnit.test("DateTests - YMDHConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.YMDHConstructorWorks);
            QUnit.test("DateTests - YMDHNConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.YMDHNConstructorWorks);
            QUnit.test("DateTests - YMDHNSConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.YMDHNSConstructorWorks);
            QUnit.test("DateTests - YMDHNSUConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.YMDHNSUConstructorWorks);
            QUnit.test("DateTests - NowWorks_SPI_1624", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.NowWorks_SPI_1624);
            QUnit.test("DateTests - GetFullYearWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.GetFullYearWorks);
            QUnit.test("DateTests - GetMonthWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.GetMonthWorks);
            QUnit.test("DateTests - GetDateWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.GetDateWorks);
            QUnit.test("DateTests - GetHoursWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.GetHoursWorks);
            QUnit.test("DateTests - GetMinutesWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.GetMinutesWorks);
            QUnit.test("DateTests - GetSecondsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.GetSecondsWorks);
            QUnit.test("DateTests - GetMillisecondsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.GetMillisecondsWorks);
            QUnit.test("DateTests - GetDayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.GetDayWorks);
            QUnit.test("DateTests - GetTimeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.GetTimeWorks);
            QUnit.test("DateTests - ValueOfWorks_SPI_1624", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.ValueOfWorks_SPI_1624);
            QUnit.test("DateTests - GetTimezoneOffsetWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.GetTimezoneOffsetWorks);
            QUnit.test("DateTests - GetUtcFullYearWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.GetUtcFullYearWorks);
            QUnit.test("DateTests - GetUtcMonthWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.GetUtcMonthWorks);
            QUnit.test("DateTests - GetUtcDateWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.GetUtcDateWorks);
            QUnit.test("DateTests - GetUtcHoursWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.GetUtcHoursWorks);
            QUnit.test("DateTests - GetUtcMinutesWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.GetUtcMinutesWorks);
            QUnit.test("DateTests - GetUtcSecondsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.GetUtcSecondsWorks);
            QUnit.test("DateTests - GetUtcMillisecondsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.GetUtcMillisecondsWorks);
            QUnit.test("DateTests - GetUtcDayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.GetUtcDayWorks);
            QUnit.test("DateTests - ParseWorks_SPI_1624", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.ParseWorks_SPI_1624);
            QUnit.test("DateTests - ToLocaleDateStringIsWorking_1624", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.ToLocaleDateStringIsWorking_1624);
            QUnit.test("DateTests - ToDateStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.ToDateStringWorks);
            QUnit.test("DateTests - ToTimeStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.ToTimeStringWorks);
            QUnit.test("DateTests - ToUtcStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.ToUtcStringWorks);
            QUnit.test("DateTests - ToLocaleDateStringWorks_SPI_1624", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.ToLocaleDateStringWorks_SPI_1624);
            QUnit.test("DateTests - DateUTCIsWorking_SPI_1624", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.DateUTCIsWorking_SPI_1624);
            QUnit.test("DateTests - ToLocaleTimeStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.ToLocaleTimeStringWorks);
            QUnit.test("DateTests - SubtractingDatesWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.SubtractingDatesWorks);
            QUnit.test("DateTests - DateEqualityWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.DateEqualityWorks);
            QUnit.test("DateTests - DateInequalityWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.DateInequalityWorks);
            QUnit.test("DateTests - DateLessThanWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.DateLessThanWorks);
            QUnit.test("DateTests - DateLessEqualWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.DateLessEqualWorks);
            QUnit.test("DateTests - DateGreaterThanWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.DateGreaterThanWorks);
            QUnit.test("DateTests - DateGreaterEqualWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.DateGreaterEqualWorks);
            QUnit.test("DateTests - SetFullYearWithOneParameterWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.SetFullYearWithOneParameterWorks);
            QUnit.test("DateTests - SetFullYearWithTwoParametersWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.SetFullYearWithTwoParametersWorks);
            QUnit.test("DateTests - SetFullYearWithThreeParametersWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.SetFullYearWithThreeParametersWorks);
            QUnit.test("DateTests - SetMonthWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.SetMonthWorks);
            QUnit.test("DateTests - SetDateWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.SetDateWorks);
            QUnit.test("DateTests - SetHoursWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.SetHoursWorks);
            QUnit.test("DateTests - SetMinutesWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.SetMinutesWorks);
            QUnit.test("DateTests - SetSecondsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.SetSecondsWorks);
            QUnit.test("DateTests - SetMillisecondsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.SetMillisecondsWorks);
            QUnit.test("DateTests - SetTimeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.SetTimeWorks);
            QUnit.test("DateTests - SetTimeAsDoubleWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.SetTimeAsDoubleWorks);
            QUnit.test("DateTests - SetUtcFullYearWithOneParameterWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.SetUtcFullYearWithOneParameterWorks);
            QUnit.test("DateTests - SetUtcFullYearWithTwoParametersWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.SetUtcFullYearWithTwoParametersWorks);
            QUnit.test("DateTests - SetUtcFullYearWithThreeParametersWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.SetUtcFullYearWithThreeParametersWorks);
            QUnit.test("DateTests - SetUtcMonthWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.SetUtcMonthWorks);
            QUnit.test("DateTests - SetUtcDateWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.SetUtcDateWorks);
            QUnit.test("DateTests - SetUtcHoursWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.SetUtcHoursWorks);
            QUnit.test("DateTests - SetUtcMinutesWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.SetUtcMinutesWorks);
            QUnit.test("DateTests - SetUtcSecondsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.SetUtcSecondsWorks);
            QUnit.test("DateTests - SetUtcMillisecondsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.SetUtcMillisecondsWorks);
            QUnit.test("DateTests - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.GetHashCodeWorks);
            QUnit.test("DateTests - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests.EqualsWorks);
            QUnit.test("DecimalTests - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.TypePropertiesAreCorrect_SPI_1717);
            QUnit.test("DecimalTests - DefaultValueIsDecimal0", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.DefaultValueIsDecimal0);
            QUnit.test("DecimalTests - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.CreatingInstanceReturnsZero);
            QUnit.test("DecimalTests - LiteralDecimalsWork_SPI_1590", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.LiteralDecimalsWork_SPI_1590);
            QUnit.test("DecimalTests - ConstantsWork_SPI_1590", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.ConstantsWork_SPI_1590);
            QUnit.test("DecimalTests - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.DefaultConstructorReturnsZero);
            QUnit.test("DecimalTests - ConvertingConstructorsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.ConvertingConstructorsWork);
            QUnit.test("DecimalTests - FormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.FormatWorks);
            QUnit.test("DecimalTests - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.ToStringWithFormatWorks);
            QUnit.test("DecimalTests - ToStringWithFormatAndProviderWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.ToStringWithFormatAndProviderWorks);
            QUnit.test("DecimalTests - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.IFormattableToStringWorks);
            QUnit.test("DecimalTests - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.ToStringWithoutRadixWorks);
            QUnit.test("DecimalTests - ConversionsToDecimalWork_SPI_1580", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.ConversionsToDecimalWork_SPI_1580);
            QUnit.test("DecimalTests - NullableConversionsToDecimalWork_SPI_1580_1581_1587", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.NullableConversionsToDecimalWork_SPI_1580_1581_1587);
            QUnit.test("DecimalTests - DecimalToSByte_SPI_1580", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.DecimalToSByte_SPI_1580);
            QUnit.test("DecimalTests - DecimalToByte_SPI_1580", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.DecimalToByte_SPI_1580);
            QUnit.test("DecimalTests - DecimalToShort_SPI_1580", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.DecimalToShort_SPI_1580);
            QUnit.test("DecimalTests - DecimalToUShort_SPI_1580", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.DecimalToUShort_SPI_1580);
            QUnit.test("DecimalTests - DecimalToChar", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.DecimalToChar);
            QUnit.test("DecimalTests - DecimalToInt_SPI_1580", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.DecimalToInt_SPI_1580);
            QUnit.test("DecimalTests - DecimalToUInt_SPI_1580", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.DecimalToUInt_SPI_1580);
            QUnit.test("DecimalTests - DecimalToLong_SPI_1578", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.DecimalToLong_SPI_1578);
            QUnit.test("DecimalTests - DecimalToULong_SPI_1584_1585", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.DecimalToULong_SPI_1584_1585);
            QUnit.test("DecimalTests - DecimalToFloat", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.DecimalToFloat);
            QUnit.test("DecimalTests - DecimalToDouble", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.DecimalToDouble);
            QUnit.test("DecimalTests - NullableDecimalToSByte", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.NullableDecimalToSByte);
            QUnit.test("DecimalTests - NullableDecimalToByte", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.NullableDecimalToByte);
            QUnit.test("DecimalTests - NullableDecimalToShort", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.NullableDecimalToShort);
            QUnit.test("DecimalTests - NullableDecimalToUShort", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.NullableDecimalToUShort);
            QUnit.test("DecimalTests - NullableDecimalToChar", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.NullableDecimalToChar);
            QUnit.test("DecimalTests - NullableDecimalToInt", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.NullableDecimalToInt);
            QUnit.test("DecimalTests - NullableDecimalToUInt", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.NullableDecimalToUInt);
            QUnit.test("DecimalTests - NullableDecimalToLong_SPI_1582", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.NullableDecimalToLong_SPI_1582);
            QUnit.test("DecimalTests - NullableDecimalToULong_SPI_1582", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.NullableDecimalToULong_SPI_1582);
            QUnit.test("DecimalTests - NullableDecimalToFloat_SPI_1579", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.NullableDecimalToFloat_SPI_1579);
            QUnit.test("DecimalTests - NullableDecimalToDouble_SPI_1579", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.NullableDecimalToDouble_SPI_1579);
            QUnit.test("DecimalTests - OperatorsWork_SPI_1583", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.OperatorsWork_SPI_1583);
            QUnit.test("DecimalTests - LiftedOperatorsWork_SPI_1583", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.LiftedOperatorsWork_SPI_1583);
            QUnit.test("DecimalTests - AddWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.AddWorks);
            QUnit.test("DecimalTests - CeilingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.CeilingWorks);
            QUnit.test("DecimalTests - DivideWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.DivideWorks);
            QUnit.test("DecimalTests - FloorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.FloorWorks);
            QUnit.test("DecimalTests - RemainderWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.RemainderWorks);
            QUnit.test("DecimalTests - MultiplyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.MultiplyWorks);
            QUnit.test("DecimalTests - NegateWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.NegateWorks);
            QUnit.test("DecimalTests - ParseWorks_SPI_1586", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.ParseWorks_SPI_1586);
            QUnit.test("DecimalTests - TryParseWorks_SPI_1586", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.TryParseWorks_SPI_1586);
            QUnit.test("DecimalTests - RoundWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.RoundWorks);
            QUnit.test("DecimalTests - RoundWithDecimalsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.RoundWithDecimalsWorks);
            QUnit.test("DecimalTests - RoundWithMidpointRoundingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.RoundWithMidpointRoundingWorks);
            QUnit.test("DecimalTests - RoundWithDecimalsAndMidpointRoundingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.RoundWithDecimalsAndMidpointRoundingWorks);
            QUnit.test("DecimalTests - TruncateWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.TruncateWorks);
            QUnit.test("DecimalTests - SubtractWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.SubtractWorks);
            QUnit.test("DecimalTests - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.GetHashCodeWorks);
            QUnit.test("DecimalTests - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.EqualsWorks);
            QUnit.test("DecimalTests - StaticEqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.StaticEqualsWorks);
            QUnit.test("DecimalTests - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.IEquatableEqualsWorks);
            QUnit.test("DecimalTests - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.CompareToWorks);
            QUnit.test("DecimalTests - StaticCompareWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.StaticCompareWorks);
            QUnit.test("DecimalTests - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.IComparableCompareToWorks);
            QUnit.test("DecimalTests - ImplementationTests_SPI_1588_1590_1650", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests.ImplementationTests_SPI_1588_1590_1650);
            QUnit.test("DoubleTests - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.TypePropertiesAreCorrect_SPI_1717);
            QUnit.test("DoubleTests - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.DefaultValueIs0);
            QUnit.test("DoubleTests - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.CreatingInstanceReturnsZero);
            QUnit.test("DoubleTests - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.ConstantsWork);
            QUnit.test("DoubleTests - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.DefaultConstructorReturnsZero);
            QUnit.test("DoubleTests - FormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.FormatWorks);
            QUnit.test("DoubleTests - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.ToStringWithFormatWorks);
            QUnit.test("DoubleTests - ToStringWithFormatAndProviderWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.ToStringWithFormatAndProviderWorks);
            QUnit.test("DoubleTests - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.IFormattableToStringWorks);
            QUnit.test("DoubleTests - ToStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.ToStringWorks);
            QUnit.test("DoubleTests - ToExponentialWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.ToExponentialWorks);
            QUnit.test("DoubleTests - ToExponentialWithFractionalDigitsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.ToExponentialWithFractionalDigitsWorks);
            QUnit.test("DoubleTests - ToFixed", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.ToFixed);
            QUnit.test("DoubleTests - ToFixedWithFractionalDigitsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.ToFixedWithFractionalDigitsWorks);
            QUnit.test("DoubleTests - ToPrecisionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.ToPrecisionWorks);
            QUnit.test("DoubleTests - ToPrecisionWithPrecisionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.ToPrecisionWithPrecisionWorks);
            QUnit.test("DoubleTests - IsPositiveInfinityWorks_SPI_1600", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.IsPositiveInfinityWorks_SPI_1600);
            QUnit.test("DoubleTests - IsNegativeInfinityWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.IsNegativeInfinityWorks);
            QUnit.test("DoubleTests - IsInfinityWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.IsInfinityWorks);
            QUnit.test("DoubleTests - IsFiniteWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.IsFiniteWorks);
            QUnit.test("DoubleTests - IsNaNWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.IsNaNWorks);
            QUnit.test("DoubleTests - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.GetHashCodeWorks);
            QUnit.test("DoubleTests - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.EqualsWorks);
            QUnit.test("DoubleTests - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.IEquatableEqualsWorks);
            QUnit.test("DoubleTests - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.CompareToWorks);
            QUnit.test("DoubleTests - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests.IComparableCompareToWorks);
            QUnit.test("Int16Tests - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests.TypePropertiesAreCorrect_SPI_1717);
            QUnit.test("Int16Tests - CastsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests.CastsWork);
            QUnit.test("Int16Tests - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests.DefaultValueIs0);
            QUnit.test("Int16Tests - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests.DefaultConstructorReturnsZero);
            QUnit.test("Int16Tests - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests.CreatingInstanceReturnsZero);
            QUnit.test("Int16Tests - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests.ConstantsWork);
            QUnit.test("Int16Tests - FormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests.FormatWorks);
            QUnit.test("Int16Tests - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests.ToStringWithFormatWorks);
            QUnit.test("Int16Tests - ToStringWithFormatAndProviderWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests.ToStringWithFormatAndProviderWorks);
            QUnit.test("Int16Tests - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests.IFormattableToStringWorks);
            QUnit.test("Int16Tests - TryParseWorks_SPI_1592", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests.TryParseWorks_SPI_1592);
            QUnit.test("Int16Tests - ParseWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests.ParseWorks);
            QUnit.test("Int16Tests - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests.ToStringWithoutRadixWorks);
            QUnit.test("Int16Tests - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests.ToStringWithRadixWorks);
            QUnit.test("Int16Tests - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests.GetHashCodeWorks);
            QUnit.test("Int16Tests - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests.EqualsWorks);
            QUnit.test("Int16Tests - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests.IEquatableEqualsWorks);
            QUnit.test("Int16Tests - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests.CompareToWorks);
            QUnit.test("Int16Tests - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests.IComparableCompareToWorks);
            QUnit.test("Int32Tests - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.TypePropertiesAreCorrect_SPI_1717);
            QUnit.test("Int32Tests - CastsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.CastsWork);
            QUnit.test("Int32Tests - TypeIsWorksForInt32", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.TypeIsWorksForInt32);
            QUnit.test("Int32Tests - TypeAsWorksForInt32", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.TypeAsWorksForInt32);
            QUnit.test("Int32Tests - UnboxingWorksForInt32", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.UnboxingWorksForInt32);
            QUnit.test("Int32Tests - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.DefaultValueIs0);
            QUnit.test("Int32Tests - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.DefaultConstructorReturnsZero);
            QUnit.test("Int32Tests - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.CreatingInstanceReturnsZero);
            QUnit.test("Int32Tests - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.ConstantsWork);
            QUnit.test("Int32Tests - FormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.FormatWorks);
            QUnit.test("Int32Tests - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.ToStringWithFormatWorks);
            QUnit.test("Int32Tests - ToStringWithFormatAndProviderWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.ToStringWithFormatAndProviderWorks);
            QUnit.test("Int32Tests - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.IFormattableToStringWorks);
            QUnit.test("Int32Tests - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.TryParseWorks);
            QUnit.test("Int32Tests - ParseWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.ParseWorks);
            QUnit.test("Int32Tests - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.ToStringWithoutRadixWorks);
            QUnit.test("Int32Tests - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.ToStringWithRadixWorks);
            QUnit.test("Int32Tests - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.GetHashCodeWorks);
            QUnit.test("Int32Tests - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.EqualsWorks);
            QUnit.test("Int32Tests - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.IEquatableEqualsWorks);
            QUnit.test("Int32Tests - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.CompareToWorks);
            QUnit.test("Int32Tests - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.IComparableCompareToWorks);
            QUnit.test("Int32Tests - IntegerDivisionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.IntegerDivisionWorks);
            QUnit.test("Int32Tests - IntegerModuloWorks_SPI_1602", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.IntegerModuloWorks_SPI_1602);
            QUnit.test("Int32Tests - IntegerDivisionByZeroThrowsDivideByZeroException", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.IntegerDivisionByZeroThrowsDivideByZeroException);
            QUnit.test("Int32Tests - DoublesAreTruncatedWhenConvertedToIntegers", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests.DoublesAreTruncatedWhenConvertedToIntegers);
            QUnit.test("Int64Tests - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests.TypePropertiesAreCorrect_SPI_1717);
            QUnit.test("Int64Tests - CastsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests.CastsWork);
            QUnit.test("Int64Tests - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests.DefaultValueIs0);
            QUnit.test("Int64Tests - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests.DefaultConstructorReturnsZero);
            QUnit.test("Int64Tests - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests.CreatingInstanceReturnsZero);
            QUnit.test("Int64Tests - FormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests.FormatWorks);
            QUnit.test("Int64Tests - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests.ToStringWithFormatWorks);
            QUnit.test("Int64Tests - ToStringWithFormatAndProviderWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests.ToStringWithFormatAndProviderWorks);
            QUnit.test("Int64Tests - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests.IFormattableToStringWorks);
            QUnit.test("Int64Tests - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests.TryParseWorks);
            QUnit.test("Int64Tests - ParseWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests.ParseWorks);
            QUnit.test("Int64Tests - CastingOfLargeDoublesToInt64Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests.CastingOfLargeDoublesToInt64Works);
            QUnit.test("Int64Tests - DivisionOfLargeInt64Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests.DivisionOfLargeInt64Works);
            QUnit.test("Int64Tests - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests.ToStringWithoutRadixWorks);
            QUnit.test("Int64Tests - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests.ToStringWithRadixWorks);
            QUnit.test("Int64Tests - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests.GetHashCodeWorks);
            QUnit.test("Int64Tests - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests.EqualsWorks);
            QUnit.test("Int64Tests - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests.IEquatableEqualsWorks);
            QUnit.test("Int64Tests - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests.CompareToWorks);
            QUnit.test("Int64Tests - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests.IComparableCompareToWorks);
            QUnit.test("ObjectTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ObjectTests.TypePropertiesAreCorrect);
            QUnit.test("ObjectTests - CanGetHashCodeForObject", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ObjectTests.CanGetHashCodeForObject);
            QUnit.test("ObjectTests - RepeatedCallsToGetHashCodeReturnsSameValue", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ObjectTests.RepeatedCallsToGetHashCodeReturnsSameValue);
            QUnit.test("ObjectTests - ObjectIsEqualToItself", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ObjectTests.ObjectIsEqualToItself);
            QUnit.test("ObjectTests - ObjectIsNotEqualToOtherObject", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ObjectTests.ObjectIsNotEqualToOtherObject);
            QUnit.test("ObjectTests - StaticEqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ObjectTests.StaticEqualsWorks);
            QUnit.test("ObjectTests - ReferenceEqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ObjectTests.ReferenceEqualsWorks);
            QUnit.test("ObjectTests - ToStringOverride", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ObjectTests.ToStringOverride);
            QUnit.test("SByteTests - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests.TypePropertiesAreCorrect_SPI_1717);
            QUnit.test("SByteTests - CastsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests.CastsWork);
            QUnit.test("SByteTests - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests.DefaultValueIs0);
            QUnit.test("SByteTests - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests.DefaultConstructorReturnsZero);
            QUnit.test("SByteTests - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests.CreatingInstanceReturnsZero);
            QUnit.test("SByteTests - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests.ConstantsWork);
            QUnit.test("SByteTests - FormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests.FormatWorks);
            QUnit.test("SByteTests - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests.ToStringWithFormatWorks);
            QUnit.test("SByteTests - ToStringWithFormatAndProviderWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests.ToStringWithFormatAndProviderWorks);
            QUnit.test("SByteTests - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests.IFormattableToStringWorks);
            QUnit.test("SByteTests - TryParseWorks_SPI_1592", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests.TryParseWorks_SPI_1592);
            QUnit.test("SByteTests - ParseWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests.ParseWorks);
            QUnit.test("SByteTests - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests.ToStringWithoutRadixWorks);
            QUnit.test("SByteTests - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests.ToStringWithRadixWorks);
            QUnit.test("SByteTests - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests.GetHashCodeWorks);
            QUnit.test("SByteTests - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests.EqualsWorks);
            QUnit.test("SByteTests - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests.IEquatableEqualsWorks);
            QUnit.test("SByteTests - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests.CompareToWorks);
            QUnit.test("SByteTests - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests.IComparableCompareToWorks);
            QUnit.test("SingleTests - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.TypePropertiesAreCorrect_SPI_1717);
            QUnit.test("SingleTests - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.DefaultValueIs0);
            QUnit.test("SingleTests - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.CreatingInstanceReturnsZero);
            QUnit.test("SingleTests - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.ConstantsWork);
            QUnit.test("SingleTests - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.DefaultConstructorReturnsZero);
            QUnit.test("SingleTests - FormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.FormatWorks);
            QUnit.test("SingleTests - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.ToStringWithFormatWorks);
            QUnit.test("SingleTests - ToStringWithFormatAndProviderWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.ToStringWithFormatAndProviderWorks);
            QUnit.test("SingleTests - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.IFormattableToStringWorks);
            QUnit.test("SingleTests - ToStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.ToStringWorks);
            QUnit.test("SingleTests - ToExponentialWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.ToExponentialWorks);
            QUnit.test("SingleTests - ToExponentialWithFractionalDigitsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.ToExponentialWithFractionalDigitsWorks);
            QUnit.test("SingleTests - ToFixed", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.ToFixed);
            QUnit.test("SingleTests - ToFixedWithFractionalDigitsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.ToFixedWithFractionalDigitsWorks);
            QUnit.test("SingleTests - ToPrecisionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.ToPrecisionWorks);
            QUnit.test("SingleTests - ToPrecisionWithPrecisionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.ToPrecisionWithPrecisionWorks);
            QUnit.test("SingleTests - IsPositiveInfinityWorks_SPI_1600", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.IsPositiveInfinityWorks_SPI_1600);
            QUnit.test("SingleTests - IsNegativeInfinityWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.IsNegativeInfinityWorks);
            QUnit.test("SingleTests - IsInfinityWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.IsInfinityWorks);
            QUnit.test("SingleTests - IsFiniteWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.IsFiniteWorks);
            QUnit.test("SingleTests - IsNaNWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.IsNaNWorks);
            QUnit.test("SingleTests - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.GetHashCodeWorks);
            QUnit.test("SingleTests - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.EqualsWorks);
            QUnit.test("SingleTests - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.IEquatableEqualsWorks);
            QUnit.test("SingleTests - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.CompareToWorks);
            QUnit.test("SingleTests - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests.IComparableCompareToWorks);
            QUnit.test("StringTests - TypePropertiesAreCorrect_SPI_1597", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.TypePropertiesAreCorrect_SPI_1597);
            QUnit.test("StringTests - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.DefaultConstructorWorks);
            QUnit.test("StringTests - CharAndCountConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.CharAndCountConstructorWorks);
            QUnit.test("StringTests - CharArrayConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.CharArrayConstructorWorks);
            QUnit.test("StringTests - CharArrayWithStartIndexAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.CharArrayWithStartIndexAndLengthConstructorWorks);
            QUnit.test("StringTests - EmptyFieldWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.EmptyFieldWorks);
            QUnit.test("StringTests - LengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.LengthPropertyWorks);
            QUnit.test("StringTests - CharAtWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.CharAtWorks);
            QUnit.test("StringTests - JsCharAtWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.JsCharAtWorks);
            QUnit.test("StringTests - CharCodeAtWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.CharCodeAtWorks);
            QUnit.test("StringTests - CompareToWithIgnoreCaseArgWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.CompareToWithIgnoreCaseArgWorks);
            QUnit.test("StringTests - CompareWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.CompareWorks);
            QUnit.test("StringTests - CompareWithIgnoreCaseArgWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.CompareWithIgnoreCaseArgWorks);
            QUnit.test("StringTests - ConcatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.ConcatWorks);
            QUnit.test("StringTests - ConcatWithObjectsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.ConcatWithObjectsWorks);
            QUnit.test("StringTests - EndsWithStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.EndsWithStringWorks);
            QUnit.test("StringTests - StaticEqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.StaticEqualsWorks);
            QUnit.test("StringTests - FormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.FormatWorks);
            QUnit.test("StringTests - FormatWorksWithIFormattable_SPI_1598", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.FormatWorksWithIFormattable_SPI_1598);
            QUnit.test("StringTests - FormatWorksWithIFormattableAndFormatProvider_SPI_1598", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.FormatWorksWithIFormattableAndFormatProvider_SPI_1598);
            QUnit.test("StringTests - FormatCanUseEscapedBraces", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.FormatCanUseEscapedBraces);
            QUnit.test("StringTests - FromCharCodeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.FromCharCodeWorks);
            QUnit.test("StringTests - IndexOfCharWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.IndexOfCharWorks);
            QUnit.test("StringTests - IndexOfStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.IndexOfStringWorks);
            QUnit.test("StringTests - IndexOfCharWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.IndexOfCharWithStartIndexWorks);
            QUnit.test("StringTests - IndexOfCharWithStartIndexAndCountWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.IndexOfCharWithStartIndexAndCountWorks);
            QUnit.test("StringTests - IndexOfStringWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.IndexOfStringWithStartIndexWorks);
            QUnit.test("StringTests - IndexOfStringWithStartIndexAndCountWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.IndexOfStringWithStartIndexAndCountWorks);
            QUnit.test("StringTests - IndexOfAnyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.IndexOfAnyWorks);
            QUnit.test("StringTests - IndexOfAnyWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.IndexOfAnyWithStartIndexWorks);
            QUnit.test("StringTests - IndexOfAnyWithStartIndexAndCountWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.IndexOfAnyWithStartIndexAndCountWorks);
            QUnit.test("StringTests - InsertWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.InsertWorks);
            QUnit.test("StringTests - IsNullOrEmptyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.IsNullOrEmptyWorks);
            QUnit.test("StringTests - LastIndexOfCharWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.LastIndexOfCharWorks);
            QUnit.test("StringTests - LastIndexOfStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.LastIndexOfStringWorks);
            QUnit.test("StringTests - LastIndexOfCharWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.LastIndexOfCharWithStartIndexWorks);
            QUnit.test("StringTests - LastIndexOfStringWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.LastIndexOfStringWithStartIndexWorks);
            QUnit.test("StringTests - LastIndexOfCharWithStartIndexAndCountWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.LastIndexOfCharWithStartIndexAndCountWorks);
            QUnit.test("StringTests - LastIndexOfStringWithStartIndexAndCountWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.LastIndexOfStringWithStartIndexAndCountWorks);
            QUnit.test("StringTests - LastIndexOfAnyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.LastIndexOfAnyWorks);
            QUnit.test("StringTests - LastIndexOfAnyWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.LastIndexOfAnyWithStartIndexWorks);
            QUnit.test("StringTests - LastIndexOfAnyWithStartIndexAndCountWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.LastIndexOfAnyWithStartIndexAndCountWorks);
            QUnit.test("StringTests - LocaleCompareWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.LocaleCompareWorks);
            QUnit.test("StringTests - PadLeftWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.PadLeftWorks);
            QUnit.test("StringTests - PadLeftWithCharWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.PadLeftWithCharWorks);
            QUnit.test("StringTests - PadRightWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.PadRightWorks);
            QUnit.test("StringTests - PadRightWithCharWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.PadRightWithCharWorks);
            QUnit.test("StringTests - RemoveWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.RemoveWorks);
            QUnit.test("StringTests - RemoveWithCountWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.RemoveWithCountWorks);
            QUnit.test("StringTests - ReplaceWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.ReplaceWorks);
            QUnit.test("StringTests - ReplaceCharWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.ReplaceCharWorks);
            QUnit.test("StringTests - ReplaceRegexWithReplaceCallbackWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.ReplaceRegexWithReplaceCallbackWorks);
            QUnit.test("StringTests - SearchWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.SearchWorks);
            QUnit.test("StringTests - SplitWithStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.SplitWithStringWorks);
            QUnit.test("StringTests - SplitWithCharWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.SplitWithCharWorks);
            QUnit.test("StringTests - SplitWithCharsAndLimitWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.SplitWithCharsAndLimitWorks);
            QUnit.test("StringTests - SplitWithCharsAndStringSplitOptionsAndLimitWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.SplitWithCharsAndStringSplitOptionsAndLimitWorks);
            QUnit.test("StringTests - SomeNetSplitTests", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.SomeNetSplitTests);
            QUnit.test("StringTests - SplitWithCharsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.SplitWithCharsWorks);
            QUnit.test("StringTests - SplitWithStringsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.SplitWithStringsWorks);
            QUnit.test("StringTests - SplitWithStringsAndLimitWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.SplitWithStringsAndLimitWorks);
            QUnit.test("StringTests - StartsWithStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.StartsWithStringWorks);
            QUnit.test("StringTests - SubstrWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.SubstrWorks);
            QUnit.test("StringTests - SubstrWithLengthWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.SubstrWithLengthWorks);
            QUnit.test("StringTests - SubstringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.SubstringWorks);
            QUnit.test("StringTests - SubstringWithLengthWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.SubstringWithLengthWorks);
            QUnit.test("StringTests - JavaScriptSubstringWithEndIndexWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.JavaScriptSubstringWithEndIndexWorks);
            QUnit.test("StringTests - ToLowerWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.ToLowerWorks);
            QUnit.test("StringTests - ToUpperWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.ToUpperWorks);
            QUnit.test("StringTests - TrimWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.TrimWorks);
            QUnit.test("StringTests - TrimCharsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.TrimCharsWorks);
            QUnit.test("StringTests - TrimStartCharsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.TrimStartCharsWorks);
            QUnit.test("StringTests - TrimEndCharsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.TrimEndCharsWorks);
            QUnit.test("StringTests - TrimStartWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.TrimStartWorks);
            QUnit.test("StringTests - TrimEndWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.TrimEndWorks);
            QUnit.test("StringTests - StringEqualityWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.StringEqualityWorks);
            QUnit.test("StringTests - StringInequalityWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.StringInequalityWorks);
            QUnit.test("StringTests - StringIndexingWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.StringIndexingWorks);
            QUnit.test("StringTests - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.GetHashCodeWorks);
            QUnit.test("StringTests - InstanceEqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.InstanceEqualsWorks);
            QUnit.test("StringTests - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.IEquatableEqualsWorks);
            QUnit.test("StringTests - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.CompareToWorks);
            QUnit.test("StringTests - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.IComparableCompareToWorks);
            QUnit.test("StringTests - JoinWorks_SPI_1599", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.JoinWorks_SPI_1599);
            QUnit.test("StringTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.ContainsWorks);
            QUnit.test("StringTests - ToCharArrayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests.ToCharArrayWorks);
            QUnit.test("TimeSpanTests - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests.TypePropertiesAreCorrect_SPI_1717);
            QUnit.test("TimeSpanTests - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests.DefaultConstructorWorks);
            QUnit.test("TimeSpanTests - DefaultValueWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests.DefaultValueWorks);
            QUnit.test("TimeSpanTests - ZeroWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests.ZeroWorks);
            QUnit.test("TimeSpanTests - CreatingInstanceReturnsTimeSpanWithZeroValue", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests.CreatingInstanceReturnsTimeSpanWithZeroValue);
            QUnit.test("TimeSpanTests - ParameterConstructorsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests.ParameterConstructorsWorks);
            QUnit.test("TimeSpanTests - FactoryMethodsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests.FactoryMethodsWork);
            QUnit.test("TimeSpanTests - PropertiesWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests.PropertiesWork);
            QUnit.test("TimeSpanTests - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests.CompareToWorks);
            QUnit.test("TimeSpanTests - CompareWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests.CompareWorks);
            QUnit.test("TimeSpanTests - StaticEqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests.StaticEqualsWorks);
            QUnit.test("TimeSpanTests - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests.EqualsWorks);
            QUnit.test("TimeSpanTests - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests.IEquatableEqualsWorks);
            QUnit.test("TimeSpanTests - ToStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests.ToStringWorks);
            QUnit.test("TimeSpanTests - AddWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests.AddWorks);
            QUnit.test("TimeSpanTests - SubtractWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests.SubtractWorks);
            QUnit.test("TimeSpanTests - DurationWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests.DurationWorks);
            QUnit.test("TimeSpanTests - NegateWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests.NegateWorks);
            QUnit.test("TimeSpanTests - ComparisonOperatorsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests.ComparisonOperatorsWork);
            QUnit.test("TimeSpanTests - AdditionOperatorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests.AdditionOperatorWorks);
            QUnit.test("TimeSpanTests - SubtractionOperatorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests.SubtractionOperatorWorks);
            QUnit.test("TimeSpanTests - UnaryPlusWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests.UnaryPlusWorks);
            QUnit.test("TimeSpanTests - UnaryMinusWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests.UnaryMinusWorks);
            QUnit.test("TupleTests - Tuple1Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TupleTests.Tuple1Works);
            QUnit.test("TupleTests - Tuple2Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TupleTests.Tuple2Works);
            QUnit.test("TupleTests - Tuple3Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TupleTests.Tuple3Works);
            QUnit.test("TupleTests - Tuple4Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TupleTests.Tuple4Works);
            QUnit.test("TupleTests - Tuple5Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TupleTests.Tuple5Works);
            QUnit.test("TupleTests - Tuple6Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TupleTests.Tuple6Works);
            QUnit.test("TupleTests - Tuple7Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TupleTests.Tuple7Works);
            QUnit.test("TupleTests - Tuple8Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TupleTests.Tuple8Works);
            QUnit.test("UInt16Tests - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests.TypePropertiesAreCorrect_SPI_1717);
            QUnit.test("UInt16Tests - CastsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests.CastsWork);
            QUnit.test("UInt16Tests - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests.DefaultValueIs0);
            QUnit.test("UInt16Tests - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests.DefaultConstructorReturnsZero);
            QUnit.test("UInt16Tests - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests.CreatingInstanceReturnsZero);
            QUnit.test("UInt16Tests - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests.ConstantsWork);
            QUnit.test("UInt16Tests - FormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests.FormatWorks);
            QUnit.test("UInt16Tests - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests.ToStringWithFormatWorks);
            QUnit.test("UInt16Tests - ToStringWithFormatAndProviderWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests.ToStringWithFormatAndProviderWorks);
            QUnit.test("UInt16Tests - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests.IFormattableToStringWorks);
            QUnit.test("UInt16Tests - TryParseWorks_SPI_1592", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests.TryParseWorks_SPI_1592);
            QUnit.test("UInt16Tests - ParseWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests.ParseWorks);
            QUnit.test("UInt16Tests - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests.ToStringWithoutRadixWorks);
            QUnit.test("UInt16Tests - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests.ToStringWithRadixWorks);
            QUnit.test("UInt16Tests - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests.GetHashCodeWorks);
            QUnit.test("UInt16Tests - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests.EqualsWorks);
            QUnit.test("UInt16Tests - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests.IEquatableEqualsWorks);
            QUnit.test("UInt16Tests - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests.CompareToWorks);
            QUnit.test("UInt16Tests - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests.IComparableCompareToWorks);
            QUnit.test("UInt32Tests - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests.TypePropertiesAreCorrect_SPI_1717);
            QUnit.test("UInt32Tests - CastsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests.CastsWork);
            QUnit.test("UInt32Tests - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests.DefaultValueIs0);
            QUnit.test("UInt32Tests - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests.DefaultConstructorReturnsZero);
            QUnit.test("UInt32Tests - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests.CreatingInstanceReturnsZero);
            QUnit.test("UInt32Tests - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests.ConstantsWork);
            QUnit.test("UInt32Tests - FormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests.FormatWorks);
            QUnit.test("UInt32Tests - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests.ToStringWithFormatWorks);
            QUnit.test("UInt32Tests - ToStringWithFormatAndProviderWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests.ToStringWithFormatAndProviderWorks);
            QUnit.test("UInt32Tests - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests.IFormattableToStringWorks);
            QUnit.test("UInt32Tests - TryParseWorks_SPI_1592", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests.TryParseWorks_SPI_1592);
            QUnit.test("UInt32Tests - ParseWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests.ParseWorks);
            QUnit.test("UInt32Tests - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests.ToStringWithoutRadixWorks);
            QUnit.test("UInt32Tests - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests.ToStringWithRadixWorks);
            QUnit.test("UInt32Tests - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests.GetHashCodeWorks);
            QUnit.test("UInt32Tests - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests.EqualsWorks);
            QUnit.test("UInt32Tests - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests.IEquatableEqualsWorks);
            QUnit.test("UInt32Tests - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests.CompareToWorks);
            QUnit.test("UInt32Tests - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests.IComparableCompareToWorks);
            QUnit.test("UInt64Tests - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests.TypePropertiesAreCorrect_SPI_1717);
            QUnit.test("UInt64Tests - CastsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests.CastsWork);
            QUnit.test("UInt64Tests - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests.DefaultValueIs0);
            QUnit.test("UInt64Tests - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests.DefaultConstructorReturnsZero);
            QUnit.test("UInt64Tests - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests.CreatingInstanceReturnsZero);
            QUnit.test("UInt64Tests - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests.ConstantsWork);
            QUnit.test("UInt64Tests - FormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests.FormatWorks);
            QUnit.test("UInt64Tests - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests.ToStringWithFormatWorks);
            QUnit.test("UInt64Tests - ToStringWithFormatAndProviderWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests.ToStringWithFormatAndProviderWorks);
            QUnit.test("UInt64Tests - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests.IFormattableToStringWorks);
            QUnit.test("UInt64Tests - CastingOfLargeValuesToUInt64Works_SPI_1591", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests.CastingOfLargeValuesToUInt64Works_SPI_1591);
            QUnit.test("UInt64Tests - DivisionOfLargeUInt64Works", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests.DivisionOfLargeUInt64Works);
            QUnit.test("UInt64Tests - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests.TryParseWorks);
            QUnit.test("UInt64Tests - ParseWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests.ParseWorks);
            QUnit.test("UInt64Tests - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests.ToStringWithoutRadixWorks);
            QUnit.test("UInt64Tests - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests.ToStringWithRadixWorks);
            QUnit.test("UInt64Tests - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests.GetHashCodeWorks);
            QUnit.test("UInt64Tests - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests.EqualsWorks);
            QUnit.test("UInt64Tests - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests.IEquatableEqualsWorks);
            QUnit.test("UInt64Tests - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests.CompareToWorks);
            QUnit.test("UInt64Tests - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests.IComparableCompareToWorks);
            QUnit.test("StopwatchTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StopwatchTests.TypePropertiesAreCorrect);
            QUnit.test("StopwatchTests - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StopwatchTests.DefaultConstructorWorks);
            QUnit.test("StopwatchTests - ConstantsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StopwatchTests.ConstantsWorks);
            QUnit.test("StopwatchTests - StartNewWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StopwatchTests.StartNewWorks);
            QUnit.test("StopwatchTests - StartAndStopWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StopwatchTests.StartAndStopWork);
            QUnit.test("StopwatchTests - ElapsedWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StopwatchTests.ElapsedWorks);
            QUnit.test("StopwatchTests - GetTimestampWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StopwatchTests.GetTimestampWorks);
            QUnit.test("RegexTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RegexTests.TypePropertiesAreCorrect);
            QUnit.test("RegexTests - StringOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RegexTests.StringOnlyConstructorWorks);
            QUnit.test("RegexTests - ConstructorWithFlagsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RegexTests.ConstructorWithFlagsWorks);
            QUnit.test("RegexTests - GlobalFlagWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RegexTests.GlobalFlagWorks);
            QUnit.test("RegexTests - IgnoreCaseFlagWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RegexTests.IgnoreCaseFlagWorks);
            QUnit.test("RegexTests - MultilineFlagWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RegexTests.MultilineFlagWorks);
            QUnit.test("RegexTests - PatternPropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RegexTests.PatternPropertyWorks);
            QUnit.test("RegexTests - SourcePropertyWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RegexTests.SourcePropertyWorks);
            QUnit.test("RegexTests - ExecWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RegexTests.ExecWorks);
            QUnit.test("RegexTests - LastIndexWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RegexTests.LastIndexWorks);
            QUnit.test("RegexTests - TestWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RegexTests.TestWorks);
            QUnit.test("AsyncTests - AsyncVoid", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AsyncTests.AsyncVoid);
            QUnit.test("AsyncTests - AsyncTask", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AsyncTests.AsyncTask);
            QUnit.test("AsyncTests - AsyncTaskBodyThrowsException", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AsyncTests.AsyncTaskBodyThrowsException);
            QUnit.test("AsyncTests - AwaitTaskThatFaults", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AsyncTests.AwaitTaskThatFaults);
            QUnit.test("AsyncTests - AggregateExceptionsAreUnwrappedWhenAwaitingTask", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AsyncTests.AggregateExceptionsAreUnwrappedWhenAwaitingTask);
            QUnit.test("AsyncTests - AsyncTaskThatReturnsValue", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AsyncTests.AsyncTaskThatReturnsValue);
            QUnit.test("CancellationTokenTests - TypePropertiesForCancellationTokenSourceAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.TypePropertiesForCancellationTokenSourceAreCorrect);
            QUnit.test("CancellationTokenTests - TypePropertiesForCancellationTokenAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.TypePropertiesForCancellationTokenAreCorrect);
            QUnit.test("CancellationTokenTests - TypePropertiesForCancellationTokenRegistrationAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.TypePropertiesForCancellationTokenRegistrationAreCorrect);
            QUnit.test("CancellationTokenTests - CancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.CancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe);
            QUnit.test("CancellationTokenTests - CancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.CancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe);
            QUnit.test("CancellationTokenTests - CancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.CancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled);
            QUnit.test("CancellationTokenTests - CancellationTokenNoneIsNotCancelledAndCannotBe", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.CancellationTokenNoneIsNotCancelledAndCannotBe);
            QUnit.test("CancellationTokenTests - CreatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.CreatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled);
            QUnit.test("CancellationTokenTests - ActivatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.ActivatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled);
            QUnit.test("CancellationTokenTests - CanBeCanceledIsTrueForTokenCreatedForCancellationTokenSource", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.CanBeCanceledIsTrueForTokenCreatedForCancellationTokenSource);
            QUnit.test("CancellationTokenTests - IsCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.IsCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod);
            QUnit.test("CancellationTokenTests - ThrowIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.ThrowIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled);
            QUnit.test("CancellationTokenTests - CancelWithoutArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.CancelWithoutArgumentsWorks);
            QUnit.test("CancellationTokenTests - CancelWorksWhenThrowOnFirstExceptionIsFalse", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.CancelWorksWhenThrowOnFirstExceptionIsFalse);
            QUnit.test("CancellationTokenTests - CancelWorksWhenThrowOnFirstExceptionIsTrue", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.CancelWorksWhenThrowOnFirstExceptionIsTrue);
            QUnit.test("CancellationTokenTests - RegisterOnACancelledSourceWithoutContextInvokesTheCallback", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.RegisterOnACancelledSourceWithoutContextInvokesTheCallback);
            QUnit.test("CancellationTokenTests - RegisterWithArgumentOnACancelledSourceInvokesTheCallback", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.RegisterWithArgumentOnACancelledSourceInvokesTheCallback);
            QUnit.test("CancellationTokenTests - RegisterOnACancelledSourceWithoutContextRethrowsAThrownException", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.RegisterOnACancelledSourceWithoutContextRethrowsAThrownException);
            QUnit.test("CancellationTokenTests - RegisterOnACancelledSourceWithContextRethrowsAThrownException", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.RegisterOnACancelledSourceWithContextRethrowsAThrownException);
            QUnit.test("CancellationTokenTests - RegisterOverloadsWithUseSynchronizationContextWork", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.RegisterOverloadsWithUseSynchronizationContextWork);
            QUnit.test("CancellationTokenTests - RegisterOnCancellationTokenCreatedNonCancelledDoesNothing", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.RegisterOnCancellationTokenCreatedNonCancelledDoesNothing);
            QUnit.test("CancellationTokenTests - RegisterOnCancellationTokenCreatedCancelledInvokesTheActionImmediately", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.RegisterOnCancellationTokenCreatedCancelledInvokesTheActionImmediately);
            QUnit.test("CancellationTokenTests - DuplicateCancelDoesNotCauseCallbacksToBeCalledTwice", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.DuplicateCancelDoesNotCauseCallbacksToBeCalledTwice);
            QUnit.test("CancellationTokenTests - RegistrationsCanBeCompared", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.RegistrationsCanBeCompared);
            QUnit.test("CancellationTokenTests - RegistrationsCanBeUnregistered", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.RegistrationsCanBeUnregistered);
            QUnit.test("CancellationTokenTests - CreatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.CreatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm);
            QUnit.test("CancellationTokenTests - LinkedSourceWithTwoTokensWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.LinkedSourceWithTwoTokensWorks);
            QUnit.test("CancellationTokenTests - LinkedSourceWithThreeTokensWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests.LinkedSourceWithThreeTokensWorks);
            QUnit.test("PromiseTests - TaskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PromiseTests.TaskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes);
            QUnit.test("PromiseTests - TaskFromPromiseWithResultFactoryWorksWhenPromiseCompletes", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PromiseTests.TaskFromPromiseWithResultFactoryWorksWhenPromiseCompletes);
            QUnit.test("PromiseTests - TaskFromPromiseWorksWhenPromiseFails", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PromiseTests.TaskFromPromiseWorksWhenPromiseFails);
            QUnit.test("PromiseTests - CompletingPromiseCanBeAwaited", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PromiseTests.CompletingPromiseCanBeAwaited);
            QUnit.test("PromiseTests - FailingPromiseCanBeAwaited", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PromiseTests.FailingPromiseCanBeAwaited);
            QUnit.test("PromiseTests - TaskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PromiseTests.TaskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes);
            QUnit.test("TaskTests - TaskCompletionSourceTypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.TaskCompletionSourceTypePropertiesAreCorrect);
            QUnit.test("TaskTests - TaskTypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.TaskTypePropertiesAreCorrect);
            QUnit.test("TaskTests - TaskCompletionSourceWorksWhenSettingResult", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.TaskCompletionSourceWorksWhenSettingResult);
            QUnit.test("TaskTests - TaskCompletionSourceWorksWhenSettingASingleException", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.TaskCompletionSourceWorksWhenSettingASingleException);
            QUnit.test("TaskTests - TaskCompletionSourceWorksWhenSettingTwoExceptions", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.TaskCompletionSourceWorksWhenSettingTwoExceptions);
            QUnit.test("TaskTests - TaskCompletionSourceWorksWhenCancelling", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.TaskCompletionSourceWorksWhenCancelling);
            QUnit.test("TaskTests - CancelledTaskThrowsTaskCanceledExceptionWhenAwaited", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.CancelledTaskThrowsTaskCanceledExceptionWhenAwaited);
            QUnit.test("TaskTests - CancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.CancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed);
            QUnit.test("TaskTests - SetResultFailsWhenTheTaskIsCompleted", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.SetResultFailsWhenTheTaskIsCompleted);
            QUnit.test("TaskTests - SetCanceledFailsWhenTheTaskIsCompleted", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.SetCanceledFailsWhenTheTaskIsCompleted);
            QUnit.test("TaskTests - SetExceptionFailsWhenTheTaskIsCompleted", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.SetExceptionFailsWhenTheTaskIsCompleted);
            QUnit.test("TaskTests - CompletedTaskHasCorrectIsXProperties", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.CompletedTaskHasCorrectIsXProperties);
            QUnit.test("TaskTests - CancelledTaskHasCorrectIsXProperties", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.CancelledTaskHasCorrectIsXProperties);
            QUnit.test("TaskTests - FaultedTaskHasCorrectIsXProperties", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.FaultedTaskHasCorrectIsXProperties);
            QUnit.test("TaskTests - TrySetResultReturnsFalseWhenTheTaskIsCompleted", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.TrySetResultReturnsFalseWhenTheTaskIsCompleted);
            QUnit.test("TaskTests - TrySetCanceledReturnsFalseWhenTheTaskIsCompleted", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.TrySetCanceledReturnsFalseWhenTheTaskIsCompleted);
            QUnit.test("TaskTests - TrySetExceptionReturnsFalseWhenTheTaskIsCompleted", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.TrySetExceptionReturnsFalseWhenTheTaskIsCompleted);
            QUnit.test("TaskTests - ContinueWithForNonGenericTaskWorkWithNoResultAndNoException", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.ContinueWithForNonGenericTaskWorkWithNoResultAndNoException);
            QUnit.test("TaskTests - ContinueWithWhenCallbackThrowsAnException", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.ContinueWithWhenCallbackThrowsAnException);
            QUnit.test("TaskTests - ExceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.ExceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask);
            QUnit.test("TaskTests - ContinueWithForNonGenericTaskCanReturnAValue", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.ContinueWithForNonGenericTaskCanReturnAValue);
            QUnit.test("TaskTests - ContinueWithWithNoReturnValueForGenericTaskWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.ContinueWithWithNoReturnValueForGenericTaskWorks);
            QUnit.test("TaskTests - ContinueWithForGenericTaskCanReturnAValue", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.ContinueWithForGenericTaskCanReturnAValue);
            QUnit.test("TaskTests - DelayWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.DelayWorks);
            QUnit.test("TaskTests - FromResultWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.FromResultWorks);
            QUnit.test("TaskTests - RunWithoutResultWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.RunWithoutResultWorks);
            QUnit.test("TaskTests - RunWithResultWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.RunWithResultWorks);
            QUnit.test("TaskTests - RunWorksWhenBodyThrows", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.RunWorksWhenBodyThrows);
            QUnit.test("TaskTests - WhenAllParamArrayWithResultWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.WhenAllParamArrayWithResultWorks);
            QUnit.test("TaskTests - WhenAllEnumerableWithResultWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.WhenAllEnumerableWithResultWorks);
            QUnit.test("TaskTests - WhenAllParamArrayWithoutResultWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.WhenAllParamArrayWithoutResultWorks);
            QUnit.test("TaskTests - WhenAllEnumerableWithoutResultWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.WhenAllEnumerableWithoutResultWorks);
            QUnit.test("TaskTests - WhenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.WhenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted);
            QUnit.test("TaskTests - WhenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.WhenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled);
            QUnit.test("TaskTests - WhenAnyParamArrayWithResultWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.WhenAnyParamArrayWithResultWorks);
            QUnit.test("TaskTests - WhenAnyEnumerableWithResultWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.WhenAnyEnumerableWithResultWorks);
            QUnit.test("TaskTests - WhenAnyParamArrayWithoutResultWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.WhenAnyParamArrayWithoutResultWorks);
            QUnit.test("TaskTests - WhenAnyEnumerableWithoutResultWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.WhenAnyEnumerableWithoutResultWorks);
            QUnit.test("TaskTests - WhenAnyFaultsIfTheFirstTaskFaulted", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.WhenAnyFaultsIfTheFirstTaskFaulted);
            QUnit.test("TaskTests - WhenAnyIsCancelledIfTheFirstTaskWasCancelled", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.WhenAnyIsCancelledIfTheFirstTaskWasCancelled);
            QUnit.test("TaskTests - ConstructorWithOnlyActionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.ConstructorWithOnlyActionWorks);
            QUnit.test("TaskTests - ConstructorWithActionAndStateWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.ConstructorWithActionAndStateWorks);
            QUnit.test("TaskTests - ExceptionInManuallyCreatedTaskIsStoredOnTheTask", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.ExceptionInManuallyCreatedTaskIsStoredOnTheTask);
            QUnit.test("TaskTests - ConstructorWithOnlyFunctionWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.ConstructorWithOnlyFunctionWorks);
            QUnit.test("TaskTests - ConstructorWithFunctionAndStateWorks", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests.ConstructorWithFunctionAndStateWorks);
            QUnit.test("UserDefinedStructTests - DefaultValueOfStructWithInlineCodeDefaultConstructorWorks_SPI_1610", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UserDefinedStructTests.DefaultValueOfStructWithInlineCodeDefaultConstructorWorks_SPI_1610);
            QUnit.test("UserDefinedStructTests - DefaultValueOfStructWithInlineCodeDefaultConstructorWorksGeneric_SPI_1610", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UserDefinedStructTests.DefaultValueOfStructWithInlineCodeDefaultConstructorWorksGeneric_SPI_1610);
            QUnit.test("UserDefinedStructTests - CanLiftUserDefinedConversionOperator_SPI_1611", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UserDefinedStructTests.CanLiftUserDefinedConversionOperator_SPI_1611);
            QUnit.test("UserDefinedStructTests - AutoEventBackingFieldsAreClonedWhenValueTypeIsCopied_SPI_1612", Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UserDefinedStructTests.AutoEventBackingFieldsAreClonedWhenValueTypeIsCopied_SPI_1612);
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests)],
        statics: {
            methods: {
                NonGenericCreateInstanceWithoutArgumentsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonGenericCreateInstanceWithoutArgumentsWorks()", $t.Line = "105", $t));
                    t.Fixture.NonGenericCreateInstanceWithoutArgumentsWorks();
                },
                NonGenericCreateInstanceWithOneArgumentWorks_SPI_1540: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonGenericCreateInstanceWithOneArgumentWorks_SPI_1540()", $t.Line = "113", $t));
                    t.Fixture.NonGenericCreateInstanceWithOneArgumentWorks_SPI_1540();
                },
                NonGenericCreateInstanceWithTwoArgumentsWorks_SPI_1541: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonGenericCreateInstanceWithTwoArgumentsWorks_SPI_1541()", $t.Line = "127", $t));
                    t.Fixture.NonGenericCreateInstanceWithTwoArgumentsWorks_SPI_1541();
                },
                GenericCreateInstanceWithoutArgumentsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GenericCreateInstanceWithoutArgumentsWorks()", $t.Line = "143", $t));
                    t.Fixture.GenericCreateInstanceWithoutArgumentsWorks();
                },
                GenericCreateInstanceWithOneArgumentWorks_SPI_1542: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GenericCreateInstanceWithOneArgumentWorks_SPI_1542()", $t.Line = "151", $t));
                    t.Fixture.GenericCreateInstanceWithOneArgumentWorks_SPI_1542();
                },
                GenericCreateInstanceWithTwoArgumentsWorks_SPI_1543: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GenericCreateInstanceWithTwoArgumentsWorks_SPI_1543()", $t.Line = "165", $t));
                    t.Fixture.GenericCreateInstanceWithTwoArgumentsWorks_SPI_1543();
                },
                InstantiatingTypeParameterWithDefaultConstructorConstraintWorks_SPI_1544: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InstantiatingTypeParameterWithDefaultConstructorConstraintWorks_SPI_1544()", $t.Line = "186", $t));
                    t.Fixture.InstantiatingTypeParameterWithDefaultConstructorConstraintWorks_SPI_1544();
                },
                CreateInstanceWithNoArgumentsWorksForClassWithUnnamedDefaultConstructor: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateInstanceWithNoArgumentsWorksForClassWithUnnamedDefaultConstructor()", $t.Line = "195", $t));
                    t.Fixture.CreateInstanceWithNoArgumentsWorksForClassWithUnnamedDefaultConstructor();
                },
                CreateInstanceWithNoArgumentsWorksForClassWithNamedDefaultConstructor: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateInstanceWithNoArgumentsWorksForClassWithNamedDefaultConstructor()", $t.Line = "207", $t));
                    t.Fixture.CreateInstanceWithNoArgumentsWorksForClassWithNamedDefaultConstructor();
                },
                CreateInstanceWithNoArgumentsWorksForClassWithInlineCodeDefaultConstructor_SPI_1545: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateInstanceWithNoArgumentsWorksForClassWithInlineCodeDefaultConstructor_SPI_1545()", $t.Line = "219", $t));
                    t.Fixture.CreateInstanceWithNoArgumentsWorksForClassWithInlineCodeDefaultConstructor_SPI_1545();
                },
                CreateInstanceWithNoArgumentsWorksForClassWithStaticMethodDefaultConstructor: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateInstanceWithNoArgumentsWorksForClassWithStaticMethodDefaultConstructor()", $t.Line = "232", $t));
                    t.Fixture.CreateInstanceWithNoArgumentsWorksForClassWithStaticMethodDefaultConstructor();
                },
                CreateInstanceWithNoArgumentsWorksForClassWithJsonDefaultConstructor: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateInstanceWithNoArgumentsWorksForClassWithJsonDefaultConstructor()", $t.Line = "244", $t));
                    t.Fixture.CreateInstanceWithNoArgumentsWorksForClassWithJsonDefaultConstructor();
                },
                CreateInstanceWithNoArgumentsWorksForGenericClassWithNamedDefaultConstructor: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateInstanceWithNoArgumentsWorksForGenericClassWithNamedDefaultConstructor()", $t.Line = "256", $t));
                    t.Fixture.CreateInstanceWithNoArgumentsWorksForGenericClassWithNamedDefaultConstructor();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.ActivatorTests", $t.File = "Batch4\\ActivatorTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AggregateExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AggregateExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "19", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AggregateExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "33", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithIEnumerableInnerExceptionsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AggregateExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithIEnumerableInnerExceptionsWorks()", $t.Line = "44", $t));
                    t.Fixture.ConstructorWithIEnumerableInnerExceptionsWorks();
                },
                ConstructorWithInnerExceptionArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AggregateExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithInnerExceptionArrayWorks()", $t.Line = "75", $t));
                    t.Fixture.ConstructorWithInnerExceptionArrayWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AggregateExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "106", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndIEnumerableInnerExceptionsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AggregateExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndIEnumerableInnerExceptionsWorks()", $t.Line = "117", $t));
                    t.Fixture.ConstructorWithMessageAndIEnumerableInnerExceptionsWorks();
                },
                ConstructorWithMessageAndInnerExceptionArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AggregateExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionArrayWorks()", $t.Line = "148", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionArrayWorks();
                },
                FlattenWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AggregateExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FlattenWorks()", $t.Line = "179", $t));
                    t.Fixture.FlattenWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests", $t.File = "Batch4\\Exceptions\\AggregateExceptionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AmbiguousMatchExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AmbiguousMatchExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AmbiguousMatchExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AmbiguousMatchExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "11", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AmbiguousMatchExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AmbiguousMatchExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "25", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AmbiguousMatchExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AmbiguousMatchExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "34", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AmbiguousMatchExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AmbiguousMatchExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "43", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Exceptions.AmbiguousMatchExceptionTests", $t.File = "Batch4\\Exceptions\\AmbiguousMatchExceptionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AppDomainTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.AppDomainTests)],
        statics: {
            methods: {
                GetAssembliesWorks_SPI_1646: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.AppDomainTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AppDomainTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetAssembliesWorks_SPI_1646()", $t.Line = "9", $t));
                    t.Fixture.GetAssembliesWorks_SPI_1646();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.AppDomainTests", $t.File = "Batch4\\AppDomainTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "11", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "25", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "35", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "45", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                ConstructorWithMessageAndParamNameWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndParamNameWorks()", $t.Line = "56", $t));
                    t.Fixture.ConstructorWithMessageAndParamNameWorks();
                },
                ConstructorWithMessageAndParamNameAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndParamNameAndInnerExceptionWorks()", $t.Line = "66", $t));
                    t.Fixture.ConstructorWithMessageAndParamNameAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Exceptions.ArgumentExceptionTests", $t.File = "Batch4\\Exceptions\\ArgumentExceptionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentNullExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentNullExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentNullExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentNullExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "9", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentNullExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentNullExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "24", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithParamNameWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentNullExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentNullExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithParamNameWorks()", $t.Line = "34", $t));
                    t.Fixture.ConstructorWithParamNameWorks();
                },
                ConstructorWithParamNameAndMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentNullExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentNullExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithParamNameAndMessageWorks()", $t.Line = "44", $t));
                    t.Fixture.ConstructorWithParamNameAndMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentNullExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentNullExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "54", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Exceptions.ArgumentNullExceptionTests", $t.File = "Batch4\\Exceptions\\ArgumentNullExceptionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentOutOfRangeExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentOutOfRangeExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentOutOfRangeExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "9", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentOutOfRangeExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "24", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithParamNameWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentOutOfRangeExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithParamNameWorks()", $t.Line = "35", $t));
                    t.Fixture.ConstructorWithParamNameWorks();
                },
                ConstructorWithParamNameAndMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentOutOfRangeExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithParamNameAndMessageWorks()", $t.Line = "46", $t));
                    t.Fixture.ConstructorWithParamNameAndMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentOutOfRangeExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "57", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                ConstructorWithParamNameAndActualValueAndMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentOutOfRangeExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithParamNameAndActualValueAndMessageWorks()", $t.Line = "69", $t));
                    t.Fixture.ConstructorWithParamNameAndActualValueAndMessageWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Exceptions.ArgumentOutOfRangeExceptionTests", $t.File = "Batch4\\Exceptions\\ArgumentOutOfRangeExceptionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentsTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArgumentsTests)],
        statics: {
            methods: {
                LengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArgumentsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthWorks()", $t.Line = "44", $t));
                    t.Fixture.LengthWorks();
                },
                GetArgumentWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArgumentsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetArgumentWorks()", $t.Line = "52", $t));
                    t.Fixture.GetArgumentWorks();
                },
                ToArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArgumentsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToArrayWorks()", $t.Line = "60", $t));
                    t.Fixture.ToArrayWorks();
                },
                ToArrayOfTWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArgumentsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArgumentsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToArrayOfTWorks()", $t.Line = "68", $t));
                    t.Fixture.ToArrayOfTWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.ArgumentsTests", $t.File = "Batch4\\ArgumentsTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArithmeticExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArithmeticExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArithmeticExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArithmeticExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "9", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArithmeticExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArithmeticExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "23", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArithmeticExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArithmeticExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "32", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArithmeticExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArithmeticExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "41", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Exceptions.ArithmeticExceptionTests", $t.File = "Batch4\\Exceptions\\ArithmeticExceptionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayBufferTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.ArrayBufferTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.ArrayBufferTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "18", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                ConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.ArrayBufferTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWorks()", $t.Line = "27", $t));
                    t.Fixture.ConstructorWorks();
                },
                ByteLengthPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.ArrayBufferTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteLengthPropertyWorks()", $t.Line = "35", $t));
                    t.Fixture.ByteLengthPropertyWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Collections.TypedArrays.ArrayBufferTests", $t.File = "Batch4\\Collections\\TypedArrays\\ArrayBufferTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1546: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1546()", $t.Line = "31", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1546();
                },
                TypePropertiesAreCorrect_SPI_1548: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1548()", $t.Line = "38", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1548();
                },
                ArrayCanBeAssignedToTheCollectionInterfaces_SPI_1547: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayCanBeAssignedToTheCollectionInterfaces_SPI_1547()", $t.Line = "65", $t));
                    t.Fixture.ArrayCanBeAssignedToTheCollectionInterfaces_SPI_1547();
                },
                CreateWithNegativeLenghtShouldThrow: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateWithNegativeLenghtShouldThrow()", $t.Line = "74", $t));
                    t.Fixture.CreateWithNegativeLenghtShouldThrow();
                },
                LengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthWorks()", $t.Line = "90", $t));
                    t.Fixture.LengthWorks();
                },
                RankIsOne: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RankIsOne()", $t.Line = "98", $t));
                    t.Fixture.RankIsOne();
                },
                GetLengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetLengthWorks()", $t.Line = "104", $t));
                    t.Fixture.GetLengthWorks();
                },
                GetLowerBound: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetLowerBound()", $t.Line = "112", $t));
                    t.Fixture.GetLowerBound();
                },
                GetUpperBoundWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUpperBoundWorks()", $t.Line = "120", $t));
                    t.Fixture.GetUpperBoundWorks();
                },
                GettingValueByIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GettingValueByIndexWorks()", $t.Line = "128", $t));
                    t.Fixture.GettingValueByIndexWorks();
                },
                GetValueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetValueWorks()", $t.Line = "135", $t));
                    t.Fixture.GetValueWorks();
                },
                SettingValueByIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SettingValueByIndexWorks()", $t.Line = "142", $t));
                    t.Fixture.SettingValueByIndexWorks();
                },
                SetValueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetValueWorks()", $t.Line = "152", $t));
                    t.Fixture.SetValueWorks();
                },
                ForeachWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks()", $t.Line = "162", $t));
                    t.Fixture.ForeachWorks();
                },
                CloneWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CloneWorks()", $t.Line = "173", $t));
                    t.Fixture.CloneWorks();
                },
                ConcatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConcatWorks()", $t.Line = "182", $t));
                    t.Fixture.ConcatWorks();
                },
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "191", $t));
                    t.Fixture.ContainsWorks();
                },
                ContainsUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsUsesEqualsMethod()", $t.Line = "200", $t));
                    t.Fixture.ContainsUsesEqualsMethod();
                },
                SliceWithoutEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SliceWithoutEndWorks()", $t.Line = "239", $t));
                    t.Fixture.SliceWithoutEndWorks();
                },
                SliceWithEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SliceWithEndWorks()", $t.Line = "245", $t));
                    t.Fixture.SliceWithEndWorks();
                },
                ForeachWithArrayItemCallbackWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWithArrayItemCallbackWorks()", $t.Line = "266", $t));
                    t.Fixture.ForeachWithArrayItemCallbackWorks();
                },
                IndexOfWithoutStartIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWithoutStartIndexWorks()", $t.Line = "283", $t));
                    t.Fixture.IndexOfWithoutStartIndexWorks();
                },
                IndexOfWithoutStartIndexUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWithoutStartIndexUsesEqualsMethod()", $t.Line = "290", $t));
                    t.Fixture.IndexOfWithoutStartIndexUsesEqualsMethod();
                },
                IndexOfWithStartIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWithStartIndexWorks()", $t.Line = "298", $t));
                    t.Fixture.IndexOfWithStartIndexWorks();
                },
                IndexOfWithStartIndexUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWithStartIndexUsesEqualsMethod()", $t.Line = "305", $t));
                    t.Fixture.IndexOfWithStartIndexUsesEqualsMethod();
                },
                JoinWithoutDelimiterWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "JoinWithoutDelimiterWorks()", $t.Line = "312", $t));
                    t.Fixture.JoinWithoutDelimiterWorks();
                },
                JoinWithDelimiterWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "JoinWithDelimiterWorks()", $t.Line = "318", $t));
                    t.Fixture.JoinWithDelimiterWorks();
                },
                ReverseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReverseWorks()", $t.Line = "338", $t));
                    t.Fixture.ReverseWorks();
                },
                SortWithDefaultCompareWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortWithDefaultCompareWorks()", $t.Line = "362", $t));
                    t.Fixture.SortWithDefaultCompareWorks();
                },
                SortWithCompareCallbackWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortWithCompareCallbackWorks()", $t.Line = "370", $t));
                    t.Fixture.SortWithCompareCallbackWorks();
                },
                ForeachWhenCastToIListWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWhenCastToIListWorks()", $t.Line = "378", $t));
                    t.Fixture.ForeachWhenCastToIListWorks();
                },
                ICollectionCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionCountWorks()", $t.Line = "390", $t));
                    t.Fixture.ICollectionCountWorks();
                },
                ICollectionAddWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionAddWorks()", $t.Line = "397", $t));
                    t.Fixture.ICollectionAddWorks();
                },
                ICollectionClearWorks_NDN_1548: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionClearWorks_NDN_1548()", $t.Line = "405", $t));
                    t.Fixture.ICollectionClearWorks_NDN_1548();
                },
                ICollectionContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionContainsWorks()", $t.Line = "414", $t));
                    t.Fixture.ICollectionContainsWorks();
                },
                ICollectionContainsUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionContainsUsesEqualsMethod()", $t.Line = "423", $t));
                    t.Fixture.ICollectionContainsUsesEqualsMethod();
                },
                ICollectionRemoveWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionRemoveWorks()", $t.Line = "431", $t));
                    t.Fixture.ICollectionRemoveWorks();
                },
                IListIndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIndexingWorks()", $t.Line = "458", $t));
                    t.Fixture.IListIndexingWorks();
                },
                IListIndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIndexOfWorks()", $t.Line = "467", $t));
                    t.Fixture.IListIndexOfWorks();
                },
                IListIndexOfUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIndexOfUsesEqualsMethod()", $t.Line = "475", $t));
                    t.Fixture.IListIndexOfUsesEqualsMethod();
                },
                IListInsertWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListInsertWorks()", $t.Line = "483", $t));
                    t.Fixture.IListInsertWorks();
                },
                IListRemoveAtWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListRemoveAtWorks()", $t.Line = "492", $t));
                    t.Fixture.IListRemoveAtWorks();
                },
                RepeatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RepeatWorks()", $t.Line = "510", $t));
                    t.Fixture.RepeatWorks();
                },
                ClearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClearWorks()", $t.Line = "518", $t));
                    t.Fixture.ClearWorks();
                },
                CopyWithDifferentArraysWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyWithDifferentArraysWorks()", $t.Line = "534", $t));
                    t.Fixture.CopyWithDifferentArraysWorks();
                },
                CopyWithinArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyWithinArrayWorks()", $t.Line = "547", $t));
                    t.Fixture.CopyWithinArrayWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.ArrayTests", $t.File = "Batch4\\ArrayTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests)],
        statics: {
            methods: {
                GetExecutingAssemblyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetExecutingAssemblyWorks()", $t.Line = "133", $t));
                    t.Fixture.GetExecutingAssemblyWorks();
                },
                GetAssemblyForTypeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetAssemblyForTypeWorks()", $t.Line = "139", $t));
                    t.Fixture.GetAssemblyForTypeWorks();
                },
                FullNameWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FullNameWorks()", $t.Line = "146", $t));
                    t.Fixture.FullNameWorks();
                },
                ToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWorks()", $t.Line = "153", $t));
                    t.Fixture.ToStringWorks();
                },
                GetTypesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetTypesWorks()", $t.Line = "160", $t));
                    t.Fixture.GetTypesWorks();
                },
                GetTypesWithImportedModuleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetTypesWithImportedModuleWorks()", $t.Line = "170", $t));
                    t.Fixture.GetTypesWithImportedModuleWorks();
                },
                GetTypeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetTypeWorks()", $t.Line = "181", $t));
                    t.Fixture.GetTypeWorks();
                },
                GetTypeWorksWithGenerics: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetTypeWorksWithGenerics()", $t.Line = "189", $t));
                    t.Fixture.GetTypeWorksWithGenerics();
                },
                GetTypeWithImportedModuleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetTypeWithImportedModuleWorks()", $t.Line = "196", $t));
                    t.Fixture.GetTypeWithImportedModuleWorks();
                },
                AssemblyOfBuiltInTypes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AssemblyOfBuiltInTypes()", $t.Line = "206", $t));
                    t.Fixture.AssemblyOfBuiltInTypes();
                },
                CreateInstanceWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateInstanceWorks()", $t.Line = "217", $t));
                    t.Fixture.CreateInstanceWorks();
                },
                GetCustomAttributesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesWorks()", $t.Line = "225", $t));
                    t.Fixture.GetCustomAttributesWorks();
                },
                LoadCanReturnReferenceToLoadedAssembly: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LoadCanReturnReferenceToLoadedAssembly()", $t.Line = "251", $t));
                    t.Fixture.LoadCanReturnReferenceToLoadedAssembly();
                },
                GetManifestResourceNamesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetManifestResourceNamesWorks()", $t.Line = "258", $t));
                    t.Fixture.GetManifestResourceNamesWorks();
                },
                GetManifestResourceDataAsBase64WithoutTypeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetManifestResourceDataAsBase64WithoutTypeWorks()", $t.Line = "266", $t));
                    t.Fixture.GetManifestResourceDataAsBase64WithoutTypeWorks();
                },
                GetManifestResourceDataAsBase64WithTypeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetManifestResourceDataAsBase64WithTypeWorks()", $t.Line = "274", $t));
                    t.Fixture.GetManifestResourceDataAsBase64WithTypeWorks();
                },
                GetManifestResourceDataWithoutTypeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetManifestResourceDataWithoutTypeWorks()", $t.Line = "282", $t));
                    t.Fixture.GetManifestResourceDataWithoutTypeWorks();
                },
                GetManifestResourceDataWithTypeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetManifestResourceDataWithTypeWorks()", $t.Line = "290", $t));
                    t.Fixture.GetManifestResourceDataWithTypeWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Reflection.AssemblyTests", $t.File = "Batch4\\Reflection\\AssemblyTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AsyncTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.AsyncTests)],
        statics: {
            methods: {
                AsyncVoid: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.AsyncTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AsyncTests, 3, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AsyncVoid()", $t.Line = "11", $t));
                    t.Fixture.AsyncVoid();
                },
                AsyncTask: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.AsyncTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AsyncTests, 7, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AsyncTask()", $t.Line = "42", $t));
                    t.Fixture.AsyncTask();
                },
                AsyncTaskBodyThrowsException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.AsyncTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AsyncTests, 8, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AsyncTaskBodyThrowsException()", $t.Line = "78", $t));
                    t.Fixture.AsyncTaskBodyThrowsException();
                },
                AwaitTaskThatFaults: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.AsyncTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AsyncTests, 8, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AwaitTaskThatFaults()", $t.Line = "117", $t));
                    t.Fixture.AwaitTaskThatFaults();
                },
                AggregateExceptionsAreUnwrappedWhenAwaitingTask: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.AsyncTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AsyncTests, 2, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AggregateExceptionsAreUnwrappedWhenAwaitingTask()", $t.Line = "155", $t));
                    t.Fixture.AggregateExceptionsAreUnwrappedWhenAwaitingTask();
                },
                AsyncTaskThatReturnsValue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.AsyncTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AsyncTests, 8, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AsyncTaskThatReturnsValue()", $t.Line = "191", $t));
                    t.Fixture.AsyncTaskThatReturnsValue();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Threading.AsyncTests", $t.File = "Batch4\\Threading\\Tasks\\AsyncTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests)],
        statics: {
            methods: {
                CanGetCustomTypeAttributesForTypeWithNoAttributes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanGetCustomTypeAttributesForTypeWithNoAttributes()", $t.Line = "415", $t));
                    t.Fixture.CanGetCustomTypeAttributesForTypeWithNoAttributes();
                },
                CanGetCustomTypeAttributesForClassWithAttributes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanGetCustomTypeAttributesForClassWithAttributes()", $t.Line = "422", $t));
                    t.Fixture.CanGetCustomTypeAttributesForClassWithAttributes();
                },
                NonScriptableAttributesAreNotIncluded: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonScriptableAttributesAreNotIncluded()", $t.Line = "435", $t));
                    t.Fixture.NonScriptableAttributesAreNotIncluded();
                },
                CanGetCustomTypeAttributesForInterfaceWithAttributes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanGetCustomTypeAttributesForInterfaceWithAttributes()", $t.Line = "443", $t));
                    t.Fixture.CanGetCustomTypeAttributesForInterfaceWithAttributes();
                },
                CanGetCustomTypeAttributesForEnumWithAttributes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanGetCustomTypeAttributesForEnumWithAttributes()", $t.Line = "456", $t));
                    t.Fixture.CanGetCustomTypeAttributesForEnumWithAttributes();
                },
                InheritedFlagToGetCustomAttributesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InheritedFlagToGetCustomAttributesWorks()", $t.Line = "469", $t));
                    t.Fixture.InheritedFlagToGetCustomAttributesWorks();
                },
                DeepInheritanceWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DeepInheritanceWorks()", $t.Line = "483", $t));
                    t.Fixture.DeepInheritanceWorks();
                },
                OverridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "OverridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass()", $t.Line = "494", $t));
                    t.Fixture.OverridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass();
                },
                ApplyingNewInstanceOfMultipleUseAttributeAddsTheAttribute: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ApplyingNewInstanceOfMultipleUseAttributeAddsTheAttribute()", $t.Line = "505", $t));
                    t.Fixture.ApplyingNewInstanceOfMultipleUseAttributeAddsTheAttribute();
                },
                NonInheritedAttributeIsNotInherited: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonInheritedAttributeIsNotInherited()", $t.Line = "517", $t));
                    t.Fixture.NonInheritedAttributeIsNotInherited();
                },
                GetCustomAttributesTypeFilterWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesTypeFilterWorks()", $t.Line = "524", $t));
                    t.Fixture.GetCustomAttributesTypeFilterWorks();
                },
                GetCustomAttributesWorksForOpenGenericClass: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesWorksForOpenGenericClass()", $t.Line = "534", $t));
                    t.Fixture.GetCustomAttributesWorksForOpenGenericClass();
                },
                GetCustomAttributesWorksForConstructedGenericClass: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesWorksForConstructedGenericClass()", $t.Line = "542", $t));
                    t.Fixture.GetCustomAttributesWorksForConstructedGenericClass();
                },
                GetCustomAttributesWorksForOpenGenericInterface: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesWorksForOpenGenericInterface()", $t.Line = "550", $t));
                    t.Fixture.GetCustomAttributesWorksForOpenGenericInterface();
                },
                GetCustomAttributesWorksForConstructedGenericInterface: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesWorksForConstructedGenericInterface()", $t.Line = "558", $t));
                    t.Fixture.GetCustomAttributesWorksForConstructedGenericInterface();
                },
                AllSupportedScalarTypesCanBeUsedAsAttributeArguments: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AllSupportedScalarTypesCanBeUsedAsAttributeArguments()", $t.Line = "566", $t));
                    t.Fixture.AllSupportedScalarTypesCanBeUsedAsAttributeArguments();
                },
                ArraysCanBeUsedAsAttributeArguments: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArraysCanBeUsedAsAttributeArguments()", $t.Line = "584", $t));
                    t.Fixture.ArraysCanBeUsedAsAttributeArguments();
                },
                NamedValuesEnumCanBeUsedAsAttributeArgument: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NamedValuesEnumCanBeUsedAsAttributeArgument()", $t.Line = "592", $t));
                    t.Fixture.NamedValuesEnumCanBeUsedAsAttributeArgument();
                },
                PropertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration()", $t.Line = "599", $t));
                    t.Fixture.PropertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration();
                },
                PropertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration()", $t.Line = "606", $t));
                    t.Fixture.PropertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration();
                },
                PropertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration()", $t.Line = "613", $t));
                    t.Fixture.PropertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration();
                },
                FieldsCanBeAssignedInAttributeDeclaration: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FieldsCanBeAssignedInAttributeDeclaration()", $t.Line = "620", $t));
                    t.Fixture.FieldsCanBeAssignedInAttributeDeclaration();
                },
                CreatingAttributeWithNamedConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingAttributeWithNamedConstructorWorks()", $t.Line = "627", $t));
                    t.Fixture.CreatingAttributeWithNamedConstructorWorks();
                },
                CreatingAttributeWithInlineCodeConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingAttributeWithInlineCodeConstructorWorks()", $t.Line = "634", $t));
                    t.Fixture.CreatingAttributeWithInlineCodeConstructorWorks();
                },
                ConditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved()", $t.Line = "641", $t));
                    t.Fixture.ConditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Reflection.AttributeTests", $t.File = "Batch4\\Reflection\\AttributeTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.BooleanTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1575: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1575()", $t.Line = "9", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1575();
                },
                DefaultValueIsFalse: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueIsFalse()", $t.Line = "35", $t));
                    t.Fixture.DefaultValueIsFalse();
                },
                CreatingInstanceReturnsFalse: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsFalse()", $t.Line = "41", $t));
                    t.Fixture.CreatingInstanceReturnsFalse();
                },
                DefaultConstructorReturnsFalse_SPI_1576: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsFalse_SPI_1576()", $t.Line = "47", $t));
                    t.Fixture.DefaultConstructorReturnsFalse_SPI_1576();
                },
                ParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks()", $t.Line = "54", $t));
                    t.Fixture.ParseWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "68", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                ObjectEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ObjectEqualsWorks()", $t.Line = "76", $t));
                    t.Fixture.ObjectEqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "85", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "99", $t));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "108", $t));
                    t.Fixture.IComparableCompareToWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests", $t.File = "Batch4\\SimpleTypes\\BooleanTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Bridge_ClientTest_Batch4_ExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ExceptionTests)],
        statics: {
            methods: {
                ThrowingAndCatchingExceptionsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Bridge_ClientTest_Batch4_ExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ThrowingAndCatchingExceptionsWorks()", $t.Line = "27", $t));
                    t.Fixture.ThrowingAndCatchingExceptionsWorks();
                },
                ExceptionOfWrongTypeIsNotCaught: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Bridge_ClientTest_Batch4_ExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExceptionOfWrongTypeIsNotCaught()", $t.Line = "43", $t));
                    t.Fixture.ExceptionOfWrongTypeIsNotCaught();
                },
                CanCatchExceptionAsBaseType: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Bridge_ClientTest_Batch4_ExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanCatchExceptionAsBaseType()", $t.Line = "63", $t));
                    t.Fixture.CanCatchExceptionAsBaseType();
                },
                CanCatchStringAsException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Bridge_ClientTest_Batch4_ExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanCatchStringAsException()", $t.Line = "84", $t));
                    t.Fixture.CanCatchStringAsException();
                },
                CanCatchStringAsCatchAll: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Bridge_ClientTest_Batch4_ExceptionTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanCatchStringAsCatchAll()", $t.Line = "104", $t));
                    t.Fixture.CanCatchStringAsCatchAll();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.ExceptionTests", $t.File = "Batch4\\ExceptionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1717: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1717()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1717();
                },
                CastsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastsWork()", $t.Line = "35", $t));
                    t.Fixture.CastsWork();
                },
                DefaultValueIs0: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueIs0()", $t.Line = "91", $t));
                    t.Fixture.DefaultValueIs0();
                },
                DefaultConstructorReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsZero()", $t.Line = "97", $t));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                CreatingInstanceReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsZero()", $t.Line = "103", $t));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                ConstantsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWork()", $t.Line = "109", $t));
                    t.Fixture.ConstantsWork();
                },
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "116", $t));
                    t.Fixture.FormatWorks();
                },
                ToStringWithFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatWorks()", $t.Line = "122", $t));
                    t.Fixture.ToStringWithFormatWorks();
                },
                ToStringWithFormatAndProviderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatAndProviderWorks()", $t.Line = "128", $t));
                    t.Fixture.ToStringWithFormatAndProviderWorks();
                },
                IFormattableToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks()", $t.Line = "134", $t));
                    t.Fixture.IFormattableToStringWorks();
                },
                TryParseWorks_SPI_1592: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseWorks_SPI_1592()", $t.Line = "147", $t));
                    t.Fixture.TryParseWorks_SPI_1592();
                },
                ParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks()", $t.Line = "182", $t));
                    t.Fixture.ParseWorks();
                },
                ToStringWithoutRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithoutRadixWorks()", $t.Line = "194", $t));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                ToStringWithRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithRadixWorks()", $t.Line = "200", $t));
                    t.Fixture.ToStringWithRadixWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "207", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "215", $t));
                    t.Fixture.EqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "224", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "238", $t));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "246", $t));
                    t.Fixture.IComparableCompareToWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.SimpleTypes.ByteTests", $t.File = "Batch4\\SimpleTypes\\ByteTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests)],
        statics: {
            methods: {
                TypePropertiesForCancellationTokenSourceAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesForCancellationTokenSourceAreCorrect()", $t.Line = "14", $t));
                    t.Fixture.TypePropertiesForCancellationTokenSourceAreCorrect();
                },
                TypePropertiesForCancellationTokenAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesForCancellationTokenAreCorrect()", $t.Line = "23", $t));
                    t.Fixture.TypePropertiesForCancellationTokenAreCorrect();
                },
                TypePropertiesForCancellationTokenRegistrationAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesForCancellationTokenRegistrationAreCorrect()", $t.Line = "33", $t));
                    t.Fixture.TypePropertiesForCancellationTokenRegistrationAreCorrect();
                },
                CancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe()", $t.Line = "44", $t));
                    t.Fixture.CancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe();
                },
                CancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe()", $t.Line = "53", $t));
                    t.Fixture.CancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe();
                },
                CancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled()", $t.Line = "62", $t));
                    t.Fixture.CancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled();
                },
                CancellationTokenNoneIsNotCancelledAndCannotBe: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CancellationTokenNoneIsNotCancelledAndCannotBe()", $t.Line = "71", $t));
                    t.Fixture.CancellationTokenNoneIsNotCancelledAndCannotBe();
                },
                CreatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled()", $t.Line = "79", $t));
                    t.Fixture.CreatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled();
                },
                ActivatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ActivatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled()", $t.Line = "88", $t));
                    t.Fixture.ActivatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled();
                },
                CanBeCanceledIsTrueForTokenCreatedForCancellationTokenSource: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanBeCanceledIsTrueForTokenCreatedForCancellationTokenSource()", $t.Line = "97", $t));
                    t.Fixture.CanBeCanceledIsTrueForTokenCreatedForCancellationTokenSource();
                },
                IsCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod()", $t.Line = "104", $t));
                    t.Fixture.IsCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod();
                },
                ThrowIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ThrowIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled()", $t.Line = "115", $t));
                    t.Fixture.ThrowIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled();
                },
                CancelWithoutArgumentsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CancelWithoutArgumentsWorks()", $t.Line = "124", $t));
                    t.Fixture.CancelWithoutArgumentsWorks();
                },
                CancelWorksWhenThrowOnFirstExceptionIsFalse: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CancelWorksWhenThrowOnFirstExceptionIsFalse()", $t.Line = "169", $t));
                    t.Fixture.CancelWorksWhenThrowOnFirstExceptionIsFalse();
                },
                CancelWorksWhenThrowOnFirstExceptionIsTrue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CancelWorksWhenThrowOnFirstExceptionIsTrue()", $t.Line = "215", $t));
                    t.Fixture.CancelWorksWhenThrowOnFirstExceptionIsTrue();
                },
                RegisterOnACancelledSourceWithoutContextInvokesTheCallback: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegisterOnACancelledSourceWithoutContextInvokesTheCallback()", $t.Line = "259", $t));
                    t.Fixture.RegisterOnACancelledSourceWithoutContextInvokesTheCallback();
                },
                RegisterWithArgumentOnACancelledSourceInvokesTheCallback: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegisterWithArgumentOnACancelledSourceInvokesTheCallback()", $t.Line = "269", $t));
                    t.Fixture.RegisterWithArgumentOnACancelledSourceInvokesTheCallback();
                },
                RegisterOnACancelledSourceWithoutContextRethrowsAThrownException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegisterOnACancelledSourceWithoutContextRethrowsAThrownException()", $t.Line = "284", $t));
                    t.Fixture.RegisterOnACancelledSourceWithoutContextRethrowsAThrownException();
                },
                RegisterOnACancelledSourceWithContextRethrowsAThrownException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegisterOnACancelledSourceWithContextRethrowsAThrownException()", $t.Line = "304", $t));
                    t.Fixture.RegisterOnACancelledSourceWithContextRethrowsAThrownException();
                },
                RegisterOverloadsWithUseSynchronizationContextWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegisterOverloadsWithUseSynchronizationContextWork()", $t.Line = "326", $t));
                    t.Fixture.RegisterOverloadsWithUseSynchronizationContextWork();
                },
                RegisterOnCancellationTokenCreatedNonCancelledDoesNothing: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegisterOnCancellationTokenCreatedNonCancelledDoesNothing()", $t.Line = "356", $t));
                    t.Fixture.RegisterOnCancellationTokenCreatedNonCancelledDoesNothing();
                },
                RegisterOnCancellationTokenCreatedCancelledInvokesTheActionImmediately: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegisterOnCancellationTokenCreatedCancelledInvokesTheActionImmediately()", $t.Line = "367", $t));
                    t.Fixture.RegisterOnCancellationTokenCreatedCancelledInvokesTheActionImmediately();
                },
                DuplicateCancelDoesNotCauseCallbacksToBeCalledTwice: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DuplicateCancelDoesNotCauseCallbacksToBeCalledTwice()", $t.Line = "384", $t));
                    t.Fixture.DuplicateCancelDoesNotCauseCallbacksToBeCalledTwice();
                },
                RegistrationsCanBeCompared: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegistrationsCanBeCompared()", $t.Line = "396", $t));
                    t.Fixture.RegistrationsCanBeCompared();
                },
                RegistrationsCanBeUnregistered: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegistrationsCanBeUnregistered()", $t.Line = "418", $t));
                    t.Fixture.RegistrationsCanBeUnregistered();
                },
                CreatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm()", $t.Line = "446", $t));
                    t.Fixture.CreatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm();
                },
                LinkedSourceWithTwoTokensWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LinkedSourceWithTwoTokensWorks()", $t.Line = "455", $t));
                    t.Fixture.LinkedSourceWithTwoTokensWorks();
                },
                LinkedSourceWithThreeTokensWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LinkedSourceWithThreeTokensWorks()", $t.Line = "479", $t));
                    t.Fixture.LinkedSourceWithThreeTokensWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Threading.CancellationTokenTests", $t.File = "Batch4\\Threading\\CancellationTokenTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CharTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests)],
        statics: {
            methods: {
                TypePropertiesAreInt32_SPI_1603: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreInt32_SPI_1603()", $t.Line = "9", $t));
                    t.Fixture.TypePropertiesAreInt32_SPI_1603();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.SimpleTypes.CharTests", $t.File = "Batch4\\SimpleTypes\\CharTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ComparerTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1546: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1546()", $t.Line = "25", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1546();
                },
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "32", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultComparerCanOrderNumbers: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultComparerCanOrderNumbers()", $t.Line = "43", $t));
                    t.Fixture.DefaultComparerCanOrderNumbers();
                },
                DefaultComparerCanOrderNullValues: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultComparerCanOrderNullValues()", $t.Line = "51", $t));
                    t.Fixture.DefaultComparerCanOrderNullValues();
                },
                DefaultComparerUsesCompareMethodIfClassImplementsIComparable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultComparerUsesCompareMethodIfClassImplementsIComparable()", $t.Line = "59", $t));
                    t.Fixture.DefaultComparerUsesCompareMethodIfClassImplementsIComparable();
                },
                CreateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateWorks()", $t.Line = "67", $t));
                    t.Fixture.CreateWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests", $t.File = "Batch4\\Collections\\Generic\\ComparerTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ContractExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ContractExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ContractExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "24", $t));
                    t.Fixture.DefaultConstructorWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Exceptions.ContractExceptionTests", $t.File = "Batch4\\Exceptions\\ContractExceptionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests)],
        statics: {
            methods: {
                Assume: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Assume()", $t.Line = "47", $t));
                    t.Fixture.Assume();
                },
                AssumeWithUserMessage: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AssumeWithUserMessage()", $t.Line = "56", $t));
                    t.Fixture.AssumeWithUserMessage();
                },
                Assert: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Assert()", $t.Line = "65", $t));
                    t.Fixture.Assert();
                },
                AssertWithUserMessage: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AssertWithUserMessage()", $t.Line = "74", $t));
                    t.Fixture.AssertWithUserMessage();
                },
                Requires: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Requires()", $t.Line = "83", $t));
                    t.Fixture.Requires();
                },
                RequiresWithUserMessage: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RequiresWithUserMessage()", $t.Line = "92", $t));
                    t.Fixture.RequiresWithUserMessage();
                },
                RequiresWithTypeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RequiresWithTypeException()", $t.Line = "101", $t));
                    t.Fixture.RequiresWithTypeException();
                },
                RequiredWithTypeExceptionAndUserMessage: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RequiredWithTypeExceptionAndUserMessage()", $t.Line = "109", $t));
                    t.Fixture.RequiredWithTypeExceptionAndUserMessage();
                },
                ForAll: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForAll()", $t.Line = "117", $t));
                    t.Fixture.ForAll();
                },
                ForAllWithCollection: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForAllWithCollection()", $t.Line = "126", $t));
                    t.Fixture.ForAllWithCollection();
                },
                Exists: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Exists()", $t.Line = "135", $t));
                    t.Fixture.Exists();
                },
                ExistsWithCollection: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ContractTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExistsWithCollection()", $t.Line = "144", $t));
                    t.Fixture.ExistsWithCollection();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests", $t.File = "Batch4\\Diagnostics\\Contracts\\ContractTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ConvertTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ConvertTests)],
        statics: {
            methods: {
                ToBase64StringWithOnlyArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ConvertTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ConvertTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToBase64StringWithOnlyArrayWorks()", $t.Line = "21", $t));
                    t.Fixture.ToBase64StringWithOnlyArrayWorks();
                },
                ToBase64StringWithArrayAndFormattingOptionsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ConvertTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ConvertTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToBase64StringWithArrayAndFormattingOptionsWorks()", $t.Line = "34", $t));
                    t.Fixture.ToBase64StringWithArrayAndFormattingOptionsWorks();
                },
                ToBase64StringWithArrayAndOffsetAndLengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ConvertTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ConvertTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToBase64StringWithArrayAndOffsetAndLengthWorks()", $t.Line = "45", $t));
                    t.Fixture.ToBase64StringWithArrayAndOffsetAndLengthWorks();
                },
                ToBase64StringWithArrayAndOffsetAndLengthAndFormattingOptionsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ConvertTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ConvertTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToBase64StringWithArrayAndOffsetAndLengthAndFormattingOptionsWorks()", $t.Line = "52", $t));
                    t.Fixture.ToBase64StringWithArrayAndOffsetAndLengthAndFormattingOptionsWorks();
                },
                FromBase64StringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.ConvertTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ConvertTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromBase64StringWorks()", $t.Line = "63", $t));
                    t.Fixture.FromBase64StringWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.ConvertTests", $t.File = "Batch4\\ConvertTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CultureInfoTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.CultureInfoTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.CultureInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CultureInfoTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                GetFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.CultureInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CultureInfoTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetFormatWorks()", $t.Line = "20", $t));
                    t.Fixture.GetFormatWorks();
                },
                InvariantWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.CultureInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.CultureInfoTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvariantWorks()", $t.Line = "29", $t));
                    t.Fixture.InvariantWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.CultureInfoTests", $t.File = "Batch4\\CultureInfoTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "19", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                ArrayBufferOnlyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferOnlyConstructorWorks()", $t.Line = "28", $t));
                    t.Fixture.ArrayBufferOnlyConstructorWorks();
                },
                ArrayBufferAndByteOffsetConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferAndByteOffsetConstructorWorks()", $t.Line = "37", $t));
                    t.Fixture.ArrayBufferAndByteOffsetConstructorWorks();
                },
                ArrayBufferAndByteOffsetAndByteLengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferAndByteOffsetAndByteLengthConstructorWorks()", $t.Line = "46", $t));
                    t.Fixture.ArrayBufferAndByteOffsetAndByteLengthConstructorWorks();
                },
                GetInt8Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetInt8Works()", $t.Line = "56", $t));
                    t.Fixture.GetInt8Works();
                },
                GetUint8Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUint8Works()", $t.Line = "64", $t));
                    t.Fixture.GetUint8Works();
                },
                GetInt16Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetInt16Works()", $t.Line = "72", $t));
                    t.Fixture.GetInt16Works();
                },
                GetUint16Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUint16Works()", $t.Line = "87", $t));
                    t.Fixture.GetUint16Works();
                },
                GetInt32Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetInt32Works()", $t.Line = "102", $t));
                    t.Fixture.GetInt32Works();
                },
                GetUint32Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUint32Works()", $t.Line = "117", $t));
                    t.Fixture.GetUint32Works();
                },
                GetFloat32Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetFloat32Works()", $t.Line = "132", $t));
                    t.Fixture.GetFloat32Works();
                },
                GetFloat64Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetFloat64Works()", $t.Line = "141", $t));
                    t.Fixture.GetFloat64Works();
                },
                SetInt8Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetInt8Works()", $t.Line = "165", $t));
                    t.Fixture.SetInt8Works();
                },
                SetUint8Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUint8Works()", $t.Line = "175", $t));
                    t.Fixture.SetUint8Works();
                },
                SetInt16Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetInt16Works()", $t.Line = "185", $t));
                    t.Fixture.SetInt16Works();
                },
                SetUint16Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUint16Works()", $t.Line = "199", $t));
                    t.Fixture.SetUint16Works();
                },
                SetInt32Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetInt32Works()", $t.Line = "213", $t));
                    t.Fixture.SetInt32Works();
                },
                SetUint32Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUint32Works()", $t.Line = "227", $t));
                    t.Fixture.SetUint32Works();
                },
                SetFloat32Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetFloat32Works()", $t.Line = "241", $t));
                    t.Fixture.SetFloat32Works();
                },
                SetFloat64Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetFloat64Works()", $t.Line = "252", $t));
                    t.Fixture.SetFloat64Works();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests", $t.File = "Batch4\\Collections\\TypedArrays\\DataViewTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1608_1609: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1608_1609()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1608_1609();
                },
                DefaultConstructorReturnsTodaysDate: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsTodaysDate()", $t.Line = "28", $t));
                    t.Fixture.DefaultConstructorReturnsTodaysDate();
                },
                CreatingInstanceReturnsTodaysDate_SPI_1604: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsTodaysDate_SPI_1604()", $t.Line = "35", $t));
                    t.Fixture.CreatingInstanceReturnsTodaysDate_SPI_1604();
                },
                MillisecondSinceEpochConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MillisecondSinceEpochConstructorWorks()", $t.Line = "42", $t));
                    t.Fixture.MillisecondSinceEpochConstructorWorks();
                },
                StringConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringConstructorWorks()", $t.Line = "49", $t));
                    t.Fixture.StringConstructorWorks();
                },
                YMDConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "YMDConstructorWorks()", $t.Line = "58", $t));
                    t.Fixture.YMDConstructorWorks();
                },
                YMDHConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "YMDHConstructorWorks()", $t.Line = "67", $t));
                    t.Fixture.YMDHConstructorWorks();
                },
                YMDHNConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "YMDHNConstructorWorks()", $t.Line = "77", $t));
                    t.Fixture.YMDHNConstructorWorks();
                },
                YMDHNSConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "YMDHNSConstructorWorks()", $t.Line = "88", $t));
                    t.Fixture.YMDHNSConstructorWorks();
                },
                YMDHNSUConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "YMDHNSUConstructorWorks()", $t.Line = "100", $t));
                    t.Fixture.YMDHNSUConstructorWorks();
                },
                NowWorks_SPI_1624: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NowWorks_SPI_1624()", $t.Line = "114", $t));
                    t.Fixture.NowWorks_SPI_1624();
                },
                GetFullYearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetFullYearWorks()", $t.Line = "215", $t));
                    t.Fixture.GetFullYearWorks();
                },
                GetMonthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMonthWorks()", $t.Line = "222", $t));
                    t.Fixture.GetMonthWorks();
                },
                GetDateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetDateWorks()", $t.Line = "229", $t));
                    t.Fixture.GetDateWorks();
                },
                GetHoursWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHoursWorks()", $t.Line = "236", $t));
                    t.Fixture.GetHoursWorks();
                },
                GetMinutesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMinutesWorks()", $t.Line = "243", $t));
                    t.Fixture.GetMinutesWorks();
                },
                GetSecondsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetSecondsWorks()", $t.Line = "250", $t));
                    t.Fixture.GetSecondsWorks();
                },
                GetMillisecondsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMillisecondsWorks()", $t.Line = "257", $t));
                    t.Fixture.GetMillisecondsWorks();
                },
                GetDayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetDayWorks()", $t.Line = "264", $t));
                    t.Fixture.GetDayWorks();
                },
                GetTimeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetTimeWorks()", $t.Line = "271", $t));
                    t.Fixture.GetTimeWorks();
                },
                ValueOfWorks_SPI_1624: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ValueOfWorks_SPI_1624()", $t.Line = "279", $t));
                    t.Fixture.ValueOfWorks_SPI_1624();
                },
                GetTimezoneOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetTimezoneOffsetWorks()", $t.Line = "287", $t));
                    t.Fixture.GetTimezoneOffsetWorks();
                },
                GetUtcFullYearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUtcFullYearWorks()", $t.Line = "294", $t));
                    t.Fixture.GetUtcFullYearWorks();
                },
                GetUtcMonthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUtcMonthWorks()", $t.Line = "301", $t));
                    t.Fixture.GetUtcMonthWorks();
                },
                GetUtcDateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUtcDateWorks()", $t.Line = "308", $t));
                    t.Fixture.GetUtcDateWorks();
                },
                GetUtcHoursWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUtcHoursWorks()", $t.Line = "315", $t));
                    t.Fixture.GetUtcHoursWorks();
                },
                GetUtcMinutesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUtcMinutesWorks()", $t.Line = "323", $t));
                    t.Fixture.GetUtcMinutesWorks();
                },
                GetUtcSecondsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUtcSecondsWorks()", $t.Line = "330", $t));
                    t.Fixture.GetUtcSecondsWorks();
                },
                GetUtcMillisecondsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUtcMillisecondsWorks()", $t.Line = "337", $t));
                    t.Fixture.GetUtcMillisecondsWorks();
                },
                GetUtcDayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUtcDayWorks()", $t.Line = "344", $t));
                    t.Fixture.GetUtcDayWorks();
                },
                ParseWorks_SPI_1624: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks_SPI_1624()", $t.Line = "352", $t));
                    t.Fixture.ParseWorks_SPI_1624();
                },
                ToLocaleDateStringIsWorking_1624: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToLocaleDateStringIsWorking_1624()", $t.Line = "373", $t));
                    t.Fixture.ToLocaleDateStringIsWorking_1624();
                },
                ToDateStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToDateStringWorks()", $t.Line = "465", $t));
                    t.Fixture.ToDateStringWorks();
                },
                ToTimeStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToTimeStringWorks()", $t.Line = "473", $t));
                    t.Fixture.ToTimeStringWorks();
                },
                ToUtcStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToUtcStringWorks()", $t.Line = "481", $t));
                    t.Fixture.ToUtcStringWorks();
                },
                ToLocaleDateStringWorks_SPI_1624: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToLocaleDateStringWorks_SPI_1624()", $t.Line = "489", $t));
                    t.Fixture.ToLocaleDateStringWorks_SPI_1624();
                },
                DateUTCIsWorking_SPI_1624: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DateUTCIsWorking_SPI_1624()", $t.Line = "497", $t));
                    t.Fixture.DateUTCIsWorking_SPI_1624();
                },
                ToLocaleTimeStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToLocaleTimeStringWorks()", $t.Line = "532", $t));
                    t.Fixture.ToLocaleTimeStringWorks();
                },
                SubtractingDatesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubtractingDatesWorks()", $t.Line = "586", $t));
                    t.Fixture.SubtractingDatesWorks();
                },
                DateEqualityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DateEqualityWorks()", $t.Line = "600", $t));
                    t.Fixture.DateEqualityWorks();
                },
                DateInequalityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DateInequalityWorks()", $t.Line = "610", $t));
                    t.Fixture.DateInequalityWorks();
                },
                DateLessThanWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DateLessThanWorks()", $t.Line = "620", $t));
                    t.Fixture.DateLessThanWorks();
                },
                DateLessEqualWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DateLessEqualWorks()", $t.Line = "628", $t));
                    t.Fixture.DateLessEqualWorks();
                },
                DateGreaterThanWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DateGreaterThanWorks()", $t.Line = "636", $t));
                    t.Fixture.DateGreaterThanWorks();
                },
                DateGreaterEqualWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DateGreaterEqualWorks()", $t.Line = "644", $t));
                    t.Fixture.DateGreaterEqualWorks();
                },
                SetFullYearWithOneParameterWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetFullYearWithOneParameterWorks()", $t.Line = "652", $t));
                    t.Fixture.SetFullYearWithOneParameterWorks();
                },
                SetFullYearWithTwoParametersWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetFullYearWithTwoParametersWorks()", $t.Line = "660", $t));
                    t.Fixture.SetFullYearWithTwoParametersWorks();
                },
                SetFullYearWithThreeParametersWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetFullYearWithThreeParametersWorks()", $t.Line = "669", $t));
                    t.Fixture.SetFullYearWithThreeParametersWorks();
                },
                SetMonthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetMonthWorks()", $t.Line = "679", $t));
                    t.Fixture.SetMonthWorks();
                },
                SetDateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetDateWorks()", $t.Line = "687", $t));
                    t.Fixture.SetDateWorks();
                },
                SetHoursWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetHoursWorks()", $t.Line = "695", $t));
                    t.Fixture.SetHoursWorks();
                },
                SetMinutesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetMinutesWorks()", $t.Line = "703", $t));
                    t.Fixture.SetMinutesWorks();
                },
                SetSecondsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetSecondsWorks()", $t.Line = "711", $t));
                    t.Fixture.SetSecondsWorks();
                },
                SetMillisecondsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetMillisecondsWorks()", $t.Line = "719", $t));
                    t.Fixture.SetMillisecondsWorks();
                },
                SetTimeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetTimeWorks()", $t.Line = "727", $t));
                    t.Fixture.SetTimeWorks();
                },
                SetTimeAsDoubleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetTimeAsDoubleWorks()", $t.Line = "735", $t));
                    t.Fixture.SetTimeAsDoubleWorks();
                },
                SetUtcFullYearWithOneParameterWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUtcFullYearWithOneParameterWorks()", $t.Line = "743", $t));
                    t.Fixture.SetUtcFullYearWithOneParameterWorks();
                },
                SetUtcFullYearWithTwoParametersWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUtcFullYearWithTwoParametersWorks()", $t.Line = "751", $t));
                    t.Fixture.SetUtcFullYearWithTwoParametersWorks();
                },
                SetUtcFullYearWithThreeParametersWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUtcFullYearWithThreeParametersWorks()", $t.Line = "760", $t));
                    t.Fixture.SetUtcFullYearWithThreeParametersWorks();
                },
                SetUtcMonthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUtcMonthWorks()", $t.Line = "770", $t));
                    t.Fixture.SetUtcMonthWorks();
                },
                SetUtcDateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUtcDateWorks()", $t.Line = "780", $t));
                    t.Fixture.SetUtcDateWorks();
                },
                SetUtcHoursWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUtcHoursWorks()", $t.Line = "788", $t));
                    t.Fixture.SetUtcHoursWorks();
                },
                SetUtcMinutesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUtcMinutesWorks()", $t.Line = "796", $t));
                    t.Fixture.SetUtcMinutesWorks();
                },
                SetUtcSecondsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUtcSecondsWorks()", $t.Line = "804", $t));
                    t.Fixture.SetUtcSecondsWorks();
                },
                SetUtcMillisecondsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUtcMillisecondsWorks()", $t.Line = "812", $t));
                    t.Fixture.SetUtcMillisecondsWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "820", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "829", $t));
                    t.Fixture.EqualsWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.SimpleTypes.DateTests", $t.File = "Batch4\\SimpleTypes\\JsDateTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTimeFormatInfoTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DateTimeFormatInfoTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DateTimeFormatInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTimeFormatInfoTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                GetFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DateTimeFormatInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTimeFormatInfoTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetFormatWorks()", $t.Line = "20", $t));
                    t.Fixture.GetFormatWorks();
                },
                InvariantWorks_SPI_1562: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DateTimeFormatInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DateTimeFormatInfoTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvariantWorks_SPI_1562()", $t.Line = "28", $t));
                    t.Fixture.InvariantWorks_SPI_1562();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.DateTimeFormatInfoTests", $t.File = "Batch4\\DateTimeFormatInfoTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1717: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1717()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1717();
                },
                DefaultValueIsDecimal0: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueIsDecimal0()", $t.Line = "49", $t));
                    t.Fixture.DefaultValueIsDecimal0();
                },
                CreatingInstanceReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsZero()", $t.Line = "55", $t));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                LiteralDecimalsWork_SPI_1590: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiteralDecimalsWork_SPI_1590()", $t.Line = "61", $t));
                    t.Fixture.LiteralDecimalsWork_SPI_1590();
                },
                ConstantsWork_SPI_1590: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWork_SPI_1590()", $t.Line = "72", $t));
                    t.Fixture.ConstantsWork_SPI_1590();
                },
                DefaultConstructorReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsZero()", $t.Line = "83", $t));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                ConvertingConstructorsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConvertingConstructorsWork()", $t.Line = "89", $t));
                    t.Fixture.ConvertingConstructorsWork();
                },
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "100", $t));
                    t.Fixture.FormatWorks();
                },
                ToStringWithFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatWorks()", $t.Line = "106", $t));
                    t.Fixture.ToStringWithFormatWorks();
                },
                ToStringWithFormatAndProviderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatAndProviderWorks()", $t.Line = "112", $t));
                    t.Fixture.ToStringWithFormatAndProviderWorks();
                },
                IFormattableToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks()", $t.Line = "118", $t));
                    t.Fixture.IFormattableToStringWorks();
                },
                ToStringWithoutRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithoutRadixWorks()", $t.Line = "131", $t));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                ConversionsToDecimalWork_SPI_1580: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConversionsToDecimalWork_SPI_1580()", $t.Line = "137", $t));
                    t.Fixture.ConversionsToDecimalWork_SPI_1580();
                },
                NullableConversionsToDecimalWork_SPI_1580_1581_1587: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullableConversionsToDecimalWork_SPI_1580_1581_1587()", $t.Line = "172", $t));
                    t.Fixture.NullableConversionsToDecimalWork_SPI_1580_1581_1587();
                },
                DecimalToSByte_SPI_1580: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DecimalToSByte_SPI_1580()", $t.Line = "266", $t));
                    t.Fixture.DecimalToSByte_SPI_1580();
                },
                DecimalToByte_SPI_1580: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DecimalToByte_SPI_1580()", $t.Line = "295", $t));
                    t.Fixture.DecimalToByte_SPI_1580();
                },
                DecimalToShort_SPI_1580: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DecimalToShort_SPI_1580()", $t.Line = "324", $t));
                    t.Fixture.DecimalToShort_SPI_1580();
                },
                DecimalToUShort_SPI_1580: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DecimalToUShort_SPI_1580()", $t.Line = "353", $t));
                    t.Fixture.DecimalToUShort_SPI_1580();
                },
                DecimalToChar: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DecimalToChar()", $t.Line = "382", $t));
                    t.Fixture.DecimalToChar();
                },
                DecimalToInt_SPI_1580: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DecimalToInt_SPI_1580()", $t.Line = "398", $t));
                    t.Fixture.DecimalToInt_SPI_1580();
                },
                DecimalToUInt_SPI_1580: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DecimalToUInt_SPI_1580()", $t.Line = "427", $t));
                    t.Fixture.DecimalToUInt_SPI_1580();
                },
                DecimalToLong_SPI_1578: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DecimalToLong_SPI_1578()", $t.Line = "456", $t));
                    t.Fixture.DecimalToLong_SPI_1578();
                },
                DecimalToULong_SPI_1584_1585: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DecimalToULong_SPI_1584_1585()", $t.Line = "468", $t));
                    t.Fixture.DecimalToULong_SPI_1584_1585();
                },
                DecimalToFloat: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DecimalToFloat()", $t.Line = "502", $t));
                    t.Fixture.DecimalToFloat();
                },
                DecimalToDouble: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DecimalToDouble()", $t.Line = "510", $t));
                    t.Fixture.DecimalToDouble();
                },
                NullableDecimalToSByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullableDecimalToSByte()", $t.Line = "518", $t));
                    t.Fixture.NullableDecimalToSByte();
                },
                NullableDecimalToByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullableDecimalToByte()", $t.Line = "549", $t));
                    t.Fixture.NullableDecimalToByte();
                },
                NullableDecimalToShort: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullableDecimalToShort()", $t.Line = "580", $t));
                    t.Fixture.NullableDecimalToShort();
                },
                NullableDecimalToUShort: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullableDecimalToUShort()", $t.Line = "611", $t));
                    t.Fixture.NullableDecimalToUShort();
                },
                NullableDecimalToChar: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullableDecimalToChar()", $t.Line = "642", $t));
                    t.Fixture.NullableDecimalToChar();
                },
                NullableDecimalToInt: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullableDecimalToInt()", $t.Line = "673", $t));
                    t.Fixture.NullableDecimalToInt();
                },
                NullableDecimalToUInt: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullableDecimalToUInt()", $t.Line = "704", $t));
                    t.Fixture.NullableDecimalToUInt();
                },
                NullableDecimalToLong_SPI_1582: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullableDecimalToLong_SPI_1582()", $t.Line = "735", $t));
                    t.Fixture.NullableDecimalToLong_SPI_1582();
                },
                NullableDecimalToULong_SPI_1582: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullableDecimalToULong_SPI_1582()", $t.Line = "752", $t));
                    t.Fixture.NullableDecimalToULong_SPI_1582();
                },
                NullableDecimalToFloat_SPI_1579: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullableDecimalToFloat_SPI_1579()", $t.Line = "777", $t));
                    t.Fixture.NullableDecimalToFloat_SPI_1579();
                },
                NullableDecimalToDouble_SPI_1579: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullableDecimalToDouble_SPI_1579()", $t.Line = "800", $t));
                    t.Fixture.NullableDecimalToDouble_SPI_1579();
                },
                OperatorsWork_SPI_1583: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "OperatorsWork_SPI_1583()", $t.Line = "821", $t));
                    t.Fixture.OperatorsWork_SPI_1583();
                },
                LiftedOperatorsWork_SPI_1583: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedOperatorsWork_SPI_1583()", $t.Line = "867", $t));
                    t.Fixture.LiftedOperatorsWork_SPI_1583();
                },
                AddWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddWorks()", $t.Line = "959", $t));
                    t.Fixture.AddWorks();
                },
                CeilingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CeilingWorks()", $t.Line = "965", $t));
                    t.Fixture.CeilingWorks();
                },
                DivideWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DivideWorks()", $t.Line = "973", $t));
                    t.Fixture.DivideWorks();
                },
                FloorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FloorWorks()", $t.Line = "979", $t));
                    t.Fixture.FloorWorks();
                },
                RemainderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemainderWorks()", $t.Line = "987", $t));
                    t.Fixture.RemainderWorks();
                },
                MultiplyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MultiplyWorks()", $t.Line = "993", $t));
                    t.Fixture.MultiplyWorks();
                },
                NegateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NegateWorks()", $t.Line = "999", $t));
                    t.Fixture.NegateWorks();
                },
                ParseWorks_SPI_1586: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks_SPI_1586()", $t.Line = "1005", $t));
                    t.Fixture.ParseWorks_SPI_1586();
                },
                TryParseWorks_SPI_1586: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseWorks_SPI_1586()", $t.Line = "1029", $t));
                    t.Fixture.TryParseWorks_SPI_1586();
                },
                RoundWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundWorks()", $t.Line = "1080", $t));
                    t.Fixture.RoundWorks();
                },
                RoundWithDecimalsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundWithDecimalsWorks()", $t.Line = "1087", $t));
                    t.Fixture.RoundWithDecimalsWorks();
                },
                RoundWithMidpointRoundingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundWithMidpointRoundingWorks()", $t.Line = "1095", $t));
                    t.Fixture.RoundWithMidpointRoundingWorks();
                },
                RoundWithDecimalsAndMidpointRoundingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundWithDecimalsAndMidpointRoundingWorks()", $t.Line = "1104", $t));
                    t.Fixture.RoundWithDecimalsAndMidpointRoundingWorks();
                },
                TruncateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TruncateWorks()", $t.Line = "1117", $t));
                    t.Fixture.TruncateWorks();
                },
                SubtractWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubtractWorks()", $t.Line = "1125", $t));
                    t.Fixture.SubtractWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "1131", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "1140", $t));
                    t.Fixture.EqualsWorks();
                },
                StaticEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticEqualsWorks()", $t.Line = "1149", $t));
                    t.Fixture.StaticEqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "1158", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "1172", $t));
                    t.Fixture.CompareToWorks();
                },
                StaticCompareWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticCompareWorks()", $t.Line = "1181", $t));
                    t.Fixture.StaticCompareWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "1190", $t));
                    t.Fixture.IComparableCompareToWorks();
                },
                ImplementationTests_SPI_1588_1590_1650: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ImplementationTests_SPI_1588_1590_1650()", $t.Line = "1199", $t));
                    t.Fixture.ImplementationTests_SPI_1588_1590_1650();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests", $t.File = "Batch4\\SimpleTypes\\DecimalTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "31", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                CreatingAndInvokingADelegateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingAndInvokingADelegateWorks()", $t.Line = "48", $t));
                    t.Fixture.CreatingAndInvokingADelegateWorks();
                },
                CreateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateWorks()", $t.Line = "60", $t));
                    t.Fixture.CreateWorks();
                },
                CombineWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CombineWorks()", $t.Line = "70", $t));
                    t.Fixture.CombineWorks();
                },
                CombineDoesAddsDuplicateDelegates: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CombineDoesAddsDuplicateDelegates()", $t.Line = "79", $t));
                    t.Fixture.CombineDoesAddsDuplicateDelegates();
                },
                CombineDoesNotAffectOriginal_SPI_1563: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CombineDoesNotAffectOriginal_SPI_1563()", $t.Line = "92", $t));
                    t.Fixture.CombineDoesNotAffectOriginal_SPI_1563();
                },
                AddWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddWorks()", $t.Line = "109", $t));
                    t.Fixture.AddWorks();
                },
                AddAssignWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddAssignWorks()", $t.Line = "118", $t));
                    t.Fixture.AddAssignWorks();
                },
                RemoveWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveWorks()", $t.Line = "128", $t));
                    t.Fixture.RemoveWorks();
                },
                RemoveDoesNotAffectOriginal_SPI_1563: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveDoesNotAffectOriginal_SPI_1563()", $t.Line = "139", $t));
                    t.Fixture.RemoveDoesNotAffectOriginal_SPI_1563();
                },
                SubtractingDelegateFromItselfReturnsNull: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubtractingDelegateFromItselfReturnsNull()", $t.Line = "161", $t));
                    t.Fixture.SubtractingDelegateFromItselfReturnsNull();
                },
                RemoveWorksWithMethodGroupConversion_SPI_1563: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveWorksWithMethodGroupConversion_SPI_1563()", $t.Line = "175", $t));
                    t.Fixture.RemoveWorksWithMethodGroupConversion_SPI_1563();
                },
                SubtractWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubtractWorks()", $t.Line = "191", $t));
                    t.Fixture.SubtractWorks();
                },
                SubtractAssignWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubtractAssignWorks()", $t.Line = "202", $t));
                    t.Fixture.SubtractAssignWorks();
                },
                CloneWorks_SPI_1563: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CloneWorks_SPI_1563()", $t.Line = "213", $t));
                    t.Fixture.CloneWorks_SPI_1563();
                },
                CloningDelegateToADifferentTypeIsANoOp: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CloningDelegateToADifferentTypeIsANoOp()", $t.Line = "249", $t));
                    t.Fixture.CloningDelegateToADifferentTypeIsANoOp();
                },
                CloningDelegateToTheSameTypeCreatesANewClone_SPI_1563: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CloningDelegateToTheSameTypeCreatesANewClone_SPI_1563()", $t.Line = "259", $t));
                    t.Fixture.CloningDelegateToTheSameTypeCreatesANewClone_SPI_1563();
                },
                EqualityAndInequalityOperatorsAndEqualsMethod_SPI_1563: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualityAndInequalityOperatorsAndEqualsMethod_SPI_1563()", $t.Line = "291", $t));
                    t.Fixture.EqualityAndInequalityOperatorsAndEqualsMethod_SPI_1563();
                },
                GetInvocationListWorksForImportedFunction_SPI_1563: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetInvocationListWorksForImportedFunction_SPI_1563()", $t.Line = "340", $t));
                    t.Fixture.GetInvocationListWorksForImportedFunction_SPI_1563();
                },
                GetInvocationListWorksForMulticastDelegate: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetInvocationListWorksForMulticastDelegate()", $t.Line = "353", $t));
                    t.Fixture.GetInvocationListWorksForMulticastDelegate();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.DelegateTests", $t.File = "Batch4\\DelegateTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DivideByZeroExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.DivideByZeroExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.DivideByZeroExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DivideByZeroExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "9", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.DivideByZeroExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DivideByZeroExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "23", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.DivideByZeroExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DivideByZeroExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "32", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.DivideByZeroExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DivideByZeroExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "41", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Exceptions.DivideByZeroExceptionTests", $t.File = "Batch4\\Exceptions\\DivideByZeroExceptionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1717: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1717()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1717();
                },
                DefaultValueIs0: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueIs0()", $t.Line = "37", $t));
                    t.Fixture.DefaultValueIs0();
                },
                CreatingInstanceReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsZero()", $t.Line = "43", $t));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                ConstantsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWork()", $t.Line = "49", $t));
                    t.Fixture.ConstantsWork();
                },
                DefaultConstructorReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsZero()", $t.Line = "63", $t));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "69", $t));
                    t.Fixture.FormatWorks();
                },
                ToStringWithFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatWorks()", $t.Line = "75", $t));
                    t.Fixture.ToStringWithFormatWorks();
                },
                ToStringWithFormatAndProviderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatAndProviderWorks()", $t.Line = "81", $t));
                    t.Fixture.ToStringWithFormatAndProviderWorks();
                },
                IFormattableToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks()", $t.Line = "87", $t));
                    t.Fixture.IFormattableToStringWorks();
                },
                ToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWorks()", $t.Line = "100", $t));
                    t.Fixture.ToStringWorks();
                },
                ToExponentialWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToExponentialWorks()", $t.Line = "106", $t));
                    t.Fixture.ToExponentialWorks();
                },
                ToExponentialWithFractionalDigitsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToExponentialWithFractionalDigitsWorks()", $t.Line = "112", $t));
                    t.Fixture.ToExponentialWithFractionalDigitsWorks();
                },
                ToFixed: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToFixed()", $t.Line = "118", $t));
                    t.Fixture.ToFixed();
                },
                ToFixedWithFractionalDigitsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToFixedWithFractionalDigitsWorks()", $t.Line = "124", $t));
                    t.Fixture.ToFixedWithFractionalDigitsWorks();
                },
                ToPrecisionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToPrecisionWorks()", $t.Line = "130", $t));
                    t.Fixture.ToPrecisionWorks();
                },
                ToPrecisionWithPrecisionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToPrecisionWithPrecisionWorks()", $t.Line = "136", $t));
                    t.Fixture.ToPrecisionWithPrecisionWorks();
                },
                IsPositiveInfinityWorks_SPI_1600: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsPositiveInfinityWorks_SPI_1600()", $t.Line = "142", $t));
                    t.Fixture.IsPositiveInfinityWorks_SPI_1600();
                },
                IsNegativeInfinityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsNegativeInfinityWorks()", $t.Line = "154", $t));
                    t.Fixture.IsNegativeInfinityWorks();
                },
                IsInfinityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsInfinityWorks()", $t.Line = "164", $t));
                    t.Fixture.IsInfinityWorks();
                },
                IsFiniteWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsFiniteWorks()", $t.Line = "174", $t));
                    t.Fixture.IsFiniteWorks();
                },
                IsNaNWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsNaNWorks()", $t.Line = "183", $t));
                    t.Fixture.IsNaNWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "192", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "201", $t));
                    t.Fixture.EqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "210", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "224", $t));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "233", $t));
                    t.Fixture.IComparableCompareToWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests", $t.File = "Batch4\\SimpleTypes\\DoubleTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.EnvironmentTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.EnvironmentTests)],
        statics: {
            methods: {
                NewLineIsAStringContainingOnlyTheNewLineChar: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NewLineIsAStringContainingOnlyTheNewLineChar()", $t.Line = "9", $t));
                    t.Fixture.NewLineIsAStringContainingOnlyTheNewLineChar();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.EnvironmentTests", $t.File = "Batch4\\EnvironmentTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.EqualityComparerTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.EqualityComparerTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1546: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.EqualityComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.EqualityComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1546()", $t.Line = "27", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1546();
                },
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.EqualityComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.EqualityComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "34", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultComparerCanGetHashCodeOfNumber: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.EqualityComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.EqualityComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultComparerCanGetHashCodeOfNumber()", $t.Line = "45", $t));
                    t.Fixture.DefaultComparerCanGetHashCodeOfNumber();
                },
                DefaultComparerReturnsZeroAsHashCodeForNullAndUndefined: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.EqualityComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.EqualityComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultComparerReturnsZeroAsHashCodeForNullAndUndefined()", $t.Line = "51", $t));
                    t.Fixture.DefaultComparerReturnsZeroAsHashCodeForNullAndUndefined();
                },
                DefaultComparerCanDetermineEquality: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.EqualityComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.EqualityComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultComparerCanDetermineEquality()", $t.Line = "58", $t));
                    t.Fixture.DefaultComparerCanDetermineEquality();
                },
                DefaultComparerInvokesOverriddenGetHashCode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.EqualityComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.EqualityComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultComparerInvokesOverriddenGetHashCode()", $t.Line = "69", $t));
                    t.Fixture.DefaultComparerInvokesOverriddenGetHashCode();
                },
                DefaultComparerInvokesOverriddenEquals: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.EqualityComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.EqualityComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultComparerInvokesOverriddenEquals()", $t.Line = "78", $t));
                    t.Fixture.DefaultComparerInvokesOverriddenEquals();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Collections.Generic.EqualityComparerTests", $t.File = "Batch4\\Collections\\Generic\\EqualityComparerTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ErrorExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ErrorExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1564: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ErrorExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ErrorExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1564()", $t.Line = "9", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1564();
                },
                ErrorOnlyConstructorWorks_SPI_1564: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ErrorExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ErrorExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ErrorOnlyConstructorWorks_SPI_1564()", $t.Line = "30", $t));
                    t.Fixture.ErrorOnlyConstructorWorks_SPI_1564();
                },
                ErrorAndMessageAndInnerExceptionConstructorWorks_SPI_1564: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ErrorExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ErrorExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ErrorAndMessageAndInnerExceptionConstructorWorks_SPI_1564()", $t.Line = "62", $t));
                    t.Fixture.ErrorAndMessageAndInnerExceptionConstructorWorks_SPI_1564();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Exceptions.ErrorExceptionTests", $t.File = "Batch4\\Exceptions\\JsErrorExceptionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "37", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks_SPI_1669: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks_SPI_1669()", $t.Line = "50", $t));
                    t.Fixture.DefaultConstructorWorks_SPI_1669();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "61", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "71", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                MessagePropertyCanBeOverridden: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MessagePropertyCanBeOverridden()", $t.Line = "82", $t));
                    t.Fixture.MessagePropertyCanBeOverridden();
                },
                InnerExceptionPropertyCanBeOverridden: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InnerExceptionPropertyCanBeOverridden()", $t.Line = "89", $t));
                    t.Fixture.InnerExceptionPropertyCanBeOverridden();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Exceptions.ExceptionTests", $t.File = "Batch4\\Exceptions\\ExceptionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests)],
        statics: {
            methods: {
                ExpressionProtectedConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExpressionProtectedConstructorWorks()", $t.Line = "336", $t));
                    t.Fixture.ExpressionProtectedConstructorWorks();
                },
                SimpleExpressionTreeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SimpleExpressionTreeWorks()", $t.Line = "344", $t));
                    t.Fixture.SimpleExpressionTreeWorks();
                },
                LambdaWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LambdaWorks()", $t.Line = "356", $t));
                    t.Fixture.LambdaWorks();
                },
                ParameterAndVariableWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParameterAndVariableWork()", $t.Line = "392", $t));
                    t.Fixture.ParameterAndVariableWork();
                },
                ConstantWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantWorks()", $t.Line = "419", $t));
                    t.Fixture.ConstantWorks();
                },
                BinaryExpressionsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryExpressionsWork()", $t.Line = "442", $t));
                    t.Fixture.BinaryExpressionsWork();
                },
                UnaryExpressionsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UnaryExpressionsWork()", $t.Line = "717", $t));
                    t.Fixture.UnaryExpressionsWork();
                },
                ArrayLengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayLengthWorks()", $t.Line = "834", $t));
                    t.Fixture.ArrayLengthWorks();
                },
                ConversionsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConversionsWork()", $t.Line = "853", $t));
                    t.Fixture.ConversionsWork();
                },
                ArrayIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayIndexWorks()", $t.Line = "908", $t));
                    t.Fixture.ArrayIndexWorks();
                },
                MultiDimensionalArrayIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MultiDimensionalArrayIndexWorks()", $t.Line = "929", $t));
                    t.Fixture.MultiDimensionalArrayIndexWorks();
                },
                ConditionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConditionWorks()", $t.Line = "963", $t));
                    t.Fixture.ConditionWorks();
                },
                CallWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CallWorks()", $t.Line = "986", $t));
                    t.Fixture.CallWorks();
                },
                MethodGroupConversionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MethodGroupConversionWorks()", $t.Line = "1037", $t));
                    t.Fixture.MethodGroupConversionWorks();
                },
                InvokeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeWorks()", $t.Line = "1059", $t));
                    t.Fixture.InvokeWorks();
                },
                ArrayCreationWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayCreationWorks()", $t.Line = "1085", $t));
                    t.Fixture.ArrayCreationWorks();
                },
                PropertiesAndFieldsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesAndFieldsWork()", $t.Line = "1147", $t));
                    t.Fixture.PropertiesAndFieldsWork();
                },
                IndexersWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexersWork()", $t.Line = "1202", $t));
                    t.Fixture.IndexersWork();
                },
                IndexExpressionsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexExpressionsWork()", $t.Line = "1218", $t));
                    t.Fixture.IndexExpressionsWork();
                },
                ObjectConstructionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ObjectConstructionWorks()", $t.Line = "1254", $t));
                    t.Fixture.ObjectConstructionWorks();
                },
                AnonymousTypeConstructionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AnonymousTypeConstructionWorks()", $t.Line = "1297", $t));
                    t.Fixture.AnonymousTypeConstructionWorks();
                },
                TransparentIdentifiersWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TransparentIdentifiersWork()", $t.Line = "1352", $t));
                    t.Fixture.TransparentIdentifiersWork();
                },
                NewExpressionWithMembersWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NewExpressionWithMembersWork()", $t.Line = "1395", $t));
                    t.Fixture.NewExpressionWithMembersWork();
                },
                BindWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BindWorks()", $t.Line = "1425", $t));
                    t.Fixture.BindWorks();
                },
                ElementInitWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ElementInitWorks()", $t.Line = "1470", $t));
                    t.Fixture.ElementInitWorks();
                },
                ListBindWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ListBindWorks()", $t.Line = "1502", $t));
                    t.Fixture.ListBindWorks();
                },
                MemberBindWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemberBindWorks()", $t.Line = "1567", $t));
                    t.Fixture.MemberBindWorks();
                },
                MemberInitWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemberInitWorks()", $t.Line = "1629", $t));
                    t.Fixture.MemberInitWorks();
                },
                ListInitWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ListInitWorks()", $t.Line = "1665", $t));
                    t.Fixture.ListInitWorks();
                },
                TypeIsAndTypeEqualWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeIsAndTypeEqualWork()", $t.Line = "1719", $t));
                    t.Fixture.TypeIsAndTypeEqualWork();
                },
                QuoteWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "QuoteWorks()", $t.Line = "1747", $t));
                    t.Fixture.QuoteWorks();
                },
                LocalVariableReferenceWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LocalVariableReferenceWorks()", $t.Line = "1772", $t));
                    t.Fixture.LocalVariableReferenceWorks();
                },
                ThrowAndRethrowWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ThrowAndRethrowWork()", $t.Line = "1824", $t));
                    t.Fixture.ThrowAndRethrowWork();
                },
                DefaultAndEmptyWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultAndEmptyWork()", $t.Line = "1856", $t));
                    t.Fixture.DefaultAndEmptyWork();
                },
                BlockWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BlockWorks()", $t.Line = "1873", $t));
                    t.Fixture.BlockWorks();
                },
                IfThenWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IfThenWorks()", $t.Line = "1932", $t));
                    t.Fixture.IfThenWorks();
                },
                LabelTargetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LabelTargetWorks()", $t.Line = "1960", $t));
                    t.Fixture.LabelTargetWorks();
                },
                GotoWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GotoWorks()", $t.Line = "1978", $t));
                    t.Fixture.GotoWorks();
                },
                LabelExpressionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LabelExpressionWorks()", $t.Line = "2030", $t));
                    t.Fixture.LabelExpressionWorks();
                },
                LoopWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LoopWorks()", $t.Line = "2061", $t));
                    t.Fixture.LoopWorks();
                },
                SwitchCaseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SwitchCaseWorks()", $t.Line = "2104", $t));
                    t.Fixture.SwitchCaseWorks();
                },
                SwitchWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SwitchWorks()", $t.Line = "2125", $t));
                    t.Fixture.SwitchWorks();
                },
                CatchBlockWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CatchBlockWorks()", $t.Line = "2170", $t));
                    t.Fixture.CatchBlockWorks();
                },
                TryWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryWorks()", $t.Line = "2200", $t));
                    t.Fixture.TryWorks();
                },
                DynamicWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DynamicWorks()", $t.Line = "2246", $t));
                    t.Fixture.DynamicWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests", $t.File = "Batch4\\Linq\\Expressions\\ExpressionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1559()", $t.Line = "29", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1559();
                },
                LengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthConstructorWorks()", $t.Line = "54", $t));
                    t.Fixture.LengthConstructorWorks();
                },
                ConstructorFromIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorFromIntWorks()", $t.Line = "62", $t));
                    t.Fixture.ConstructorFromIntWorks();
                },
                CopyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyConstructorWorks()", $t.Line = "72", $t));
                    t.Fixture.CopyConstructorWorks();
                },
                ArrayBufferConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferConstructorWorks()", $t.Line = "82", $t));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetConstructorWorks()", $t.Line = "92", $t));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetAndLengthConstructorWorks()", $t.Line = "102", $t));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                StaticBytesPerElementWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticBytesPerElementWorks()", $t.Line = "119", $t));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                LengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthWorks()", $t.Line = "125", $t));
                    t.Fixture.LengthWorks();
                },
                IndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexingWorks()", $t.Line = "132", $t));
                    t.Fixture.IndexingWorks();
                },
                SetFloat32ArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetFloat32ArrayWorks()", $t.Line = "141", $t));
                    t.Fixture.SetFloat32ArrayWorks();
                },
                SetFloat32ArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetFloat32ArrayWithOffsetWorks()", $t.Line = "149", $t));
                    t.Fixture.SetFloat32ArrayWithOffsetWorks();
                },
                SetNormalArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWorks()", $t.Line = "157", $t));
                    t.Fixture.SetNormalArrayWorks();
                },
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWithOffsetWorks()", $t.Line = "165", $t));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                SubarrayWithBeginWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginWorks()", $t.Line = "173", $t));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginAndEndWorks()", $t.Line = "183", $t));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                BufferPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BufferPropertyWorks()", $t.Line = "194", $t));
                    t.Fixture.BufferPropertyWorks();
                },
                ByteOffsetPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteOffsetPropertyWorks()", $t.Line = "202", $t));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                ByteLengthPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteLengthPropertyWorks()", $t.Line = "210", $t));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                IndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWorks()", $t.Line = "217", $t));
                    t.Fixture.IndexOfWorks();
                },
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "226", $t));
                    t.Fixture.ContainsWorks();
                },
                ForeachWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks_SPI_1401()", $t.Line = "235", $t));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumeratorWorks_SPI_1401()", $t.Line = "249", $t));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEnumerableGetEnumeratorWorks()", $t.Line = "263", $t));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                ICollectionMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionMethodsWork_SPI_1559()", $t.Line = "276", $t));
                    t.Fixture.ICollectionMethodsWork_SPI_1559();
                },
                IListMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListMethodsWork_SPI_1559()", $t.Line = "289", $t));
                    t.Fixture.IListMethodsWork_SPI_1559();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests", $t.File = "Batch4\\Collections\\TypedArrays\\Float32ArrayTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1559()", $t.Line = "29", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1559();
                },
                LengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthConstructorWorks()", $t.Line = "55", $t));
                    t.Fixture.LengthConstructorWorks();
                },
                ConstructorFromIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorFromIntWorks()", $t.Line = "63", $t));
                    t.Fixture.ConstructorFromIntWorks();
                },
                CopyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyConstructorWorks()", $t.Line = "73", $t));
                    t.Fixture.CopyConstructorWorks();
                },
                ArrayBufferConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferConstructorWorks()", $t.Line = "83", $t));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetConstructorWorks()", $t.Line = "93", $t));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetAndLengthConstructorWorks()", $t.Line = "103", $t));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                StaticBytesPerElementWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticBytesPerElementWorks()", $t.Line = "120", $t));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                LengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthWorks()", $t.Line = "126", $t));
                    t.Fixture.LengthWorks();
                },
                IndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexingWorks()", $t.Line = "133", $t));
                    t.Fixture.IndexingWorks();
                },
                SetFloat64ArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetFloat64ArrayWorks()", $t.Line = "142", $t));
                    t.Fixture.SetFloat64ArrayWorks();
                },
                SetFloat64ArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetFloat64ArrayWithOffsetWorks()", $t.Line = "150", $t));
                    t.Fixture.SetFloat64ArrayWithOffsetWorks();
                },
                SetNormalArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWorks()", $t.Line = "158", $t));
                    t.Fixture.SetNormalArrayWorks();
                },
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWithOffsetWorks()", $t.Line = "166", $t));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                SubarrayWithBeginWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginWorks()", $t.Line = "174", $t));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginAndEndWorks()", $t.Line = "184", $t));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                BufferPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BufferPropertyWorks()", $t.Line = "195", $t));
                    t.Fixture.BufferPropertyWorks();
                },
                ByteOffsetPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteOffsetPropertyWorks()", $t.Line = "203", $t));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                ByteLengthPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteLengthPropertyWorks()", $t.Line = "211", $t));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                IndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWorks()", $t.Line = "218", $t));
                    t.Fixture.IndexOfWorks();
                },
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "227", $t));
                    t.Fixture.ContainsWorks();
                },
                ForeachWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks_SPI_1401()", $t.Line = "236", $t));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumeratorWorks_SPI_1401()", $t.Line = "250", $t));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEnumerableGetEnumeratorWorks()", $t.Line = "264", $t));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                ICollectionMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionMethodsWork_SPI_1559()", $t.Line = "277", $t));
                    t.Fixture.ICollectionMethodsWork_SPI_1559();
                },
                IListMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListMethodsWork_SPI_1559()", $t.Line = "290", $t));
                    t.Fixture.IListMethodsWork_SPI_1559();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests", $t.File = "Batch4\\Collections\\TypedArrays\\Float64ArrayTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormatExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.FormatExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.FormatExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormatExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "9", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.FormatExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormatExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "23", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.FormatExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormatExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "32", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.FormatExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormatExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "41", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Exceptions.FormatExceptionTests", $t.File = "Batch4\\Exceptions\\FormatExceptionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormattableStringTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.FormattableStringTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormattableStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "28", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                ArgumentCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormattableStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArgumentCountWorks()", $t.Line = "42", $t));
                    t.Fixture.ArgumentCountWorks();
                },
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormattableStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "51", $t));
                    t.Fixture.FormatWorks();
                },
                GetArgumentWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormattableStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetArgumentWorks()", $t.Line = "58", $t));
                    t.Fixture.GetArgumentWorks();
                },
                GetArgumentsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormattableStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetArgumentsWorks()", $t.Line = "66", $t));
                    t.Fixture.GetArgumentsWorks();
                },
                ArrayReturnedByGetArgumentsCanBeModified: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormattableStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayReturnedByGetArgumentsCanBeModified()", $t.Line = "75", $t));
                    t.Fixture.ArrayReturnedByGetArgumentsCanBeModified();
                },
                ToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormattableStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWorks()", $t.Line = "87", $t));
                    t.Fixture.ToStringWorks();
                },
                ToStringWithFormatProviderWorks_SPI_1651: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormattableStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatProviderWorks_SPI_1651()", $t.Line = "95", $t));
                    t.Fixture.ToStringWithFormatProviderWorks_SPI_1651();
                },
                IFormattableToStringWorks_SPI_1633_1651: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormattableStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks_SPI_1633_1651()", $t.Line = "104", $t));
                    t.Fixture.IFormattableToStringWorks_SPI_1633_1651();
                },
                InvariantWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.FormattableStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvariantWorks()", $t.Line = "113", $t));
                    t.Fixture.InvariantWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.FormattableStringTests", $t.File = "Batch4\\FormattableStringTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "23", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks_SPI_1549: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks_SPI_1549()", $t.Line = "36", $t));
                    t.Fixture.DefaultConstructorWorks_SPI_1549();
                },
                CapacityConstructorWorks_SPI_1549: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CapacityConstructorWorks_SPI_1549()", $t.Line = "46", $t));
                    t.Fixture.CapacityConstructorWorks_SPI_1549();
                },
                CapacityAndEqualityComparerWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CapacityAndEqualityComparerWorks()", $t.Line = "56", $t));
                    t.Fixture.CapacityAndEqualityComparerWorks();
                },
                CopyConstructorWorks_SPI_1549: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyConstructorWorks_SPI_1549()", $t.Line = "101", $t));
                    t.Fixture.CopyConstructorWorks_SPI_1549();
                },
                EqualityComparerOnlyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualityComparerOnlyConstructorWorks()", $t.Line = "119", $t));
                    t.Fixture.EqualityComparerOnlyConstructorWorks();
                },
                ConstructorWithBothDictionaryAndEqualityComparerWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithBothDictionaryAndEqualityComparerWorks()", $t.Line = "128", $t));
                    t.Fixture.ConstructorWithBothDictionaryAndEqualityComparerWorks();
                },
                CountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CountWorks()", $t.Line = "145", $t));
                    t.Fixture.CountWorks();
                },
                KeysWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "KeysWorks()", $t.Line = "156", $t));
                    t.Fixture.KeysWorks();
                },
                ValuesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ValuesWorks()", $t.Line = "180", $t));
                    t.Fixture.ValuesWorks();
                },
                IndexerGetterWorksForExistingItems: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexerGetterWorksForExistingItems()", $t.Line = "204", $t));
                    t.Fixture.IndexerGetterWorksForExistingItems();
                },
                IndexerSetterWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexerSetterWorks()", $t.Line = "211", $t));
                    t.Fixture.IndexerSetterWorks();
                },
                IndexerGetterThrowsForNonExistingItems: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexerGetterThrowsForNonExistingItems()", $t.Line = "223", $t));
                    t.Fixture.IndexerGetterThrowsForNonExistingItems();
                },
                AddWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddWorks()", $t.Line = "237", $t));
                    t.Fixture.AddWorks();
                },
                AddThrowsIfItemAlreadyExists: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddThrowsIfItemAlreadyExists()", $t.Line = "248", $t));
                    t.Fixture.AddThrowsIfItemAlreadyExists();
                },
                ClearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClearWorks()", $t.Line = "262", $t));
                    t.Fixture.ClearWorks();
                },
                ContainsKeyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsKeyWorks()", $t.Line = "270", $t));
                    t.Fixture.ContainsKeyWorks();
                },
                EnumeratingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EnumeratingWorks()", $t.Line = "278", $t));
                    t.Fixture.EnumeratingWorks();
                },
                RemoveWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveWorks()", $t.Line = "302", $t));
                    t.Fixture.RemoveWorks();
                },
                TryGetValueWithIntKeysWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetValueWithIntKeysWorks()", $t.Line = "312", $t));
                    t.Fixture.TryGetValueWithIntKeysWorks();
                },
                TryGetValueWithObjectKeysWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetValueWithObjectKeysWorks()", $t.Line = "324", $t));
                    t.Fixture.TryGetValueWithObjectKeysWorks();
                },
                CanUseCustomComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanUseCustomComparer()", $t.Line = "336", $t));
                    t.Fixture.CanUseCustomComparer();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests", $t.File = "Batch4\\Collections\\Generic\\GenericDictionaryTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests)],
        statics: {
            methods: {
                GetMembersWithoutBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMembersWithoutBindingFlagsWorks()", $t.Line = "917", $t));
                    t.Fixture.GetMembersWithoutBindingFlagsWorks();
                },
                GetMembersWorksForInterface: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMembersWorksForInterface()", $t.Line = "927", $t));
                    t.Fixture.GetMembersWorksForInterface();
                },
                GetMembersWithBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMembersWithBindingFlagsWorks()", $t.Line = "935", $t));
                    t.Fixture.GetMembersWithBindingFlagsWorks();
                },
                GetMemberWithNameWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMemberWithNameWorks()", $t.Line = "973", $t));
                    t.Fixture.GetMemberWithNameWorks();
                },
                GetMemberWithNameAndBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMemberWithNameAndBindingFlagsWorks()", $t.Line = "983", $t));
                    t.Fixture.GetMemberWithNameAndBindingFlagsWorks();
                },
                GetConstructorsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetConstructorsWorks()", $t.Line = "998", $t));
                    t.Fixture.GetConstructorsWorks();
                },
                GetConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetConstructorWorks()", $t.Line = "1004", $t));
                    t.Fixture.GetConstructorWorks();
                },
                GetMethodsWithoutBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMethodsWithoutBindingFlagsWorks()", $t.Line = "1012", $t));
                    t.Fixture.GetMethodsWithoutBindingFlagsWorks();
                },
                GetMethodsWithBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMethodsWithBindingFlagsWorks()", $t.Line = "1022", $t));
                    t.Fixture.GetMethodsWithBindingFlagsWorks();
                },
                GetMethodWithNameWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMethodWithNameWorks()", $t.Line = "1060", $t));
                    t.Fixture.GetMethodWithNameWorks();
                },
                GetMethodWithNameAndBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMethodWithNameAndBindingFlagsWorks()", $t.Line = "1076", $t));
                    t.Fixture.GetMethodWithNameAndBindingFlagsWorks();
                },
                GetMethodWithNameAndArgumentTypesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMethodWithNameAndArgumentTypesWorks()", $t.Line = "1104", $t));
                    t.Fixture.GetMethodWithNameAndArgumentTypesWorks();
                },
                GetMethodWithNameAndArgumentTypesAndBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMethodWithNameAndArgumentTypesAndBindingFlagsWorks()", $t.Line = "1119", $t));
                    t.Fixture.GetMethodWithNameAndArgumentTypesAndBindingFlagsWorks();
                },
                GetPropertiesWithoutBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetPropertiesWithoutBindingFlagsWorks()", $t.Line = "1139", $t));
                    t.Fixture.GetPropertiesWithoutBindingFlagsWorks();
                },
                GetPropertiesWithBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetPropertiesWithBindingFlagsWorks()", $t.Line = "1149", $t));
                    t.Fixture.GetPropertiesWithBindingFlagsWorks();
                },
                GetPropertyWithNameWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetPropertyWithNameWorks()", $t.Line = "1187", $t));
                    t.Fixture.GetPropertyWithNameWorks();
                },
                GetPropertyWithNameAndBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetPropertyWithNameAndBindingFlagsWorks()", $t.Line = "1199", $t));
                    t.Fixture.GetPropertyWithNameAndBindingFlagsWorks();
                },
                GetPropertyWithNameAndArgumentTypesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetPropertyWithNameAndArgumentTypesWorks()", $t.Line = "1219", $t));
                    t.Fixture.GetPropertyWithNameAndArgumentTypesWorks();
                },
                GetPropertyWithNameAndArgumentTypesAndBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetPropertyWithNameAndArgumentTypesAndBindingFlagsWorks()", $t.Line = "1230", $t));
                    t.Fixture.GetPropertyWithNameAndArgumentTypesAndBindingFlagsWorks();
                },
                GetFieldsWithoutBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetFieldsWithoutBindingFlagsWorks()", $t.Line = "1246", $t));
                    t.Fixture.GetFieldsWithoutBindingFlagsWorks();
                },
                GetFieldsWithBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetFieldsWithBindingFlagsWorks()", $t.Line = "1256", $t));
                    t.Fixture.GetFieldsWithBindingFlagsWorks();
                },
                GetFieldWithNameWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetFieldWithNameWorks()", $t.Line = "1294", $t));
                    t.Fixture.GetFieldWithNameWorks();
                },
                GetFieldWithNameAndBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetFieldWithNameAndBindingFlagsWorks()", $t.Line = "1304", $t));
                    t.Fixture.GetFieldWithNameAndBindingFlagsWorks();
                },
                GetEventsWithoutBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEventsWithoutBindingFlagsWorks()", $t.Line = "1321", $t));
                    t.Fixture.GetEventsWithoutBindingFlagsWorks();
                },
                GetEventsWithBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEventsWithBindingFlagsWorks()", $t.Line = "1331", $t));
                    t.Fixture.GetEventsWithBindingFlagsWorks();
                },
                GetEventWithNameWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEventWithNameWorks()", $t.Line = "1369", $t));
                    t.Fixture.GetEventWithNameWorks();
                },
                GetEventWithNameAndBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEventWithNameAndBindingFlagsWorks()", $t.Line = "1379", $t));
                    t.Fixture.GetEventWithNameAndBindingFlagsWorks();
                },
                IsOperatorForMemberInfoWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsOperatorForMemberInfoWorks()", $t.Line = "1396", $t));
                    t.Fixture.IsOperatorForMemberInfoWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Reflection.GetMembersTests", $t.File = "Batch4\\Reflection\\GetMembersTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultValueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueWorks()", $t.Line = "32", $t));
                    t.Fixture.DefaultValueWorks();
                },
                CreateInstanceWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateInstanceWorks()", $t.Line = "40", $t));
                    t.Fixture.CreateInstanceWorks();
                },
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "48", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                EmptyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EmptyWorks()", $t.Line = "56", $t));
                    t.Fixture.EmptyWorks();
                },
                ToStringWithoutArgumentsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithoutArgumentsWorks()", $t.Line = "62", $t));
                    t.Fixture.ToStringWithoutArgumentsWorks();
                },
                ByteArrayConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteArrayConstructorWorks()", $t.Line = "69", $t));
                    t.Fixture.ByteArrayConstructorWorks();
                },
                Int32Int16Int16ByteArrayConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Int32Int16Int16ByteArrayConstructorWorks()", $t.Line = "78", $t));
                    t.Fixture.Int32Int16Int16ByteArrayConstructorWorks();
                },
                Int32Int16Int16BytesConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Int32Int16Int16BytesConstructorWorks()", $t.Line = "86", $t));
                    t.Fixture.Int32Int16Int16BytesConstructorWorks();
                },
                UInt32UInt16UInt16BytesConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UInt32UInt16UInt16BytesConstructorWorks()", $t.Line = "94", $t));
                    t.Fixture.UInt32UInt16UInt16BytesConstructorWorks();
                },
                StringConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringConstructorWorks()", $t.Line = "102", $t));
                    t.Fixture.StringConstructorWorks();
                },
                ParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks()", $t.Line = "120", $t));
                    t.Fixture.ParseWorks();
                },
                ParseExactWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseExactWorks()", $t.Line = "138", $t));
                    t.Fixture.ParseExactWorks();
                },
                TryParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseWorks()", $t.Line = "159", $t));
                    t.Fixture.TryParseWorks();
                },
                TryParseExactWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseExactWorks()", $t.Line = "180", $t));
                    t.Fixture.TryParseExactWorks();
                },
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "210", $t));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "218", $t));
                    t.Fixture.IComparableCompareToWorks();
                },
                EqualsObjectWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsObjectWorks()", $t.Line = "226", $t));
                    t.Fixture.EqualsObjectWorks();
                },
                EqualsGuidWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsGuidWorks()", $t.Line = "235", $t));
                    t.Fixture.EqualsGuidWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "243", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "251", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualityOperatorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualityOperatorWorks()", $t.Line = "258", $t));
                    t.Fixture.EqualityOperatorWorks();
                },
                InequalityOperatorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InequalityOperatorWorks()", $t.Line = "265", $t));
                    t.Fixture.InequalityOperatorWorks();
                },
                ToStringWithFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatWorks()", $t.Line = "272", $t));
                    t.Fixture.ToStringWithFormatWorks();
                },
                NewGuidWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NewGuidWorks()", $t.Line = "284", $t));
                    t.Fixture.NewGuidWorks();
                },
                ToByteArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToByteArrayWorks()", $t.Line = "300", $t));
                    t.Fixture.ToByteArrayWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.GuidTests", $t.File = "Batch4\\GuidTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "95", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                ArrayImplementsICollection: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayImplementsICollection()", $t.Line = "106", $t));
                    t.Fixture.ArrayImplementsICollection();
                },
                CustomClassThatShouldImplementICollectionDoesSo: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CustomClassThatShouldImplementICollectionDoesSo()", $t.Line = "112", $t));
                    t.Fixture.CustomClassThatShouldImplementICollectionDoesSo();
                },
                ArrayCastToICollectionCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayCastToICollectionCountWorks()", $t.Line = "118", $t));
                    t.Fixture.ArrayCastToICollectionCountWorks();
                },
                ClassImplementingICollectionCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionCountWorks()", $t.Line = "124", $t));
                    t.Fixture.ClassImplementingICollectionCountWorks();
                },
                ClassImplementingICollectionCastToICollectionCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionCastToICollectionCountWorks()", $t.Line = "130", $t));
                    t.Fixture.ClassImplementingICollectionCastToICollectionCountWorks();
                },
                ClassImplementingICollectionAddWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionAddWorks()", $t.Line = "136", $t));
                    t.Fixture.ClassImplementingICollectionAddWorks();
                },
                ClassImplementingICollectionCastToICollectionAddWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionCastToICollectionAddWorks()", $t.Line = "145", $t));
                    t.Fixture.ClassImplementingICollectionCastToICollectionAddWorks();
                },
                ClassImplementingICollectionClearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionClearWorks()", $t.Line = "154", $t));
                    t.Fixture.ClassImplementingICollectionClearWorks();
                },
                ClassImplementingICollectionCastToICollectionClearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionCastToICollectionClearWorks()", $t.Line = "162", $t));
                    t.Fixture.ClassImplementingICollectionCastToICollectionClearWorks();
                },
                ArrayCastToICollectionContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayCastToICollectionContainsWorks()", $t.Line = "170", $t));
                    t.Fixture.ArrayCastToICollectionContainsWorks();
                },
                ClassImplementingICollectionContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionContainsWorks()", $t.Line = "178", $t));
                    t.Fixture.ClassImplementingICollectionContainsWorks();
                },
                ClassImplementingICollectionCastToICollectionContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionCastToICollectionContainsWorks()", $t.Line = "186", $t));
                    t.Fixture.ClassImplementingICollectionCastToICollectionContainsWorks();
                },
                ClassImplementingICollectionRemoveWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionRemoveWorks()", $t.Line = "194", $t));
                    t.Fixture.ClassImplementingICollectionRemoveWorks();
                },
                ClassImplementingICollectionCastToICollectionRemoveWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionCastToICollectionRemoveWorks()", $t.Line = "204", $t));
                    t.Fixture.ClassImplementingICollectionCastToICollectionRemoveWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests", $t.File = "Batch4\\Collections\\Generic\\ICollectionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IComparableTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.IComparableTests)],
        statics: {
            methods: {
                CallingMethodThroughIComparableInterfaceInvokesImplementingMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.IComparableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IComparableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CallingMethodThroughIComparableInterfaceInvokesImplementingMethod()", $t.Line = "21", $t));
                    t.Fixture.CallingMethodThroughIComparableInterfaceInvokesImplementingMethod();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.IComparableTests", $t.File = "Batch4\\IComparableTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IDictionaryTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "122", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                ClassImplementsInterfaces_SPI_1626: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementsInterfaces_SPI_1626()", $t.Line = "134", $t));
                    t.Fixture.ClassImplementsInterfaces_SPI_1626();
                },
                CountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CountWorks()", $t.Line = "143", $t));
                    t.Fixture.CountWorks();
                },
                KeysWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "KeysWorks()", $t.Line = "157", $t));
                    t.Fixture.KeysWorks();
                },
                GetItemWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetItemWorks()", $t.Line = "176", $t));
                    t.Fixture.GetItemWorks();
                },
                ValuesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ValuesWorks()", $t.Line = "216", $t));
                    t.Fixture.ValuesWorks();
                },
                ContainsKeyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsKeyWorks()", $t.Line = "235", $t));
                    t.Fixture.ContainsKeyWorks();
                },
                TryGetValueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetValueWorks()", $t.Line = "254", $t));
                    t.Fixture.TryGetValueWorks();
                },
                AddWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddWorks()", $t.Line = "282", $t));
                    t.Fixture.AddWorks();
                },
                ClearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClearWorks()", $t.Line = "307", $t));
                    t.Fixture.ClearWorks();
                },
                SetItemWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetItemWorks()", $t.Line = "336", $t));
                    t.Fixture.SetItemWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests", $t.File = "Batch4\\Collections\\Generic\\IDictionaryTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IEnumerableTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IEnumerableTests)],
        statics: {
            methods: {
                ArrayImplementsIEnumerable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IEnumerableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IEnumerableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayImplementsIEnumerable()", $t.Line = "25", $t));
                    t.Fixture.ArrayImplementsIEnumerable();
                },
                CustomClassThatShouldImplementIEnumerableDoesSo: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IEnumerableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IEnumerableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CustomClassThatShouldImplementIEnumerableDoesSo()", $t.Line = "31", $t));
                    t.Fixture.CustomClassThatShouldImplementIEnumerableDoesSo();
                },
                ArrayGetEnumeratorMethodWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IEnumerableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IEnumerableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayGetEnumeratorMethodWorks()", $t.Line = "37", $t));
                    t.Fixture.ArrayGetEnumeratorMethodWorks();
                },
                ArrayCastToIEnumerableCanBeEnumerated: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IEnumerableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IEnumerableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayCastToIEnumerableCanBeEnumerated()", $t.Line = "50", $t));
                    t.Fixture.ArrayCastToIEnumerableCanBeEnumerated();
                },
                ClassImplementingIEnumerableCanBeEnumerated: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IEnumerableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IEnumerableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIEnumerableCanBeEnumerated()", $t.Line = "64", $t));
                    t.Fixture.ClassImplementingIEnumerableCanBeEnumerated();
                },
                ClassImplementingIEnumerableCastToIEnumerableCanBeEnumerated: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IEnumerableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IEnumerableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIEnumerableCastToIEnumerableCanBeEnumerated()", $t.Line = "78", $t));
                    t.Fixture.ClassImplementingIEnumerableCastToIEnumerableCanBeEnumerated();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Collections.Generic.IEnumerableTests", $t.File = "Batch4\\Collections\\Generic\\IEnumerableTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IEquatableTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.IEquatableTests)],
        statics: {
            methods: {
                CallingMethodThroughIComparableInterfaceInvokesImplementingMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.IEquatableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IEquatableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CallingMethodThroughIComparableInterfaceInvokesImplementingMethod()", $t.Line = "21", $t));
                    t.Fixture.CallingMethodThroughIComparableInterfaceInvokesImplementingMethod();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.IEquatableTests", $t.File = "Batch4\\IEquatableTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IFormattableTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.IFormattableTests)],
        statics: {
            methods: {
                IFormattableIsRecordedInInterfaceList: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.IFormattableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IFormattableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableIsRecordedInInterfaceList()", $t.Line = "25", $t));
                    t.Fixture.IFormattableIsRecordedInInterfaceList();
                },
                CallingMethodThroughIFormattableInterfaceInvokesImplementingMethod_SPI_1565_1633: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.IFormattableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IFormattableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CallingMethodThroughIFormattableInterfaceInvokesImplementingMethod_SPI_1565_1633()", $t.Line = "32", $t));
                    t.Fixture.CallingMethodThroughIFormattableInterfaceInvokesImplementingMethod_SPI_1565_1633();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.IFormattableTests", $t.File = "Batch4\\IFormattableTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "123", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                ArrayImplementsIList: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayImplementsIList()", $t.Line = "135", $t));
                    t.Fixture.ArrayImplementsIList();
                },
                CustomClassThatShouldImplementIListDoesSo: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CustomClassThatShouldImplementIListDoesSo()", $t.Line = "141", $t));
                    t.Fixture.CustomClassThatShouldImplementIListDoesSo();
                },
                ArrayCastToIListGetItemWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayCastToIListGetItemWorks()", $t.Line = "147", $t));
                    t.Fixture.ArrayCastToIListGetItemWorks();
                },
                ClassImplementingIListGetItemWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIListGetItemWorks()", $t.Line = "154", $t));
                    t.Fixture.ClassImplementingIListGetItemWorks();
                },
                ClassImplementingIListCastToIListGetItemWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIListCastToIListGetItemWorks()", $t.Line = "161", $t));
                    t.Fixture.ClassImplementingIListCastToIListGetItemWorks();
                },
                ArrayCastToIListSetItemWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayCastToIListSetItemWorks()", $t.Line = "168", $t));
                    t.Fixture.ArrayCastToIListSetItemWorks();
                },
                ClassImplementingIListSetItemWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIListSetItemWorks()", $t.Line = "176", $t));
                    t.Fixture.ClassImplementingIListSetItemWorks();
                },
                ClassImplementingIListCastToIListSetItemWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIListCastToIListSetItemWorks()", $t.Line = "184", $t));
                    t.Fixture.ClassImplementingIListCastToIListSetItemWorks();
                },
                ArrayCastToIListIndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayCastToIListIndexOfWorks()", $t.Line = "192", $t));
                    t.Fixture.ArrayCastToIListIndexOfWorks();
                },
                ClassImplementingIListIndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIListIndexOfWorks()", $t.Line = "200", $t));
                    t.Fixture.ClassImplementingIListIndexOfWorks();
                },
                ClassImplementingIListCastToIListIndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIListCastToIListIndexOfWorks()", $t.Line = "208", $t));
                    t.Fixture.ClassImplementingIListCastToIListIndexOfWorks();
                },
                ClassImplementingIListInsertWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIListInsertWorks()", $t.Line = "216", $t));
                    t.Fixture.ClassImplementingIListInsertWorks();
                },
                ClassImplementingIListCastToIListInsertWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIListCastToIListInsertWorks()", $t.Line = "224", $t));
                    t.Fixture.ClassImplementingIListCastToIListInsertWorks();
                },
                ClassImplementingIListRemoveAtWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIListRemoveAtWorks()", $t.Line = "232", $t));
                    t.Fixture.ClassImplementingIListRemoveAtWorks();
                },
                ClassImplementingIListCastToIListRemoveAtWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIListCastToIListRemoveAtWorks()", $t.Line = "240", $t));
                    t.Fixture.ClassImplementingIListCastToIListRemoveAtWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Collections.Generic.IListTests", $t.File = "Batch4\\Collections\\Generic\\IListTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1559()", $t.Line = "29", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1559();
                },
                LengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthConstructorWorks()", $t.Line = "54", $t));
                    t.Fixture.LengthConstructorWorks();
                },
                ConstructorFromIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorFromIntWorks()", $t.Line = "62", $t));
                    t.Fixture.ConstructorFromIntWorks();
                },
                CopyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyConstructorWorks()", $t.Line = "72", $t));
                    t.Fixture.CopyConstructorWorks();
                },
                ArrayBufferConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferConstructorWorks()", $t.Line = "82", $t));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetConstructorWorks()", $t.Line = "92", $t));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetAndLengthConstructorWorks()", $t.Line = "102", $t));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                StaticBytesPerElementWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticBytesPerElementWorks()", $t.Line = "119", $t));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                LengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthWorks()", $t.Line = "125", $t));
                    t.Fixture.LengthWorks();
                },
                IndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexingWorks()", $t.Line = "132", $t));
                    t.Fixture.IndexingWorks();
                },
                SetInt16ArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetInt16ArrayWorks()", $t.Line = "141", $t));
                    t.Fixture.SetInt16ArrayWorks();
                },
                SetInt16ArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetInt16ArrayWithOffsetWorks()", $t.Line = "149", $t));
                    t.Fixture.SetInt16ArrayWithOffsetWorks();
                },
                SetNormalArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWorks()", $t.Line = "157", $t));
                    t.Fixture.SetNormalArrayWorks();
                },
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWithOffsetWorks()", $t.Line = "165", $t));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                SubarrayWithBeginWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginWorks()", $t.Line = "173", $t));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginAndEndWorks()", $t.Line = "183", $t));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                BufferPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BufferPropertyWorks()", $t.Line = "194", $t));
                    t.Fixture.BufferPropertyWorks();
                },
                ByteOffsetPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteOffsetPropertyWorks()", $t.Line = "202", $t));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                ByteLengthPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteLengthPropertyWorks()", $t.Line = "210", $t));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                IndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWorks()", $t.Line = "217", $t));
                    t.Fixture.IndexOfWorks();
                },
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "226", $t));
                    t.Fixture.ContainsWorks();
                },
                ForeachWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks_SPI_1401()", $t.Line = "235", $t));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumeratorWorks_SPI_1401()", $t.Line = "249", $t));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEnumerableGetEnumeratorWorks()", $t.Line = "263", $t));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                ICollectionMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionMethodsWork_SPI_1559()", $t.Line = "276", $t));
                    t.Fixture.ICollectionMethodsWork_SPI_1559();
                },
                IListMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListMethodsWork_SPI_1559()", $t.Line = "289", $t));
                    t.Fixture.IListMethodsWork_SPI_1559();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests", $t.File = "Batch4\\Collections\\TypedArrays\\Int16ArrayTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1717: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1717()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1717();
                },
                CastsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastsWork()", $t.Line = "35", $t));
                    t.Fixture.CastsWork();
                },
                DefaultValueIs0: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueIs0()", $t.Line = "91", $t));
                    t.Fixture.DefaultValueIs0();
                },
                DefaultConstructorReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsZero()", $t.Line = "97", $t));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                CreatingInstanceReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsZero()", $t.Line = "103", $t));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                ConstantsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWork()", $t.Line = "109", $t));
                    t.Fixture.ConstantsWork();
                },
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "116", $t));
                    t.Fixture.FormatWorks();
                },
                ToStringWithFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatWorks()", $t.Line = "122", $t));
                    t.Fixture.ToStringWithFormatWorks();
                },
                ToStringWithFormatAndProviderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatAndProviderWorks()", $t.Line = "128", $t));
                    t.Fixture.ToStringWithFormatAndProviderWorks();
                },
                IFormattableToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks()", $t.Line = "134", $t));
                    t.Fixture.IFormattableToStringWorks();
                },
                TryParseWorks_SPI_1592: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseWorks_SPI_1592()", $t.Line = "147", $t));
                    t.Fixture.TryParseWorks_SPI_1592();
                },
                ParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks()", $t.Line = "182", $t));
                    t.Fixture.ParseWorks();
                },
                ToStringWithoutRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithoutRadixWorks()", $t.Line = "194", $t));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                ToStringWithRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithRadixWorks()", $t.Line = "200", $t));
                    t.Fixture.ToStringWithRadixWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "207", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "215", $t));
                    t.Fixture.EqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "224", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "238", $t));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "246", $t));
                    t.Fixture.IComparableCompareToWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests", $t.File = "Batch4\\SimpleTypes\\Int16Tests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1559()", $t.Line = "29", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1559();
                },
                LengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthConstructorWorks()", $t.Line = "53", $t));
                    t.Fixture.LengthConstructorWorks();
                },
                ConstructorFromIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorFromIntWorks()", $t.Line = "61", $t));
                    t.Fixture.ConstructorFromIntWorks();
                },
                CopyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyConstructorWorks()", $t.Line = "71", $t));
                    t.Fixture.CopyConstructorWorks();
                },
                ArrayBufferConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferConstructorWorks()", $t.Line = "81", $t));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetConstructorWorks()", $t.Line = "91", $t));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetAndLengthConstructorWorks()", $t.Line = "101", $t));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                StaticBytesPerElementWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticBytesPerElementWorks()", $t.Line = "118", $t));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                LengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthWorks()", $t.Line = "124", $t));
                    t.Fixture.LengthWorks();
                },
                IndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexingWorks()", $t.Line = "131", $t));
                    t.Fixture.IndexingWorks();
                },
                SetInt32ArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetInt32ArrayWorks()", $t.Line = "140", $t));
                    t.Fixture.SetInt32ArrayWorks();
                },
                SetInt32ArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetInt32ArrayWithOffsetWorks()", $t.Line = "148", $t));
                    t.Fixture.SetInt32ArrayWithOffsetWorks();
                },
                SetNormalArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWorks()", $t.Line = "156", $t));
                    t.Fixture.SetNormalArrayWorks();
                },
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWithOffsetWorks()", $t.Line = "164", $t));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                SubarrayWithBeginWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginWorks()", $t.Line = "172", $t));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginAndEndWorks()", $t.Line = "182", $t));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                BufferPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BufferPropertyWorks()", $t.Line = "193", $t));
                    t.Fixture.BufferPropertyWorks();
                },
                ByteOffsetPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteOffsetPropertyWorks()", $t.Line = "201", $t));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                ByteLengthPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteLengthPropertyWorks()", $t.Line = "209", $t));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                IndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWorks()", $t.Line = "216", $t));
                    t.Fixture.IndexOfWorks();
                },
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "225", $t));
                    t.Fixture.ContainsWorks();
                },
                ForeachWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks_SPI_1401()", $t.Line = "234", $t));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumeratorWorks_SPI_1401()", $t.Line = "248", $t));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEnumerableGetEnumeratorWorks()", $t.Line = "262", $t));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                ICollectionMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionMethodsWork_SPI_1559()", $t.Line = "275", $t));
                    t.Fixture.ICollectionMethodsWork_SPI_1559();
                },
                IListMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListMethodsWork_SPI_1559()", $t.Line = "288", $t));
                    t.Fixture.IListMethodsWork_SPI_1559();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests", $t.File = "Batch4\\Collections\\TypedArrays\\Int32ArrayTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1717: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1717()", $t.Line = "12", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1717();
                },
                CastsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastsWork()", $t.Line = "37", $t));
                    t.Fixture.CastsWork();
                },
                TypeIsWorksForInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeIsWorksForInt32()", $t.Line = "88", $t));
                    t.Fixture.TypeIsWorksForInt32();
                },
                TypeAsWorksForInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeAsWorksForInt32()", $t.Line = "97", $t));
                    t.Fixture.TypeAsWorksForInt32();
                },
                UnboxingWorksForInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UnboxingWorksForInt32()", $t.Line = "106", $t));
                    t.Fixture.UnboxingWorksForInt32();
                },
                DefaultValueIs0: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueIs0()", $t.Line = "130", $t));
                    t.Fixture.DefaultValueIs0();
                },
                DefaultConstructorReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsZero()", $t.Line = "136", $t));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                CreatingInstanceReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsZero()", $t.Line = "142", $t));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                ConstantsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWork()", $t.Line = "148", $t));
                    t.Fixture.ConstantsWork();
                },
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "155", $t));
                    t.Fixture.FormatWorks();
                },
                ToStringWithFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatWorks()", $t.Line = "161", $t));
                    t.Fixture.ToStringWithFormatWorks();
                },
                ToStringWithFormatAndProviderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatAndProviderWorks()", $t.Line = "167", $t));
                    t.Fixture.ToStringWithFormatAndProviderWorks();
                },
                IFormattableToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks()", $t.Line = "173", $t));
                    t.Fixture.IFormattableToStringWorks();
                },
                TryParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseWorks()", $t.Line = "186", $t));
                    t.Fixture.TryParseWorks();
                },
                ParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks()", $t.Line = "215", $t));
                    t.Fixture.ParseWorks();
                },
                ToStringWithoutRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithoutRadixWorks()", $t.Line = "229", $t));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                ToStringWithRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithRadixWorks()", $t.Line = "235", $t));
                    t.Fixture.ToStringWithRadixWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "242", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "250", $t));
                    t.Fixture.EqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "259", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "273", $t));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "281", $t));
                    t.Fixture.IComparableCompareToWorks();
                },
                IntegerDivisionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IntegerDivisionWorks()", $t.Line = "289", $t));
                    t.Fixture.IntegerDivisionWorks();
                },
                IntegerModuloWorks_SPI_1602: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IntegerModuloWorks_SPI_1602()", $t.Line = "303", $t));
                    t.Fixture.IntegerModuloWorks_SPI_1602();
                },
                IntegerDivisionByZeroThrowsDivideByZeroException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IntegerDivisionByZeroThrowsDivideByZeroException()", $t.Line = "318", $t));
                    t.Fixture.IntegerDivisionByZeroThrowsDivideByZeroException();
                },
                DoublesAreTruncatedWhenConvertedToIntegers: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DoublesAreTruncatedWhenConvertedToIntegers()", $t.Line = "328", $t));
                    t.Fixture.DoublesAreTruncatedWhenConvertedToIntegers();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests", $t.File = "Batch4\\SimpleTypes\\Int32Tests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1717: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1717()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1717();
                },
                CastsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastsWork()", $t.Line = "34", $t));
                    t.Fixture.CastsWork();
                },
                DefaultValueIs0: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueIs0()", $t.Line = "76", $t));
                    t.Fixture.DefaultValueIs0();
                },
                DefaultConstructorReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsZero()", $t.Line = "82", $t));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                CreatingInstanceReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsZero()", $t.Line = "88", $t));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "94", $t));
                    t.Fixture.FormatWorks();
                },
                ToStringWithFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatWorks()", $t.Line = "100", $t));
                    t.Fixture.ToStringWithFormatWorks();
                },
                ToStringWithFormatAndProviderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatAndProviderWorks()", $t.Line = "106", $t));
                    t.Fixture.ToStringWithFormatAndProviderWorks();
                },
                IFormattableToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks()", $t.Line = "112", $t));
                    t.Fixture.IFormattableToStringWorks();
                },
                TryParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseWorks()", $t.Line = "125", $t));
                    t.Fixture.TryParseWorks();
                },
                ParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks()", $t.Line = "162", $t));
                    t.Fixture.ParseWorks();
                },
                CastingOfLargeDoublesToInt64Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastingOfLargeDoublesToInt64Works()", $t.Line = "175", $t));
                    t.Fixture.CastingOfLargeDoublesToInt64Works();
                },
                DivisionOfLargeInt64Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DivisionOfLargeInt64Works()", $t.Line = "183", $t));
                    t.Fixture.DivisionOfLargeInt64Works();
                },
                ToStringWithoutRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithoutRadixWorks()", $t.Line = "191", $t));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                ToStringWithRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithRadixWorks()", $t.Line = "197", $t));
                    t.Fixture.ToStringWithRadixWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "204", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "213", $t));
                    t.Fixture.EqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "222", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "236", $t));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "244", $t));
                    t.Fixture.IComparableCompareToWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests", $t.File = "Batch4\\SimpleTypes\\Int64Tests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1559()", $t.Line = "29", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1559();
                },
                LengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthConstructorWorks()", $t.Line = "53", $t));
                    t.Fixture.LengthConstructorWorks();
                },
                ConstructorFromIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorFromIntWorks()", $t.Line = "61", $t));
                    t.Fixture.ConstructorFromIntWorks();
                },
                CopyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyConstructorWorks()", $t.Line = "71", $t));
                    t.Fixture.CopyConstructorWorks();
                },
                ArrayBufferConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferConstructorWorks()", $t.Line = "81", $t));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetConstructorWorks()", $t.Line = "91", $t));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetAndLengthConstructorWorks()", $t.Line = "101", $t));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                StaticBytesPerElementWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticBytesPerElementWorks()", $t.Line = "118", $t));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                LengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthWorks()", $t.Line = "124", $t));
                    t.Fixture.LengthWorks();
                },
                IndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexingWorks()", $t.Line = "131", $t));
                    t.Fixture.IndexingWorks();
                },
                SetInt8ArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetInt8ArrayWorks()", $t.Line = "140", $t));
                    t.Fixture.SetInt8ArrayWorks();
                },
                SetInt8ArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetInt8ArrayWithOffsetWorks()", $t.Line = "148", $t));
                    t.Fixture.SetInt8ArrayWithOffsetWorks();
                },
                SetNormalArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWorks()", $t.Line = "156", $t));
                    t.Fixture.SetNormalArrayWorks();
                },
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWithOffsetWorks()", $t.Line = "164", $t));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                SubarrayWithBeginWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginWorks()", $t.Line = "172", $t));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginAndEndWorks()", $t.Line = "182", $t));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                BufferPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BufferPropertyWorks()", $t.Line = "193", $t));
                    t.Fixture.BufferPropertyWorks();
                },
                ByteOffsetPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteOffsetPropertyWorks()", $t.Line = "201", $t));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                ByteLengthPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteLengthPropertyWorks()", $t.Line = "209", $t));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                IndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWorks()", $t.Line = "216", $t));
                    t.Fixture.IndexOfWorks();
                },
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "225", $t));
                    t.Fixture.ContainsWorks();
                },
                ForeachWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks_SPI_1401()", $t.Line = "234", $t));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumeratorWorks_SPI_1401()", $t.Line = "248", $t));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEnumerableGetEnumeratorWorks()", $t.Line = "262", $t));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                ICollectionMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionMethodsWork_SPI_1559()", $t.Line = "275", $t));
                    t.Fixture.ICollectionMethodsWork_SPI_1559();
                },
                IListMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListMethodsWork_SPI_1559()", $t.Line = "288", $t));
                    t.Fixture.IListMethodsWork_SPI_1559();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests", $t.File = "Batch4\\Collections\\TypedArrays\\Int8ArrayTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.InvalidCastExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.InvalidCastExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.InvalidCastExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.InvalidCastExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "9", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.InvalidCastExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.InvalidCastExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "23", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.InvalidCastExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.InvalidCastExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "32", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.InvalidCastExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.InvalidCastExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "41", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Exceptions.InvalidCastExceptionTests", $t.File = "Batch4\\Exceptions\\InvalidCastExceptionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.InvalidOperationExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.InvalidOperationExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.InvalidOperationExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.InvalidOperationExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "9", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.InvalidOperationExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.InvalidOperationExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "23", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.InvalidOperationExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.InvalidOperationExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "32", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.InvalidOperationExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.InvalidOperationExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "41", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Exceptions.InvalidOperationExceptionTests", $t.File = "Batch4\\Exceptions\\InvalidOperationExceptionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IteratorBlockTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests)],
        statics: {
            methods: {
                TypeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable_SPI_1554: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IteratorBlockTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable_SPI_1554()", $t.Line = "121", $t));
                    t.Fixture.TypeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable_SPI_1554();
                },
                EnumeratingIEnumeratorIteratorToEndWorks_SPI_1555: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IteratorBlockTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EnumeratingIEnumeratorIteratorToEndWorks_SPI_1555()", $t.Line = "134", $t));
                    t.Fixture.EnumeratingIEnumeratorIteratorToEndWorks_SPI_1555();
                },
                PrematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks_SPI_1555: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IteratorBlockTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PrematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks_SPI_1555()", $t.Line = "149", $t));
                    t.Fixture.PrematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks_SPI_1555();
                },
                ExceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks_SPI_1554: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IteratorBlockTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks_SPI_1554()", $t.Line = "166", $t));
                    t.Fixture.ExceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks_SPI_1554();
                },
                TypeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface_SPI_1554: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IteratorBlockTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface_SPI_1554()", $t.Line = "193", $t));
                    t.Fixture.TypeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface_SPI_1554();
                },
                EnumeratingIEnumerableIteratorToEndWorks_SPI_1555: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IteratorBlockTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EnumeratingIEnumerableIteratorToEndWorks_SPI_1555()", $t.Line = "205", $t));
                    t.Fixture.EnumeratingIEnumerableIteratorToEndWorks_SPI_1555();
                },
                PrematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks_SPI_1555: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IteratorBlockTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PrematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks_SPI_1555()", $t.Line = "222", $t));
                    t.Fixture.PrematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks_SPI_1555();
                },
                ExceptionInIEnumerableIteratorBodyExecutesFinallyBlocks_SPI_1554: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IteratorBlockTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExceptionInIEnumerableIteratorBodyExecutesFinallyBlocks_SPI_1554()", $t.Line = "238", $t));
                    t.Fixture.ExceptionInIEnumerableIteratorBodyExecutesFinallyBlocks_SPI_1554();
                },
                EnumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IteratorBlockTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EnumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters()", $t.Line = "266", $t));
                    t.Fixture.EnumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters();
                },
                DifferentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.IteratorBlockTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DifferentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals()", $t.Line = "280", $t));
                    t.Fixture.DifferentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests", $t.File = "Batch4\\Collections\\Generic\\IteratorBlockTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.JsonTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Serialization.JsonTests)],
        statics: {
            methods: {
                NonGenericParseWorks_SPI_1574: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Serialization.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonGenericParseWorks_SPI_1574()", $t.Line = "27", $t));
                    t.Fixture.NonGenericParseWorks_SPI_1574();
                },
                GenericParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Serialization.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GenericParseWorks()", $t.Line = "44", $t));
                    t.Fixture.GenericParseWorks();
                },
                NonGenericParseWithCallbackWorks_SPI_1574: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Serialization.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonGenericParseWithCallbackWorks_SPI_1574()", $t.Line = "53", $t));
                    t.Fixture.NonGenericParseWithCallbackWorks_SPI_1574();
                },
                GenericParseWithCallbackWorks_SPI_1574: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Serialization.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GenericParseWithCallbackWorks_SPI_1574()", $t.Line = "77", $t));
                    t.Fixture.GenericParseWithCallbackWorks_SPI_1574();
                },
                StringifyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Serialization.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWorks()", $t.Line = "98", $t));
                    t.Fixture.StringifyWorks();
                },
                StringifyWithSerializableMembersArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Serialization.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWithSerializableMembersArrayWorks()", $t.Line = "107", $t));
                    t.Fixture.StringifyWithSerializableMembersArrayWorks();
                },
                StringifyWithSerializableMembersArrayAndIntentCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Serialization.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWithSerializableMembersArrayAndIntentCountWorks()", $t.Line = "117", $t));
                    t.Fixture.StringifyWithSerializableMembersArrayAndIntentCountWorks();
                },
                StringifyWithSerializableMembersArrayAndIntentTextWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Serialization.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWithSerializableMembersArrayAndIntentTextWorks()", $t.Line = "127", $t));
                    t.Fixture.StringifyWithSerializableMembersArrayAndIntentTextWorks();
                },
                StringifyWithCallbackWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Serialization.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWithCallbackWorks()", $t.Line = "137", $t));
                    t.Fixture.StringifyWithCallbackWorks();
                },
                StringifyWithCallbackAndIndentCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Serialization.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWithCallbackAndIndentCountWorks()", $t.Line = "147", $t));
                    t.Fixture.StringifyWithCallbackAndIndentCountWorks();
                },
                StringifyWithCallbackAndIndentTextWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Serialization.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWithCallbackAndIndentTextWorks()", $t.Line = "157", $t));
                    t.Fixture.StringifyWithCallbackAndIndentTextWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Serialization.JsonTests", $t.File = "Batch4\\Serialization\\JsonTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.KeyNotFoundExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.KeyNotFoundExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.KeyNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.KeyNotFoundExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.KeyNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.KeyNotFoundExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "24", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.KeyNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.KeyNotFoundExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "33", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.KeyNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.KeyNotFoundExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "42", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Exceptions.KeyNotFoundExceptionTests", $t.File = "Batch4\\Exceptions\\KeyNotFoundExceptionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.KeyValuePairTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.KeyValuePairTests)],
        statics: {
            methods: {
                TheConstructorWithParametersCanBeUsed: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.KeyValuePairTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.KeyValuePairTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TheConstructorWithParametersCanBeUsed()", $t.Line = "12", $t));
                    t.Fixture.TheConstructorWithParametersCanBeUsed();
                },
                TypeTestWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.KeyValuePairTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.KeyValuePairTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeTestWorks()", $t.Line = "21", $t));
                    t.Fixture.TypeTestWorks();
                },
                TypeTestWorksGeneric_SPI_1556: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.KeyValuePairTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.KeyValuePairTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeTestWorksGeneric_SPI_1556()", $t.Line = "33", $t));
                    t.Fixture.TypeTestWorksGeneric_SPI_1556();
                },
                TheDefaultConstructorCanBeUsed_SPI_1556: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.KeyValuePairTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.KeyValuePairTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TheDefaultConstructorCanBeUsed_SPI_1556()", $t.Line = "41", $t));
                    t.Fixture.TheDefaultConstructorCanBeUsed_SPI_1556();
                },
                CreatingADefaultKeyValuePairCreatesAnInstanceThatIsNotNull_SPI_1556: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.KeyValuePairTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.KeyValuePairTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingADefaultKeyValuePairCreatesAnInstanceThatIsNotNull_SPI_1556()", $t.Line = "51", $t));
                    t.Fixture.CreatingADefaultKeyValuePairCreatesAnInstanceThatIsNotNull_SPI_1556();
                },
                ActivatorCreateInstanceWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.KeyValuePairTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.KeyValuePairTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ActivatorCreateInstanceWorks()", $t.Line = "62", $t));
                    t.Fixture.ActivatorCreateInstanceWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Collections.Generic.KeyValuePairTests", $t.File = "Batch4\\Collections\\Generic\\KeyValuePairTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "31", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "43", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithCapacityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithCapacityWorks()", $t.Line = "50", $t));
                    t.Fixture.ConstructorWithCapacityWorks();
                },
                ConstructingFromArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructingFromArrayWorks()", $t.Line = "69", $t));
                    t.Fixture.ConstructingFromArrayWorks();
                },
                ConstructingFromListWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructingFromListWorks()", $t.Line = "78", $t));
                    t.Fixture.ConstructingFromListWorks();
                },
                ConstructingFromIEnumerableWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructingFromIEnumerableWorks()", $t.Line = "92", $t));
                    t.Fixture.ConstructingFromIEnumerableWorks();
                },
                CountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CountWorks()", $t.Line = "107", $t));
                    t.Fixture.CountWorks();
                },
                IndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexingWorks()", $t.Line = "115", $t));
                    t.Fixture.IndexingWorks();
                },
                ForeachWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks()", $t.Line = "122", $t));
                    t.Fixture.ForeachWorks();
                },
                GetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumeratorWorks()", $t.Line = "133", $t));
                    t.Fixture.GetEnumeratorWorks();
                },
                AddWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddWorks()", $t.Line = "144", $t));
                    t.Fixture.AddWorks();
                },
                AddRangeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddRangeWorks()", $t.Line = "152", $t));
                    t.Fixture.AddRangeWorks();
                },
                ClearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClearWorks()", $t.Line = "170", $t));
                    t.Fixture.ClearWorks();
                },
                ConcatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConcatWorks()", $t.Line = "178", $t));
                    t.Fixture.ConcatWorks();
                },
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "187", $t));
                    t.Fixture.ContainsWorks();
                },
                ContainsUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsUsesEqualsMethod()", $t.Line = "195", $t));
                    t.Fixture.ContainsUsesEqualsMethod();
                },
                SliceWithoutEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SliceWithoutEndWorks()", $t.Line = "234", $t));
                    t.Fixture.SliceWithoutEndWorks();
                },
                SliceWithEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SliceWithEndWorks()", $t.Line = "240", $t));
                    t.Fixture.SliceWithEndWorks();
                },
                IndexOfWithoutStartIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWithoutStartIndexWorks()", $t.Line = "280", $t));
                    t.Fixture.IndexOfWithoutStartIndexWorks();
                },
                IndexOfWithoutStartIndexUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWithoutStartIndexUsesEqualsMethod()", $t.Line = "286", $t));
                    t.Fixture.IndexOfWithoutStartIndexUsesEqualsMethod();
                },
                IndexOfWithStartIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWithStartIndexWorks()", $t.Line = "294", $t));
                    t.Fixture.IndexOfWithStartIndexWorks();
                },
                IndexOfWithStartIndexUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWithStartIndexUsesEqualsMethod()", $t.Line = "300", $t));
                    t.Fixture.IndexOfWithStartIndexUsesEqualsMethod();
                },
                InsertWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InsertWorks()", $t.Line = "306", $t));
                    t.Fixture.InsertWorks();
                },
                InsertRangeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InsertRangeWorks()", $t.Line = "314", $t));
                    t.Fixture.InsertRangeWorks();
                },
                JoinWithoutDelimiterWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "JoinWithoutDelimiterWorks()", $t.Line = "322", $t));
                    t.Fixture.JoinWithoutDelimiterWorks();
                },
                JoinWithDelimiterWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "JoinWithDelimiterWorks()", $t.Line = "328", $t));
                    t.Fixture.JoinWithDelimiterWorks();
                },
                RemoveWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveWorks()", $t.Line = "348", $t));
                    t.Fixture.RemoveWorks();
                },
                RemoveReturnsFalseIfTheElementWasNotFound: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveReturnsFalseIfTheElementWasNotFound()", $t.Line = "356", $t));
                    t.Fixture.RemoveReturnsFalseIfTheElementWasNotFound();
                },
                RemoveCanRemoveNullItem: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveCanRemoveNullItem()", $t.Line = "364", $t));
                    t.Fixture.RemoveCanRemoveNullItem();
                },
                RemoveUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveUsesEqualsMethod()", $t.Line = "372", $t));
                    t.Fixture.RemoveUsesEqualsMethod();
                },
                RemoveAtWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveAtWorks()", $t.Line = "382", $t));
                    t.Fixture.RemoveAtWorks();
                },
                RemoveRangeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveRangeWorks()", $t.Line = "390", $t));
                    t.Fixture.RemoveRangeWorks();
                },
                ReverseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReverseWorks()", $t.Line = "398", $t));
                    t.Fixture.ReverseWorks();
                },
                SortWithDefaultCompareWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortWithDefaultCompareWorks()", $t.Line = "422", $t));
                    t.Fixture.SortWithDefaultCompareWorks();
                },
                SortWithCompareCallbackWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortWithCompareCallbackWorks()", $t.Line = "430", $t));
                    t.Fixture.SortWithCompareCallbackWorks();
                },
                SortWithIComparerWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortWithIComparerWorks()", $t.Line = "438", $t));
                    t.Fixture.SortWithIComparerWorks();
                },
                ForeachWhenCastToIEnumerableWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWhenCastToIEnumerableWorks()", $t.Line = "455", $t));
                    t.Fixture.ForeachWhenCastToIEnumerableWorks();
                },
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEnumerableGetEnumeratorWorks()", $t.Line = "467", $t));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                ICollectionCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionCountWorks()", $t.Line = "479", $t));
                    t.Fixture.ICollectionCountWorks();
                },
                ICollectionAddWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionAddWorks()", $t.Line = "486", $t));
                    t.Fixture.ICollectionAddWorks();
                },
                ICollectionClearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionClearWorks()", $t.Line = "494", $t));
                    t.Fixture.ICollectionClearWorks();
                },
                ICollectionContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionContainsWorks()", $t.Line = "502", $t));
                    t.Fixture.ICollectionContainsWorks();
                },
                ICollectionContainsUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionContainsUsesEqualsMethod()", $t.Line = "510", $t));
                    t.Fixture.ICollectionContainsUsesEqualsMethod();
                },
                ICollectionRemoveWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionRemoveWorks()", $t.Line = "518", $t));
                    t.Fixture.ICollectionRemoveWorks();
                },
                ICollectionRemoveCanRemoveNullItem: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionRemoveCanRemoveNullItem()", $t.Line = "527", $t));
                    t.Fixture.ICollectionRemoveCanRemoveNullItem();
                },
                ICollectionRemoveUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionRemoveUsesEqualsMethod()", $t.Line = "535", $t));
                    t.Fixture.ICollectionRemoveUsesEqualsMethod();
                },
                IListIndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIndexingWorks()", $t.Line = "545", $t));
                    t.Fixture.IListIndexingWorks();
                },
                IListIndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIndexOfWorks()", $t.Line = "554", $t));
                    t.Fixture.IListIndexOfWorks();
                },
                IListIndexOfUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIndexOfUsesEqualsMethod()", $t.Line = "562", $t));
                    t.Fixture.IListIndexOfUsesEqualsMethod();
                },
                IListInsertWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListInsertWorks()", $t.Line = "570", $t));
                    t.Fixture.IListInsertWorks();
                },
                IListRemoveAtWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListRemoveAtWorks()", $t.Line = "578", $t));
                    t.Fixture.IListRemoveAtWorks();
                },
                ToArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToArrayWorks()", $t.Line = "586", $t));
                    t.Fixture.ToArrayWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Collections.Generic.ListTests", $t.File = "Batch4\\Collections\\Generic\\ListTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests)],
        statics: {
            methods: {
                ConstantsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWork()", $t.Line = "23", $t));
                    t.Fixture.ConstantsWork();
                },
                AbsOfDoubleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AbsOfDoubleWorks()", $t.Line = "30", $t));
                    t.Fixture.AbsOfDoubleWorks();
                },
                AbsOfIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AbsOfIntWorks()", $t.Line = "36", $t));
                    t.Fixture.AbsOfIntWorks();
                },
                AbsOfLongWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AbsOfLongWorks()", $t.Line = "42", $t));
                    t.Fixture.AbsOfLongWorks();
                },
                AbsOfSbyteWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AbsOfSbyteWorks()", $t.Line = "48", $t));
                    t.Fixture.AbsOfSbyteWorks();
                },
                AbsOfShortWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AbsOfShortWorks()", $t.Line = "54", $t));
                    t.Fixture.AbsOfShortWorks();
                },
                AbsOfFloatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AbsOfFloatWorks()", $t.Line = "60", $t));
                    t.Fixture.AbsOfFloatWorks();
                },
                AbsOfDecimalWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AbsOfDecimalWorks()", $t.Line = "66", $t));
                    t.Fixture.AbsOfDecimalWorks();
                },
                AcosWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AcosWorks()", $t.Line = "74", $t));
                    t.Fixture.AcosWorks();
                },
                AsinWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AsinWorks()", $t.Line = "80", $t));
                    t.Fixture.AsinWorks();
                },
                AtanWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AtanWorks()", $t.Line = "86", $t));
                    t.Fixture.AtanWorks();
                },
                Atan2Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Atan2Works()", $t.Line = "92", $t));
                    t.Fixture.Atan2Works();
                },
                CeilingOfDoubleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CeilingOfDoubleWorks()", $t.Line = "98", $t));
                    t.Fixture.CeilingOfDoubleWorks();
                },
                CeilingOfDecimalWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CeilingOfDecimalWorks()", $t.Line = "105", $t));
                    t.Fixture.CeilingOfDecimalWorks();
                },
                CosWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CosWorks()", $t.Line = "113", $t));
                    t.Fixture.CosWorks();
                },
                CoshWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CoshWorks()", $t.Line = "119", $t));
                    t.Fixture.CoshWorks();
                },
                SinhWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SinhWorks()", $t.Line = "125", $t));
                    t.Fixture.SinhWorks();
                },
                TanhWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TanhWorks()", $t.Line = "131", $t));
                    t.Fixture.TanhWorks();
                },
                ExpWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExpWorks()", $t.Line = "137", $t));
                    t.Fixture.ExpWorks();
                },
                FloorOfDoubleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FloorOfDoubleWorks()", $t.Line = "143", $t));
                    t.Fixture.FloorOfDoubleWorks();
                },
                FloorOfDecimalWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FloorOfDecimalWorks()", $t.Line = "150", $t));
                    t.Fixture.FloorOfDecimalWorks();
                },
                LogWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LogWorks()", $t.Line = "158", $t));
                    t.Fixture.LogWorks();
                },
                LogWithBaseWorks_SPI_1566: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LogWithBaseWorks_SPI_1566()", $t.Line = "164", $t));
                    t.Fixture.LogWithBaseWorks_SPI_1566();
                },
                Log10Works_SPI_1629: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Log10Works_SPI_1629()", $t.Line = "179", $t));
                    t.Fixture.Log10Works_SPI_1629();
                },
                MaxOfByteWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MaxOfByteWorks()", $t.Line = "187", $t));
                    t.Fixture.MaxOfByteWorks();
                },
                MaxOfDecimalWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MaxOfDecimalWorks()", $t.Line = "194", $t));
                    t.Fixture.MaxOfDecimalWorks();
                },
                MaxOfDoubleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MaxOfDoubleWorks()", $t.Line = "201", $t));
                    t.Fixture.MaxOfDoubleWorks();
                },
                MaxOfShortWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MaxOfShortWorks()", $t.Line = "208", $t));
                    t.Fixture.MaxOfShortWorks();
                },
                MaxOfIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MaxOfIntWorks()", $t.Line = "215", $t));
                    t.Fixture.MaxOfIntWorks();
                },
                MaxOfLongWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MaxOfLongWorks()", $t.Line = "222", $t));
                    t.Fixture.MaxOfLongWorks();
                },
                MaxOfSByteWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MaxOfSByteWorks()", $t.Line = "229", $t));
                    t.Fixture.MaxOfSByteWorks();
                },
                MaxOfFloatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MaxOfFloatWorks()", $t.Line = "236", $t));
                    t.Fixture.MaxOfFloatWorks();
                },
                MaxOfUShortWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MaxOfUShortWorks()", $t.Line = "243", $t));
                    t.Fixture.MaxOfUShortWorks();
                },
                MaxOfUIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MaxOfUIntWorks()", $t.Line = "250", $t));
                    t.Fixture.MaxOfUIntWorks();
                },
                MaxOfULongWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MaxOfULongWorks()", $t.Line = "257", $t));
                    t.Fixture.MaxOfULongWorks();
                },
                MinOfByteWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinOfByteWorks()", $t.Line = "264", $t));
                    t.Fixture.MinOfByteWorks();
                },
                MinOfDecimalWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinOfDecimalWorks()", $t.Line = "271", $t));
                    t.Fixture.MinOfDecimalWorks();
                },
                MinOfDoubleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinOfDoubleWorks()", $t.Line = "278", $t));
                    t.Fixture.MinOfDoubleWorks();
                },
                MinOfShortWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinOfShortWorks()", $t.Line = "285", $t));
                    t.Fixture.MinOfShortWorks();
                },
                MinOfIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinOfIntWorks()", $t.Line = "292", $t));
                    t.Fixture.MinOfIntWorks();
                },
                MinOfLongWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinOfLongWorks()", $t.Line = "299", $t));
                    t.Fixture.MinOfLongWorks();
                },
                MinOfSByteWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinOfSByteWorks()", $t.Line = "306", $t));
                    t.Fixture.MinOfSByteWorks();
                },
                MinOfFloatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinOfFloatWorks()", $t.Line = "313", $t));
                    t.Fixture.MinOfFloatWorks();
                },
                MinOfUShortWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinOfUShortWorks()", $t.Line = "320", $t));
                    t.Fixture.MinOfUShortWorks();
                },
                MinOfUIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinOfUIntWorks()", $t.Line = "327", $t));
                    t.Fixture.MinOfUIntWorks();
                },
                MinOfULongWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinOfULongWorks()", $t.Line = "334", $t));
                    t.Fixture.MinOfULongWorks();
                },
                PowWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PowWorks()", $t.Line = "341", $t));
                    t.Fixture.PowWorks();
                },
                RandomWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RandomWorks()", $t.Line = "347", $t));
                    t.Fixture.RandomWorks();
                },
                RoundOfDoubleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundOfDoubleWorks()", $t.Line = "358", $t));
                    t.Fixture.RoundOfDoubleWorks();
                },
                RoundOfDecimalWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundOfDecimalWorks()", $t.Line = "369", $t));
                    t.Fixture.RoundOfDecimalWorks();
                },
                JsRoundOfDoubleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "JsRoundOfDoubleWorks()", $t.Line = "380", $t));
                    t.Fixture.JsRoundOfDoubleWorks();
                },
                RoundOfDoubleWithDigitsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundOfDoubleWithDigitsWorks()", $t.Line = "391", $t));
                    t.Fixture.RoundOfDoubleWithDigitsWorks();
                },
                RoundOfDecimalWithDigitsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundOfDecimalWithDigitsWorks()", $t.Line = "402", $t));
                    t.Fixture.RoundOfDecimalWithDigitsWorks();
                },
                SignWithDecimalWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SignWithDecimalWorks()", $t.Line = "413", $t));
                    t.Fixture.SignWithDecimalWorks();
                },
                SignWithDoubleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SignWithDoubleWorks()", $t.Line = "421", $t));
                    t.Fixture.SignWithDoubleWorks();
                },
                SignWithFloatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SignWithFloatWorks()", $t.Line = "469", $t));
                    t.Fixture.SignWithFloatWorks();
                },
                SinWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SinWorks()", $t.Line = "477", $t));
                    t.Fixture.SinWorks();
                },
                SqrtWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SqrtWorks()", $t.Line = "483", $t));
                    t.Fixture.SqrtWorks();
                },
                TanWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TanWorks()", $t.Line = "489", $t));
                    t.Fixture.TanWorks();
                },
                TruncateWithDoubleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TruncateWithDoubleWorks()", $t.Line = "495", $t));
                    t.Fixture.TruncateWithDoubleWorks();
                },
                TruncateWithDecimalWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TruncateWithDecimalWorks()", $t.Line = "502", $t));
                    t.Fixture.TruncateWithDecimalWorks();
                },
                IEEERemainderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEEERemainderWorks()", $t.Line = "509", $t));
                    t.Fixture.IEEERemainderWorks();
                },
                RoundOfDoubleWithMidpointRoundingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundOfDoubleWithMidpointRoundingWorks()", $t.Line = "525", $t));
                    t.Fixture.RoundOfDoubleWithMidpointRoundingWorks();
                },
                RoundOfDecimalWithMidpointRoundingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundOfDecimalWithMidpointRoundingWorks()", $t.Line = "540", $t));
                    t.Fixture.RoundOfDecimalWithMidpointRoundingWorks();
                },
                RoundOfDoubleWithDigitsAndMidpointRoundingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundOfDoubleWithDigitsAndMidpointRoundingWorks()", $t.Line = "555", $t));
                    t.Fixture.RoundOfDoubleWithDigitsAndMidpointRoundingWorks();
                },
                RoundOfDecimalWithDigitsAndMidpointRoundingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundOfDecimalWithDigitsAndMidpointRoundingWorks()", $t.Line = "570", $t));
                    t.Fixture.RoundOfDecimalWithDigitsAndMidpointRoundingWorks();
                },
                DivRemWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DivRemWorks()", $t.Line = "593", $t));
                    t.Fixture.DivRemWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.MathTests", $t.File = "Batch4\\MathTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                LengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthWorks()", $t.Line = "20", $t));
                    t.Fixture.LengthWorks();
                },
                GettingValueByIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GettingValueByIndexWorks()", $t.Line = "27", $t));
                    t.Fixture.GettingValueByIndexWorks();
                },
                GetValueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetValueWorks()", $t.Line = "39", $t));
                    t.Fixture.GetValueWorks();
                },
                GetValueWorksForUninitializedElement: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetValueWorksForUninitializedElement()", $t.Line = "51", $t));
                    t.Fixture.GetValueWorksForUninitializedElement();
                },
                GetValueByIndexWorksForUninitializedElement: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetValueByIndexWorksForUninitializedElement()", $t.Line = "58", $t));
                    t.Fixture.GetValueByIndexWorksForUninitializedElement();
                },
                SettingValueByIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SettingValueByIndexWorks()", $t.Line = "65", $t));
                    t.Fixture.SettingValueByIndexWorks();
                },
                SetValueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetValueWorks()", $t.Line = "83", $t));
                    t.Fixture.SetValueWorks();
                },
                GetLengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetLengthWorks()", $t.Line = "101", $t));
                    t.Fixture.GetLengthWorks();
                },
                GetLowerBoundWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetLowerBoundWorks()", $t.Line = "110", $t));
                    t.Fixture.GetLowerBoundWorks();
                },
                GetUpperBoundWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUpperBoundWorks()", $t.Line = "119", $t));
                    t.Fixture.GetUpperBoundWorks();
                },
                ForeachWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks()", $t.Line = "128", $t));
                    t.Fixture.ForeachWorks();
                },
                RankWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RankWorks()", $t.Line = "140", $t));
                    t.Fixture.RankWorks();
                },
                GetValueWithIndexOutOfRangeThrowsAnException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetValueWithIndexOutOfRangeThrowsAnException()", $t.Line = "147", $t));
                    t.Fixture.GetValueWithIndexOutOfRangeThrowsAnException();
                },
                SetValueWithIndexOutOfRangeThrowsAnException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetValueWithIndexOutOfRangeThrowsAnException()", $t.Line = "162", $t));
                    t.Fixture.SetValueWithIndexOutOfRangeThrowsAnException();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.MultidimArrayTests", $t.File = "Batch4\\MultidimArrayTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NotImplementedExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NotImplementedExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NotImplementedExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NotImplementedExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "9", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NotImplementedExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NotImplementedExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "23", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NotImplementedExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NotImplementedExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "32", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NotImplementedExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NotImplementedExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "41", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Exceptions.NotImplementedExceptionTests", $t.File = "Batch4\\Exceptions\\NotImplementedExceptionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NotSupportedExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NotSupportedExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NotSupportedExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NotSupportedExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "9", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NotSupportedExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NotSupportedExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "23", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NotSupportedExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NotSupportedExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "32", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NotSupportedExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NotSupportedExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "41", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Exceptions.NotSupportedExceptionTests", $t.File = "Batch4\\Exceptions\\NotSupportedExceptionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1567: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1567()", $t.Line = "75", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1567();
                },
                ConvertingToNullableWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConvertingToNullableWorks()", $t.Line = "98", $t));
                    t.Fixture.ConvertingToNullableWorks();
                },
                HasValueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "HasValueWorks()", $t.Line = "108", $t));
                    t.Fixture.HasValueWorks();
                },
                BoxingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BoxingWorks()", $t.Line = "116", $t));
                    t.Fixture.BoxingWorks();
                },
                UnboxingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UnboxingWorks()", $t.Line = "124", $t));
                    t.Fixture.UnboxingWorks();
                },
                ValueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ValueWorks()", $t.Line = "139", $t));
                    t.Fixture.ValueWorks();
                },
                UnboxingValueOfWrongTypeThrowsAnException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UnboxingValueOfWrongTypeThrowsAnException()", $t.Line = "154", $t));
                    t.Fixture.UnboxingValueOfWrongTypeThrowsAnException();
                },
                GetValueOrDefaultWithArgWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetValueOrDefaultWithArgWorks()", $t.Line = "164", $t));
                    t.Fixture.GetValueOrDefaultWithArgWorks();
                },
                LiftedEqualityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedEqualityWorks()", $t.Line = "172", $t));
                    t.Fixture.LiftedEqualityWorks();
                },
                LiftedInequalityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedInequalityWorks()", $t.Line = "182", $t));
                    t.Fixture.LiftedInequalityWorks();
                },
                LiftedLessThanWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedLessThanWorks()", $t.Line = "192", $t));
                    t.Fixture.LiftedLessThanWorks();
                },
                LiftedGreaterThanWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedGreaterThanWorks()", $t.Line = "202", $t));
                    t.Fixture.LiftedGreaterThanWorks();
                },
                LiftedLessThanOrEqualWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedLessThanOrEqualWorks()", $t.Line = "212", $t));
                    t.Fixture.LiftedLessThanOrEqualWorks();
                },
                LiftedGreaterThanOrEqualWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedGreaterThanOrEqualWorks()", $t.Line = "222", $t));
                    t.Fixture.LiftedGreaterThanOrEqualWorks();
                },
                LiftedSubtractionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedSubtractionWorks()", $t.Line = "232", $t));
                    t.Fixture.LiftedSubtractionWorks();
                },
                LiftedAdditionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedAdditionWorks()", $t.Line = "240", $t));
                    t.Fixture.LiftedAdditionWorks();
                },
                LiftedModWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedModWorks()", $t.Line = "248", $t));
                    t.Fixture.LiftedModWorks();
                },
                LiftedFloatingPointDivisionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedFloatingPointDivisionWorks()", $t.Line = "256", $t));
                    t.Fixture.LiftedFloatingPointDivisionWorks();
                },
                LiftedIntegerDivisionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedIntegerDivisionWorks()", $t.Line = "264", $t));
                    t.Fixture.LiftedIntegerDivisionWorks();
                },
                LiftedMultiplicationWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedMultiplicationWorks()", $t.Line = "272", $t));
                    t.Fixture.LiftedMultiplicationWorks();
                },
                LiftedBitwiseAndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedBitwiseAndWorks()", $t.Line = "280", $t));
                    t.Fixture.LiftedBitwiseAndWorks();
                },
                LiftedBitwiseOrWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedBitwiseOrWorks()", $t.Line = "288", $t));
                    t.Fixture.LiftedBitwiseOrWorks();
                },
                LiftedBitwiseXorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedBitwiseXorWorks()", $t.Line = "296", $t));
                    t.Fixture.LiftedBitwiseXorWorks();
                },
                LiftedLeftShiftWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedLeftShiftWorks()", $t.Line = "304", $t));
                    t.Fixture.LiftedLeftShiftWorks();
                },
                LiftedSignedRightShiftWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedSignedRightShiftWorks()", $t.Line = "312", $t));
                    t.Fixture.LiftedSignedRightShiftWorks();
                },
                LiftedUnsignedRightShiftWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedUnsignedRightShiftWorks()", $t.Line = "320", $t));
                    t.Fixture.LiftedUnsignedRightShiftWorks();
                },
                LiftedEqualityWorksWithUserDefinedOperators: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedEqualityWorksWithUserDefinedOperators()", $t.Line = "328", $t));
                    t.Fixture.LiftedEqualityWorksWithUserDefinedOperators();
                },
                LiftedInequalityWorksWithUserDefinedOperators: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedInequalityWorksWithUserDefinedOperators()", $t.Line = "339", $t));
                    t.Fixture.LiftedInequalityWorksWithUserDefinedOperators();
                },
                LiftedLessThanWorksWithUserDefinedOperators: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedLessThanWorksWithUserDefinedOperators()", $t.Line = "350", $t));
                    t.Fixture.LiftedLessThanWorksWithUserDefinedOperators();
                },
                LiftedGreaterThanWorksWithUserDefinedOperators: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedGreaterThanWorksWithUserDefinedOperators()", $t.Line = "361", $t));
                    t.Fixture.LiftedGreaterThanWorksWithUserDefinedOperators();
                },
                LiftedLessThanOrEqualWorksWithUserDefinedOperators: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedLessThanOrEqualWorksWithUserDefinedOperators()", $t.Line = "372", $t));
                    t.Fixture.LiftedLessThanOrEqualWorksWithUserDefinedOperators();
                },
                LiftedGreaterThanOrEqualWorksWithUserDefinedOperators: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedGreaterThanOrEqualWorksWithUserDefinedOperators()", $t.Line = "383", $t));
                    t.Fixture.LiftedGreaterThanOrEqualWorksWithUserDefinedOperators();
                },
                LiftedAdditionWorksWithUserDefinedOperators: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedAdditionWorksWithUserDefinedOperators()", $t.Line = "394", $t));
                    t.Fixture.LiftedAdditionWorksWithUserDefinedOperators();
                },
                LiftedUnaryMinusWorksWithUserDefinedOperators_SPI_1634: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedUnaryMinusWorksWithUserDefinedOperators_SPI_1634()", $t.Line = "403", $t));
                    t.Fixture.LiftedUnaryMinusWorksWithUserDefinedOperators_SPI_1634();
                },
                LiftedBooleanAndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedBooleanAndWorks()", $t.Line = "412", $t));
                    t.Fixture.LiftedBooleanAndWorks();
                },
                LiftedBooleanOrWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedBooleanOrWorks()", $t.Line = "427", $t));
                    t.Fixture.LiftedBooleanOrWorks();
                },
                LiftedBooleanXorWorks_SPI_1568: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedBooleanXorWorks_SPI_1568()", $t.Line = "442", $t));
                    t.Fixture.LiftedBooleanXorWorks_SPI_1568();
                },
                LiftedBooleanNotWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedBooleanNotWorks()", $t.Line = "461", $t));
                    t.Fixture.LiftedBooleanNotWorks();
                },
                LiftedNegationWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedNegationWorks()", $t.Line = "470", $t));
                    t.Fixture.LiftedNegationWorks();
                },
                LiftedUnaryPlusWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedUnaryPlusWorks()", $t.Line = "478", $t));
                    t.Fixture.LiftedUnaryPlusWorks();
                },
                LiftedOnesComplementWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedOnesComplementWorks()", $t.Line = "486", $t));
                    t.Fixture.LiftedOnesComplementWorks();
                },
                CoalesceWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CoalesceWorks()", $t.Line = "494", $t));
                    t.Fixture.CoalesceWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.NullableTests", $t.File = "Batch4\\NullableTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullReferenceExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NullReferenceExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NullReferenceExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullReferenceExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "9", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NullReferenceExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullReferenceExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "23", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NullReferenceExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullReferenceExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "32", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NullReferenceExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullReferenceExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "41", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                AccessingAFieldOnANullObjectCausesANullReferenceException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NullReferenceExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NullReferenceExceptionTests, 2, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AccessingAFieldOnANullObjectCausesANullReferenceException()", $t.Line = "51", $t));
                    t.Fixture.AccessingAFieldOnANullObjectCausesANullReferenceException();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Exceptions.NullReferenceExceptionTests", $t.File = "Batch4\\Exceptions\\NullReferenceExceptionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NumberFormatInfoTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NumberFormatInfoTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NumberFormatInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NumberFormatInfoTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "11", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                GetFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NumberFormatInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NumberFormatInfoTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetFormatWorks()", $t.Line = "21", $t));
                    t.Fixture.GetFormatWorks();
                },
                InvariantWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.NumberFormatInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.NumberFormatInfoTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvariantWorks()", $t.Line = "29", $t));
                    t.Fixture.InvariantWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.NumberFormatInfoTests", $t.File = "Batch4\\NumberFormatInfoTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ObjectTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ObjectTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "20", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                CanGetHashCodeForObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ObjectTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanGetHashCodeForObject()", $t.Line = "28", $t));
                    t.Fixture.CanGetHashCodeForObject();
                },
                RepeatedCallsToGetHashCodeReturnsSameValue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ObjectTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RepeatedCallsToGetHashCodeReturnsSameValue()", $t.Line = "36", $t));
                    t.Fixture.RepeatedCallsToGetHashCodeReturnsSameValue();
                },
                ObjectIsEqualToItself: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ObjectTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ObjectIsEqualToItself()", $t.Line = "43", $t));
                    t.Fixture.ObjectIsEqualToItself();
                },
                ObjectIsNotEqualToOtherObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ObjectTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ObjectIsNotEqualToOtherObject()", $t.Line = "50", $t));
                    t.Fixture.ObjectIsNotEqualToOtherObject();
                },
                StaticEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ObjectTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticEqualsWorks()", $t.Line = "56", $t));
                    t.Fixture.StaticEqualsWorks();
                },
                ReferenceEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ObjectTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReferenceEqualsWorks()", $t.Line = "67", $t));
                    t.Fixture.ReferenceEqualsWorks();
                },
                ToStringOverride: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ObjectTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringOverride()", $t.Line = "79", $t));
                    t.Fixture.ToStringOverride();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests", $t.File = "Batch4\\SimpleTypes\\ObjectTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.OperationCanceledExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OperationCanceledExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OperationCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.OperationCanceledExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OperationCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.OperationCanceledExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "24", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                CancellationTokenOnlyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OperationCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.OperationCanceledExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CancellationTokenOnlyConstructorWorks()", $t.Line = "34", $t));
                    t.Fixture.CancellationTokenOnlyConstructorWorks();
                },
                MessageOnlyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OperationCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.OperationCanceledExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MessageOnlyConstructorWorks()", $t.Line = "45", $t));
                    t.Fixture.MessageOnlyConstructorWorks();
                },
                MessageAndInnerExceptionConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OperationCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.OperationCanceledExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MessageAndInnerExceptionConstructorWorks()", $t.Line = "55", $t));
                    t.Fixture.MessageAndInnerExceptionConstructorWorks();
                },
                MessageAndCancellationTokenConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OperationCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.OperationCanceledExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MessageAndCancellationTokenConstructorWorks()", $t.Line = "66", $t));
                    t.Fixture.MessageAndCancellationTokenConstructorWorks();
                },
                MessageAndInnerExceptionAndCancellationTokenConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OperationCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.OperationCanceledExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MessageAndInnerExceptionAndCancellationTokenConstructorWorks()", $t.Line = "77", $t));
                    t.Fixture.MessageAndInnerExceptionAndCancellationTokenConstructorWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Exceptions.OperationCanceledExceptionTests", $t.File = "Batch4\\Exceptions\\OperationCanceledExceptionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.OverflowExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OverflowExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OverflowExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.OverflowExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "9", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OverflowExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.OverflowExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "23", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OverflowExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.OverflowExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "32", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OverflowExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.OverflowExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "41", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Exceptions.OverflowExceptionTests", $t.File = "Batch4\\Exceptions\\OverflowExceptionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PromiseExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.PromiseExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.PromiseExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PromiseExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                ArgumentsOnlyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.PromiseExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PromiseExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArgumentsOnlyConstructorWorks()", $t.Line = "24", $t));
                    t.Fixture.ArgumentsOnlyConstructorWorks();
                },
                ArgumentsAndMessageConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.PromiseExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PromiseExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArgumentsAndMessageConstructorWorks()", $t.Line = "36", $t));
                    t.Fixture.ArgumentsAndMessageConstructorWorks();
                },
                ArgumentsAndMessageAndInnerExceptionConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.PromiseExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PromiseExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArgumentsAndMessageAndInnerExceptionConstructorWorks()", $t.Line = "47", $t));
                    t.Fixture.ArgumentsAndMessageAndInnerExceptionConstructorWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Exceptions.PromiseExceptionTests", $t.File = "Batch4\\Exceptions\\PromiseExceptionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PromiseTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.PromiseTests)],
        statics: {
            methods: {
                TaskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.PromiseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PromiseTests, 7, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TaskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes()", $t.Line = "156", $t));
                    t.Fixture.TaskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes();
                },
                TaskFromPromiseWithResultFactoryWorksWhenPromiseCompletes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.PromiseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PromiseTests, 7, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TaskFromPromiseWithResultFactoryWorksWhenPromiseCompletes()", $t.Line = "188", $t));
                    t.Fixture.TaskFromPromiseWithResultFactoryWorksWhenPromiseCompletes();
                },
                TaskFromPromiseWorksWhenPromiseFails: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.PromiseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PromiseTests, 10, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TaskFromPromiseWorksWhenPromiseFails()", $t.Line = "227", $t));
                    t.Fixture.TaskFromPromiseWorksWhenPromiseFails();
                },
                CompletingPromiseCanBeAwaited: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.PromiseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PromiseTests, 3, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompletingPromiseCanBeAwaited()", $t.Line = "262", $t));
                    t.Fixture.CompletingPromiseCanBeAwaited();
                },
                FailingPromiseCanBeAwaited: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.PromiseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PromiseTests, 4, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FailingPromiseCanBeAwaited()", $t.Line = "284", $t));
                    t.Fixture.FailingPromiseCanBeAwaited();
                },
                TaskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.PromiseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PromiseTests, 9, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TaskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes()", $t.Line = "332", $t));
                    t.Fixture.TaskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Threading.PromiseTests", $t.File = "Batch4\\Threading\\Tasks\\PromiseTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PropertyAccessorTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.PropertyAccessorTests)],
        statics: {
            methods: {
                AccessorsCanBeInvokedInstance: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.PropertyAccessorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PropertyAccessorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AccessorsCanBeInvokedInstance()", $t.Line = "285", $t));
                    t.Fixture.AccessorsCanBeInvokedInstance();
                },
                AccessorsCanBeInvokedStatic: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.PropertyAccessorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PropertyAccessorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AccessorsCanBeInvokedStatic()", $t.Line = "304", $t));
                    t.Fixture.AccessorsCanBeInvokedStatic();
                },
                AccessorsCanBeInvokedGeneric: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.PropertyAccessorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PropertyAccessorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AccessorsCanBeInvokedGeneric()", $t.Line = "321", $t));
                    t.Fixture.AccessorsCanBeInvokedGeneric();
                },
                AccessorsCanBeInvokedGenericStatic: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.PropertyAccessorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PropertyAccessorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AccessorsCanBeInvokedGenericStatic()", $t.Line = "340", $t));
                    t.Fixture.AccessorsCanBeInvokedGenericStatic();
                },
                BaseAccessorsCanBeInvoked: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.PropertyAccessorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PropertyAccessorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BaseAccessorsCanBeInvoked()", $t.Line = "357", $t));
                    t.Fixture.BaseAccessorsCanBeInvoked();
                },
                BaseAccessorsCanBeInvokedGeneric: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.PropertyAccessorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.PropertyAccessorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BaseAccessorsCanBeInvokedGeneric()", $t.Line = "376", $t));
                    t.Fixture.BaseAccessorsCanBeInvokedGeneric();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.PropertyAccessorTests", $t.File = "Batch4\\PropertyAccessorTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RandomTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.RandomTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.RandomTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RandomTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "9", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.RandomTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RandomTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "20", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                SeedConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.RandomTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RandomTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SeedConstructorWorks()", $t.Line = "26", $t));
                    t.Fixture.SeedConstructorWorks();
                },
                NextWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.RandomTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RandomTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NextWorks()", $t.Line = "34", $t));
                    t.Fixture.NextWorks();
                },
                NextWithMaxWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.RandomTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RandomTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NextWithMaxWorks()", $t.Line = "46", $t));
                    t.Fixture.NextWithMaxWorks();
                },
                NextWithMinAndMaxWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.RandomTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RandomTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NextWithMinAndMaxWorks()", $t.Line = "58", $t));
                    t.Fixture.NextWithMinAndMaxWorks();
                },
                NextDoubleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.RandomTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RandomTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NextDoubleWorks()", $t.Line = "70", $t));
                    t.Fixture.NextDoubleWorks();
                },
                NextBytesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.RandomTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RandomTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NextBytesWorks()", $t.Line = "82", $t));
                    t.Fixture.NextBytesWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.RandomTests", $t.File = "Batch4\\RandomTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "30", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                ConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWorks()", $t.Line = "42", $t));
                    t.Fixture.ConstructorWorks();
                },
                CountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CountWorks()", $t.Line = "52", $t));
                    t.Fixture.CountWorks();
                },
                IndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexingWorks()", $t.Line = "60", $t));
                    t.Fixture.IndexingWorks();
                },
                ForeachWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks()", $t.Line = "68", $t));
                    t.Fixture.ForeachWorks();
                },
                GetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumeratorWorks()", $t.Line = "79", $t));
                    t.Fixture.GetEnumeratorWorks();
                },
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "90", $t));
                    t.Fixture.ContainsWorks();
                },
                ContainsUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsUsesEqualsMethod()", $t.Line = "98", $t));
                    t.Fixture.ContainsUsesEqualsMethod();
                },
                IndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWorks()", $t.Line = "106", $t));
                    t.Fixture.IndexOfWorks();
                },
                ForeachWhenCastToIEnumerableWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWhenCastToIEnumerableWorks()", $t.Line = "113", $t));
                    t.Fixture.ForeachWhenCastToIEnumerableWorks();
                },
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEnumerableGetEnumeratorWorks()", $t.Line = "125", $t));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                ICollectionCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionCountWorks()", $t.Line = "137", $t));
                    t.Fixture.ICollectionCountWorks();
                },
                ICollectionContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionContainsWorks()", $t.Line = "144", $t));
                    t.Fixture.ICollectionContainsWorks();
                },
                ICollectionContainsUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionContainsUsesEqualsMethod()", $t.Line = "152", $t));
                    t.Fixture.ICollectionContainsUsesEqualsMethod();
                },
                IListIndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIndexingWorks()", $t.Line = "160", $t));
                    t.Fixture.IListIndexingWorks();
                },
                IListIndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIndexOfWorks()", $t.Line = "167", $t));
                    t.Fixture.IListIndexOfWorks();
                },
                IListIndexOfUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIndexOfUsesEqualsMethod()", $t.Line = "175", $t));
                    t.Fixture.IListIndexOfUsesEqualsMethod();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests", $t.File = "Batch4\\Collections\\ObjectModel\\ReadOnlyCollectionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests)],
        statics: {
            methods: {
                GetMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute()", $t.Line = "838", $t));
                    t.Fixture.GetMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute();
                },
                StructMemberReflectionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StructMemberReflectionWorks()", $t.Line = "847", $t));
                    t.Fixture.StructMemberReflectionWorks();
                },
                IsStaticFlagWorksForMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsStaticFlagWorksForMethod()", $t.Line = "856", $t));
                    t.Fixture.IsStaticFlagWorksForMethod();
                },
                MemberTypeIsMethodForMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemberTypeIsMethodForMethod()", $t.Line = "863", $t));
                    t.Fixture.MemberTypeIsMethodForMethod();
                },
                IsConstructorIsFalseForMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsConstructorIsFalseForMethod()", $t.Line = "870", $t));
                    t.Fixture.IsConstructorIsFalseForMethod();
                },
                IsConstructorIsTrueForAllKindsOfConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsConstructorIsTrueForAllKindsOfConstructors()", $t.Line = "877", $t));
                    t.Fixture.IsConstructorIsTrueForAllKindsOfConstructors();
                },
                IsStaticIsFalseForAllKindsOfConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsStaticIsFalseForAllKindsOfConstructors()", $t.Line = "891", $t));
                    t.Fixture.IsStaticIsFalseForAllKindsOfConstructors();
                },
                MemberTypeIsConstructorForAllKindsOfConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemberTypeIsConstructorForAllKindsOfConstructors()", $t.Line = "905", $t));
                    t.Fixture.MemberTypeIsConstructorForAllKindsOfConstructors();
                },
                NameIsCtorForAllKindsOfConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NameIsCtorForAllKindsOfConstructors()", $t.Line = "919", $t));
                    t.Fixture.NameIsCtorForAllKindsOfConstructors();
                },
                DeclaringTypeIsCorrectForAllKindsOfConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DeclaringTypeIsCorrectForAllKindsOfConstructors()", $t.Line = "933", $t));
                    t.Fixture.DeclaringTypeIsCorrectForAllKindsOfConstructors();
                },
                ScriptNameIsCorrectForAllKindsOfConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ScriptNameIsCorrectForAllKindsOfConstructors()", $t.Line = "947", $t));
                    t.Fixture.ScriptNameIsCorrectForAllKindsOfConstructors();
                },
                IsStaticMethodIsTrueOnlyForStaticMethodConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsStaticMethodIsTrueOnlyForStaticMethodConstructors()", $t.Line = "961", $t));
                    t.Fixture.IsStaticMethodIsTrueOnlyForStaticMethodConstructors();
                },
                IsExpandParamsIsCorrectForConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsExpandParamsIsCorrectForConstructors()", $t.Line = "975", $t));
                    t.Fixture.IsExpandParamsIsCorrectForConstructors();
                },
                SpecialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SpecialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors()", $t.Line = "988", $t));
                    t.Fixture.SpecialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors();
                },
                DeclaringTypeShouldBeCorrectForMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DeclaringTypeShouldBeCorrectForMethods()", $t.Line = "1002", $t));
                    t.Fixture.DeclaringTypeShouldBeCorrectForMethods();
                },
                ReturnTypeAndParameterTypesAreCorrectForMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReturnTypeAndParameterTypesAreCorrectForMethods()", $t.Line = "1010", $t));
                    t.Fixture.ReturnTypeAndParameterTypesAreCorrectForMethods();
                },
                ParameterTypesShouldBeCorrectForConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParameterTypesShouldBeCorrectForConstructors()", $t.Line = "1033", $t));
                    t.Fixture.ParameterTypesShouldBeCorrectForConstructors();
                },
                VoidIsConsideredObjectAsReturnType: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "VoidIsConsideredObjectAsReturnType()", $t.Line = "1047", $t));
                    t.Fixture.VoidIsConsideredObjectAsReturnType();
                },
                MethodNameIsTheCSharpName: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MethodNameIsTheCSharpName()", $t.Line = "1053", $t));
                    t.Fixture.MethodNameIsTheCSharpName();
                },
                TypeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes()", $t.Line = "1060", $t));
                    t.Fixture.TypeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes();
                },
                TypeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes()", $t.Line = "1068", $t));
                    t.Fixture.TypeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes();
                },
                MethodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MethodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes()", $t.Line = "1080", $t));
                    t.Fixture.MethodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes();
                },
                IsGenericMethodDefinitionAndTypeParameterCountWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsGenericMethodDefinitionAndTypeParameterCountWork()", $t.Line = "1088", $t));
                    t.Fixture.IsGenericMethodDefinitionAndTypeParameterCountWork();
                },
                ScriptNameWorksForAllKindsOfMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ScriptNameWorksForAllKindsOfMethods()", $t.Line = "1099", $t));
                    t.Fixture.ScriptNameWorksForAllKindsOfMethods();
                },
                SpecialImplementationExistsOnlyForMethodsImplementedAsInlineCode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SpecialImplementationExistsOnlyForMethodsImplementedAsInlineCode()", $t.Line = "1113", $t));
                    t.Fixture.SpecialImplementationExistsOnlyForMethodsImplementedAsInlineCode();
                },
                IsExpandParamsIsCorrectForMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsExpandParamsIsCorrectForMethods()", $t.Line = "1121", $t));
                    t.Fixture.IsExpandParamsIsCorrectForMethods();
                },
                CreateDelegateWorksForNonGenericInstanceMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateDelegateWorksForNonGenericInstanceMethods()", $t.Line = "1134", $t));
                    t.Fixture.CreateDelegateWorksForNonGenericInstanceMethods();
                },
                DelegateCreateDelegateWorksForNonGenericInstanceMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DelegateCreateDelegateWorksForNonGenericInstanceMethods()", $t.Line = "1152", $t));
                    t.Fixture.DelegateCreateDelegateWorksForNonGenericInstanceMethods();
                },
                CreateDelegateWorksNonGenericStaticMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateDelegateWorksNonGenericStaticMethods()", $t.Line = "1160", $t));
                    t.Fixture.CreateDelegateWorksNonGenericStaticMethods();
                },
                CreateDelegateWorksNonGenericStaticMethodOfGenericType: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateDelegateWorksNonGenericStaticMethodOfGenericType()", $t.Line = "1179", $t));
                    t.Fixture.CreateDelegateWorksNonGenericStaticMethodOfGenericType();
                },
                CreateDelegateWorksForGenericInstanceMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateDelegateWorksForGenericInstanceMethods()", $t.Line = "1187", $t));
                    t.Fixture.CreateDelegateWorksForGenericInstanceMethods();
                },
                CreateDelegateWorksForGenericStaticMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateDelegateWorksForGenericStaticMethods()", $t.Line = "1201", $t));
                    t.Fixture.CreateDelegateWorksForGenericStaticMethods();
                },
                InvokeWorksForNonGenericInstanceMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeWorksForNonGenericInstanceMethods()", $t.Line = "1214", $t));
                    t.Fixture.InvokeWorksForNonGenericInstanceMethods();
                },
                InvokeWorksForNonGenericStaticMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeWorksForNonGenericStaticMethods()", $t.Line = "1227", $t));
                    t.Fixture.InvokeWorksForNonGenericStaticMethods();
                },
                InvokeWorksForNonGenericInstanceMethodsOnSerializableTypes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeWorksForNonGenericInstanceMethodsOnSerializableTypes()", $t.Line = "1237", $t));
                    t.Fixture.InvokeWorksForNonGenericInstanceMethodsOnSerializableTypes();
                },
                InvokeWorksForNonGenericInlineCodeMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeWorksForNonGenericInlineCodeMethods()", $t.Line = "1244", $t));
                    t.Fixture.InvokeWorksForNonGenericInlineCodeMethods();
                },
                InvokeWorksForGenericInlineCodeMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeWorksForGenericInlineCodeMethods()", $t.Line = "1251", $t));
                    t.Fixture.InvokeWorksForGenericInlineCodeMethods();
                },
                InvokeWorksForGenericInstanceMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeWorksForGenericInstanceMethod()", $t.Line = "1258", $t));
                    t.Fixture.InvokeWorksForGenericInstanceMethod();
                },
                InvokeWorksForGenericStaticMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeWorksForGenericStaticMethod()", $t.Line = "1273", $t));
                    t.Fixture.InvokeWorksForGenericStaticMethod();
                },
                InvokeWorksForGenericInstanceMethodsOnSerializableTypes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeWorksForGenericInstanceMethodsOnSerializableTypes()", $t.Line = "1285", $t));
                    t.Fixture.InvokeWorksForGenericInstanceMethodsOnSerializableTypes();
                },
                InvokeWorksForExpandParamsMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeWorksForExpandParamsMethods()", $t.Line = "1292", $t));
                    t.Fixture.InvokeWorksForExpandParamsMethods();
                },
                InvokeWorksForAllKindsOfConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeWorksForAllKindsOfConstructors()", $t.Line = "1304", $t));
                    t.Fixture.InvokeWorksForAllKindsOfConstructors();
                },
                InvokeWorksForExpandParamsConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeWorksForExpandParamsConstructors()", $t.Line = "1330", $t));
                    t.Fixture.InvokeWorksForExpandParamsConstructors();
                },
                MemberTypeIsFieldForField: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemberTypeIsFieldForField()", $t.Line = "1344", $t));
                    t.Fixture.MemberTypeIsFieldForField();
                },
                DeclaringTypeIsCorrectForField: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DeclaringTypeIsCorrectForField()", $t.Line = "1351", $t));
                    t.Fixture.DeclaringTypeIsCorrectForField();
                },
                NameIsCorrectForField: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NameIsCorrectForField()", $t.Line = "1358", $t));
                    t.Fixture.NameIsCorrectForField();
                },
                IsStaticIsCorrectForField: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsStaticIsCorrectForField()", $t.Line = "1365", $t));
                    t.Fixture.IsStaticIsCorrectForField();
                },
                FieldTypeIsCorrectForField: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FieldTypeIsCorrectForField()", $t.Line = "1373", $t));
                    t.Fixture.FieldTypeIsCorrectForField();
                },
                ScriptNameIsCorrectForField: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ScriptNameIsCorrectForField()", $t.Line = "1381", $t));
                    t.Fixture.ScriptNameIsCorrectForField();
                },
                GetValueWorksForInstanceField: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetValueWorksForInstanceField()", $t.Line = "1388", $t));
                    t.Fixture.GetValueWorksForInstanceField();
                },
                GetValueWorksForStaticField: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetValueWorksForStaticField()", $t.Line = "1395", $t));
                    t.Fixture.GetValueWorksForStaticField();
                },
                SetValueWorksForInstanceField: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetValueWorksForInstanceField()", $t.Line = "1402", $t));
                    t.Fixture.SetValueWorksForInstanceField();
                },
                SetValueWorksForStaticField: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetValueWorksForStaticField()", $t.Line = "1410", $t));
                    t.Fixture.SetValueWorksForStaticField();
                },
                MemberTypeIsEventForEvent: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemberTypeIsEventForEvent()", $t.Line = "1417", $t));
                    t.Fixture.MemberTypeIsEventForEvent();
                },
                DeclaringTypeIsCorrectForEvent: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DeclaringTypeIsCorrectForEvent()", $t.Line = "1424", $t));
                    t.Fixture.DeclaringTypeIsCorrectForEvent();
                },
                NameIsCorrectForEvent: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NameIsCorrectForEvent()", $t.Line = "1431", $t));
                    t.Fixture.NameIsCorrectForEvent();
                },
                IsStaticIsCorrectForEvent: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsStaticIsCorrectForEvent()", $t.Line = "1438", $t));
                    t.Fixture.IsStaticIsCorrectForEvent();
                },
                AddEventHandlerMethodWorksForInstanceEvent: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddEventHandlerMethodWorksForInstanceEvent()", $t.Line = "1445", $t));
                    t.Fixture.AddEventHandlerMethodWorksForInstanceEvent();
                },
                AddEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod()", $t.Line = "1457", $t));
                    t.Fixture.AddEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod();
                },
                AddEventHandlerMethodWorksForStaticEvent: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddEventHandlerMethodWorksForStaticEvent()", $t.Line = "1468", $t));
                    t.Fixture.AddEventHandlerMethodWorksForStaticEvent();
                },
                AddEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod()", $t.Line = "1479", $t));
                    t.Fixture.AddEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod();
                },
                RemoveEventHandlerMethodWorksForInstanceEvent: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveEventHandlerMethodWorksForInstanceEvent()", $t.Line = "1489", $t));
                    t.Fixture.RemoveEventHandlerMethodWorksForInstanceEvent();
                },
                RemoveEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod()", $t.Line = "1504", $t));
                    t.Fixture.RemoveEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod();
                },
                RemoveEventHandlerMethodWorksForStaticEvent: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveEventHandlerMethodWorksForStaticEvent()", $t.Line = "1516", $t));
                    t.Fixture.RemoveEventHandlerMethodWorksForStaticEvent();
                },
                RemoveEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod()", $t.Line = "1530", $t));
                    t.Fixture.RemoveEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod();
                },
                PropertiesForAddMethodAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesForAddMethodAreCorrect()", $t.Line = "1541", $t));
                    t.Fixture.PropertiesForAddMethodAreCorrect();
                },
                PropertiesForRemoveMethodAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesForRemoveMethodAreCorrect()", $t.Line = "1578", $t));
                    t.Fixture.PropertiesForRemoveMethodAreCorrect();
                },
                MemberTypeIsPropertyForProperty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemberTypeIsPropertyForProperty()", $t.Line = "1617", $t));
                    t.Fixture.MemberTypeIsPropertyForProperty();
                },
                ScriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ScriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties()", $t.Line = "1626", $t));
                    t.Fixture.ScriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties();
                },
                MemberTypeIsPropertyForIndexer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemberTypeIsPropertyForIndexer()", $t.Line = "1633", $t));
                    t.Fixture.MemberTypeIsPropertyForIndexer();
                },
                DeclaringTypeIsCorrectForProperty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DeclaringTypeIsCorrectForProperty()", $t.Line = "1640", $t));
                    t.Fixture.DeclaringTypeIsCorrectForProperty();
                },
                DeclaringTypeIsCorrectForIndexer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DeclaringTypeIsCorrectForIndexer()", $t.Line = "1649", $t));
                    t.Fixture.DeclaringTypeIsCorrectForIndexer();
                },
                NameIsCorrectForProperty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NameIsCorrectForProperty()", $t.Line = "1656", $t));
                    t.Fixture.NameIsCorrectForProperty();
                },
                NameIsCorrectForIndexer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NameIsCorrectForIndexer()", $t.Line = "1665", $t));
                    t.Fixture.NameIsCorrectForIndexer();
                },
                IsStaticIsCorrectForProperty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsStaticIsCorrectForProperty()", $t.Line = "1672", $t));
                    t.Fixture.IsStaticIsCorrectForProperty();
                },
                IsStaticIsFalseForIndexer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsStaticIsFalseForIndexer()", $t.Line = "1681", $t));
                    t.Fixture.IsStaticIsFalseForIndexer();
                },
                PropertyTypeIsCorrectForProperty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertyTypeIsCorrectForProperty()", $t.Line = "1688", $t));
                    t.Fixture.PropertyTypeIsCorrectForProperty();
                },
                PropertyTypeIsCorrectForIndexer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertyTypeIsCorrectForIndexer()", $t.Line = "1697", $t));
                    t.Fixture.PropertyTypeIsCorrectForIndexer();
                },
                IndexParameterTypesAreEmptyForProperty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexParameterTypesAreEmptyForProperty()", $t.Line = "1704", $t));
                    t.Fixture.IndexParameterTypesAreEmptyForProperty();
                },
                IndexParameterTypesAreCorrectForIndexer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexParameterTypesAreCorrectForIndexer()", $t.Line = "1713", $t));
                    t.Fixture.IndexParameterTypesAreCorrectForIndexer();
                },
                PropertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods()", $t.Line = "1720", $t));
                    t.Fixture.PropertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods();
                },
                PropertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods()", $t.Line = "1773", $t));
                    t.Fixture.PropertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods();
                },
                PropertiesForGetMethodAreCorrectForPropertyImplementedAsFields: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesForGetMethodAreCorrectForPropertyImplementedAsFields()", $t.Line = "1826", $t));
                    t.Fixture.PropertiesForGetMethodAreCorrectForPropertyImplementedAsFields();
                },
                PropertiesForSetMethodAreCorrectForPropertyImplementedAsFields: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesForSetMethodAreCorrectForPropertyImplementedAsFields()", $t.Line = "1860", $t));
                    t.Fixture.PropertiesForSetMethodAreCorrectForPropertyImplementedAsFields();
                },
                PropertiesForGetMethodAreCorrectForIndexer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesForGetMethodAreCorrectForIndexer()", $t.Line = "1894", $t));
                    t.Fixture.PropertiesForGetMethodAreCorrectForIndexer();
                },
                PropertiesForSetMethodAreCorrectForIndexer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesForSetMethodAreCorrectForIndexer()", $t.Line = "1928", $t));
                    t.Fixture.PropertiesForSetMethodAreCorrectForIndexer();
                },
                CanReadAndWriteAndPropertiesWithOnlyOneAccessor: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanReadAndWriteAndPropertiesWithOnlyOneAccessor()", $t.Line = "1968", $t));
                    t.Fixture.CanReadAndWriteAndPropertiesWithOnlyOneAccessor();
                },
                CanReadAndWriteAndIndexersWithOnlyOneAccessor: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanReadAndWriteAndIndexersWithOnlyOneAccessor()", $t.Line = "2022", $t));
                    t.Fixture.CanReadAndWriteAndIndexersWithOnlyOneAccessor();
                },
                PropertyInfoGetValueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertyInfoGetValueWorks()", $t.Line = "2040", $t));
                    t.Fixture.PropertyInfoGetValueWorks();
                },
                PropertyInfoSetValueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertyInfoSetValueWorks()", $t.Line = "2061", $t));
                    t.Fixture.PropertyInfoSetValueWorks();
                },
                MemberAttributesWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemberAttributesWork()", $t.Line = "2116", $t));
                    t.Fixture.MemberAttributesWork();
                },
                MembersReflectableAttributeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MembersReflectableAttributeWorks()", $t.Line = "2132", $t));
                    t.Fixture.MembersReflectableAttributeWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Reflection.ReflectionTests", $t.File = "Batch4\\Reflection\\ReflectionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RefParameterTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.RefParameterTests)],
        statics: {
            methods: {
                CanUseReferenceToLocalVariables: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.RefParameterTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RefParameterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanUseReferenceToLocalVariables()", $t.Line = "19", $t));
                    t.Fixture.CanUseReferenceToLocalVariables();
                },
                CanUseReferenceToField: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.RefParameterTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RefParameterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanUseReferenceToField()", $t.Line = "37", $t));
                    t.Fixture.CanUseReferenceToField();
                },
                CanUseReferenceToOneDimensionalArray: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.RefParameterTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RefParameterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanUseReferenceToOneDimensionalArray()", $t.Line = "58", $t));
                    t.Fixture.CanUseReferenceToOneDimensionalArray();
                },
                CanUseReferenceToMultiDimensionalArray: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.RefParameterTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RefParameterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanUseReferenceToMultiDimensionalArray()", $t.Line = "73", $t));
                    t.Fixture.CanUseReferenceToMultiDimensionalArray();
                },
                CanUseReferenceToThis_SPI_1569: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.RefParameterTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RefParameterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanUseReferenceToThis_SPI_1569()", $t.Line = "152", $t));
                    t.Fixture.CanUseReferenceToThis_SPI_1569();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.RefParameterTests", $t.File = "Batch4\\RefParameterTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RegexTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RegexTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "9", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                StringOnlyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RegexTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringOnlyConstructorWorks()", $t.Line = "18", $t));
                    t.Fixture.StringOnlyConstructorWorks();
                },
                ConstructorWithFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RegexTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithFlagsWorks()", $t.Line = "26", $t));
                    t.Fixture.ConstructorWithFlagsWorks();
                },
                GlobalFlagWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RegexTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GlobalFlagWorks()", $t.Line = "34", $t));
                    t.Fixture.GlobalFlagWorks();
                },
                IgnoreCaseFlagWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RegexTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IgnoreCaseFlagWorks()", $t.Line = "41", $t));
                    t.Fixture.IgnoreCaseFlagWorks();
                },
                MultilineFlagWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RegexTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MultilineFlagWorks()", $t.Line = "48", $t));
                    t.Fixture.MultilineFlagWorks();
                },
                PatternPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RegexTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PatternPropertyWorks()", $t.Line = "55", $t));
                    t.Fixture.PatternPropertyWorks();
                },
                SourcePropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RegexTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SourcePropertyWorks()", $t.Line = "61", $t));
                    t.Fixture.SourcePropertyWorks();
                },
                ExecWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RegexTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExecWorks()", $t.Line = "67", $t));
                    t.Fixture.ExecWorks();
                },
                LastIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RegexTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LastIndexWorks()", $t.Line = "77", $t));
                    t.Fixture.LastIndexWorks();
                },
                TestWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RegexTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWorks()", $t.Line = "85", $t));
                    t.Fixture.TestWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests", $t.File = "Batch4\\Text\\RegularExpressions\\RegexTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RuntimeHelpersTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Runtime.CompilerServices.RuntimeHelpersTests)],
        statics: {
            methods: {
                GetHashCodeWoksForObject_SPI_1570: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Runtime.CompilerServices.RuntimeHelpersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RuntimeHelpersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWoksForObject_SPI_1570()", $t.Line = "17", $t));
                    t.Fixture.GetHashCodeWoksForObject_SPI_1570();
                },
                GetHashCodeCallsGetHashCodeNonVirtually_SPI_1570: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Runtime.CompilerServices.RuntimeHelpersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.RuntimeHelpersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeCallsGetHashCodeNonVirtually_SPI_1570()", $t.Line = "26", $t));
                    t.Fixture.GetHashCodeCallsGetHashCodeNonVirtually_SPI_1570();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Runtime.CompilerServices.RuntimeHelpersTests", $t.File = "Batch4\\Runtime\\CompilerServices\\RuntimeHelpersTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1717: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1717()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1717();
                },
                CastsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastsWork()", $t.Line = "35", $t));
                    t.Fixture.CastsWork();
                },
                DefaultValueIs0: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueIs0()", $t.Line = "91", $t));
                    t.Fixture.DefaultValueIs0();
                },
                DefaultConstructorReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsZero()", $t.Line = "97", $t));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                CreatingInstanceReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsZero()", $t.Line = "103", $t));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                ConstantsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWork()", $t.Line = "109", $t));
                    t.Fixture.ConstantsWork();
                },
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "116", $t));
                    t.Fixture.FormatWorks();
                },
                ToStringWithFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatWorks()", $t.Line = "122", $t));
                    t.Fixture.ToStringWithFormatWorks();
                },
                ToStringWithFormatAndProviderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatAndProviderWorks()", $t.Line = "128", $t));
                    t.Fixture.ToStringWithFormatAndProviderWorks();
                },
                IFormattableToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks()", $t.Line = "134", $t));
                    t.Fixture.IFormattableToStringWorks();
                },
                TryParseWorks_SPI_1592: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseWorks_SPI_1592()", $t.Line = "147", $t));
                    t.Fixture.TryParseWorks_SPI_1592();
                },
                ParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks()", $t.Line = "181", $t));
                    t.Fixture.ParseWorks();
                },
                ToStringWithoutRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithoutRadixWorks()", $t.Line = "193", $t));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                ToStringWithRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithRadixWorks()", $t.Line = "199", $t));
                    t.Fixture.ToStringWithRadixWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "206", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "214", $t));
                    t.Fixture.EqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "223", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "237", $t));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "245", $t));
                    t.Fixture.IComparableCompareToWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.SimpleTypes.SByteTests", $t.File = "Batch4\\SimpleTypes\\SByteTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1717: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1717()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1717();
                },
                DefaultValueIs0: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueIs0()", $t.Line = "37", $t));
                    t.Fixture.DefaultValueIs0();
                },
                CreatingInstanceReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsZero()", $t.Line = "43", $t));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                ConstantsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWork()", $t.Line = "49", $t));
                    t.Fixture.ConstantsWork();
                },
                DefaultConstructorReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsZero()", $t.Line = "61", $t));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "67", $t));
                    t.Fixture.FormatWorks();
                },
                ToStringWithFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatWorks()", $t.Line = "73", $t));
                    t.Fixture.ToStringWithFormatWorks();
                },
                ToStringWithFormatAndProviderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatAndProviderWorks()", $t.Line = "79", $t));
                    t.Fixture.ToStringWithFormatAndProviderWorks();
                },
                IFormattableToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks()", $t.Line = "85", $t));
                    t.Fixture.IFormattableToStringWorks();
                },
                ToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWorks()", $t.Line = "98", $t));
                    t.Fixture.ToStringWorks();
                },
                ToExponentialWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToExponentialWorks()", $t.Line = "104", $t));
                    t.Fixture.ToExponentialWorks();
                },
                ToExponentialWithFractionalDigitsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToExponentialWithFractionalDigitsWorks()", $t.Line = "110", $t));
                    t.Fixture.ToExponentialWithFractionalDigitsWorks();
                },
                ToFixed: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToFixed()", $t.Line = "116", $t));
                    t.Fixture.ToFixed();
                },
                ToFixedWithFractionalDigitsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToFixedWithFractionalDigitsWorks()", $t.Line = "122", $t));
                    t.Fixture.ToFixedWithFractionalDigitsWorks();
                },
                ToPrecisionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToPrecisionWorks()", $t.Line = "128", $t));
                    t.Fixture.ToPrecisionWorks();
                },
                ToPrecisionWithPrecisionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToPrecisionWithPrecisionWorks()", $t.Line = "134", $t));
                    t.Fixture.ToPrecisionWithPrecisionWorks();
                },
                IsPositiveInfinityWorks_SPI_1600: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsPositiveInfinityWorks_SPI_1600()", $t.Line = "140", $t));
                    t.Fixture.IsPositiveInfinityWorks_SPI_1600();
                },
                IsNegativeInfinityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsNegativeInfinityWorks()", $t.Line = "152", $t));
                    t.Fixture.IsNegativeInfinityWorks();
                },
                IsInfinityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsInfinityWorks()", $t.Line = "162", $t));
                    t.Fixture.IsInfinityWorks();
                },
                IsFiniteWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsFiniteWorks()", $t.Line = "172", $t));
                    t.Fixture.IsFiniteWorks();
                },
                IsNaNWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsNaNWorks()", $t.Line = "181", $t));
                    t.Fixture.IsNaNWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "190", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "199", $t));
                    t.Fixture.EqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "208", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "222", $t));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "231", $t));
                    t.Fixture.IComparableCompareToWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.SimpleTypes.SingleTests", $t.File = "Batch4\\SimpleTypes\\SingleTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StopwatchTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.StopwatchTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.StopwatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StopwatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.StopwatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StopwatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "21", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstantsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.StopwatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StopwatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWorks()", $t.Line = "29", $t));
                    t.Fixture.ConstantsWorks();
                },
                StartNewWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.StopwatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StopwatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StartNewWorks()", $t.Line = "36", $t));
                    t.Fixture.StartNewWorks();
                },
                StartAndStopWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.StopwatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StopwatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StartAndStopWork()", $t.Line = "44", $t));
                    t.Fixture.StartAndStopWork();
                },
                ElapsedWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.StopwatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StopwatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ElapsedWorks()", $t.Line = "55", $t));
                    t.Fixture.ElapsedWorks();
                },
                GetTimestampWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.StopwatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StopwatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetTimestampWorks()", $t.Line = "80", $t));
                    t.Fixture.GetTimestampWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.StopwatchTests", $t.File = "Batch4\\StopwatchTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1597: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1597()", $t.Line = "50", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1597();
                },
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "69", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                CharAndCountConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CharAndCountConstructorWorks()", $t.Line = "75", $t));
                    t.Fixture.CharAndCountConstructorWorks();
                },
                CharArrayConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CharArrayConstructorWorks()", $t.Line = "81", $t));
                    t.Fixture.CharArrayConstructorWorks();
                },
                CharArrayWithStartIndexAndLengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CharArrayWithStartIndexAndLengthConstructorWorks()", $t.Line = "87", $t));
                    t.Fixture.CharArrayWithStartIndexAndLengthConstructorWorks();
                },
                EmptyFieldWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EmptyFieldWorks()", $t.Line = "93", $t));
                    t.Fixture.EmptyFieldWorks();
                },
                LengthPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthPropertyWorks()", $t.Line = "99", $t));
                    t.Fixture.LengthPropertyWorks();
                },
                CharAtWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CharAtWorks()", $t.Line = "106", $t));
                    t.Fixture.CharAtWorks();
                },
                JsCharAtWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "JsCharAtWorks()", $t.Line = "113", $t));
                    t.Fixture.JsCharAtWorks();
                },
                CharCodeAtWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CharCodeAtWorks()", $t.Line = "120", $t));
                    t.Fixture.CharCodeAtWorks();
                },
                CompareToWithIgnoreCaseArgWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWithIgnoreCaseArgWorks()", $t.Line = "126", $t));
                    t.Fixture.CompareToWithIgnoreCaseArgWorks();
                },
                CompareWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareWorks()", $t.Line = "139", $t));
                    t.Fixture.CompareWorks();
                },
                CompareWithIgnoreCaseArgWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareWithIgnoreCaseArgWorks()", $t.Line = "151", $t));
                    t.Fixture.CompareWithIgnoreCaseArgWorks();
                },
                ConcatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConcatWorks()", $t.Line = "166", $t));
                    t.Fixture.ConcatWorks();
                },
                ConcatWithObjectsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConcatWithObjectsWorks()", $t.Line = "179", $t));
                    t.Fixture.ConcatWithObjectsWorks();
                },
                EndsWithStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EndsWithStringWorks()", $t.Line = "229", $t));
                    t.Fixture.EndsWithStringWorks();
                },
                StaticEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticEqualsWorks()", $t.Line = "236", $t));
                    t.Fixture.StaticEqualsWorks();
                },
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "277", $t));
                    t.Fixture.FormatWorks();
                },
                FormatWorksWithIFormattable_SPI_1598: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorksWithIFormattable_SPI_1598()", $t.Line = "296", $t));
                    t.Fixture.FormatWorksWithIFormattable_SPI_1598();
                },
                FormatWorksWithIFormattableAndFormatProvider_SPI_1598: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorksWithIFormattableAndFormatProvider_SPI_1598()", $t.Line = "304", $t));
                    t.Fixture.FormatWorksWithIFormattableAndFormatProvider_SPI_1598();
                },
                FormatCanUseEscapedBraces: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatCanUseEscapedBraces()", $t.Line = "312", $t));
                    t.Fixture.FormatCanUseEscapedBraces();
                },
                FromCharCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromCharCodeWorks()", $t.Line = "318", $t));
                    t.Fixture.FromCharCodeWorks();
                },
                IndexOfCharWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfCharWorks()", $t.Line = "344", $t));
                    t.Fixture.IndexOfCharWorks();
                },
                IndexOfStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfStringWorks()", $t.Line = "351", $t));
                    t.Fixture.IndexOfStringWorks();
                },
                IndexOfCharWithStartIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfCharWithStartIndexWorks()", $t.Line = "358", $t));
                    t.Fixture.IndexOfCharWithStartIndexWorks();
                },
                IndexOfCharWithStartIndexAndCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfCharWithStartIndexAndCountWorks()", $t.Line = "365", $t));
                    t.Fixture.IndexOfCharWithStartIndexAndCountWorks();
                },
                IndexOfStringWithStartIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfStringWithStartIndexWorks()", $t.Line = "373", $t));
                    t.Fixture.IndexOfStringWithStartIndexWorks();
                },
                IndexOfStringWithStartIndexAndCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfStringWithStartIndexAndCountWorks()", $t.Line = "380", $t));
                    t.Fixture.IndexOfStringWithStartIndexAndCountWorks();
                },
                IndexOfAnyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfAnyWorks()", $t.Line = "388", $t));
                    t.Fixture.IndexOfAnyWorks();
                },
                IndexOfAnyWithStartIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfAnyWithStartIndexWorks()", $t.Line = "397", $t));
                    t.Fixture.IndexOfAnyWithStartIndexWorks();
                },
                IndexOfAnyWithStartIndexAndCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfAnyWithStartIndexAndCountWorks()", $t.Line = "406", $t));
                    t.Fixture.IndexOfAnyWithStartIndexAndCountWorks();
                },
                InsertWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InsertWorks()", $t.Line = "416", $t));
                    t.Fixture.InsertWorks();
                },
                IsNullOrEmptyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsNullOrEmptyWorks()", $t.Line = "422", $t));
                    t.Fixture.IsNullOrEmptyWorks();
                },
                LastIndexOfCharWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LastIndexOfCharWorks()", $t.Line = "431", $t));
                    t.Fixture.LastIndexOfCharWorks();
                },
                LastIndexOfStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LastIndexOfStringWorks()", $t.Line = "438", $t));
                    t.Fixture.LastIndexOfStringWorks();
                },
                LastIndexOfCharWithStartIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LastIndexOfCharWithStartIndexWorks()", $t.Line = "445", $t));
                    t.Fixture.LastIndexOfCharWithStartIndexWorks();
                },
                LastIndexOfStringWithStartIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LastIndexOfStringWithStartIndexWorks()", $t.Line = "452", $t));
                    t.Fixture.LastIndexOfStringWithStartIndexWorks();
                },
                LastIndexOfCharWithStartIndexAndCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LastIndexOfCharWithStartIndexAndCountWorks()", $t.Line = "459", $t));
                    t.Fixture.LastIndexOfCharWithStartIndexAndCountWorks();
                },
                LastIndexOfStringWithStartIndexAndCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LastIndexOfStringWithStartIndexAndCountWorks()", $t.Line = "467", $t));
                    t.Fixture.LastIndexOfStringWithStartIndexAndCountWorks();
                },
                LastIndexOfAnyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LastIndexOfAnyWorks()", $t.Line = "475", $t));
                    t.Fixture.LastIndexOfAnyWorks();
                },
                LastIndexOfAnyWithStartIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LastIndexOfAnyWithStartIndexWorks()", $t.Line = "484", $t));
                    t.Fixture.LastIndexOfAnyWithStartIndexWorks();
                },
                LastIndexOfAnyWithStartIndexAndCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LastIndexOfAnyWithStartIndexAndCountWorks()", $t.Line = "493", $t));
                    t.Fixture.LastIndexOfAnyWithStartIndexAndCountWorks();
                },
                LocaleCompareWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LocaleCompareWorks()", $t.Line = "504", $t));
                    t.Fixture.LocaleCompareWorks();
                },
                PadLeftWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PadLeftWorks()", $t.Line = "531", $t));
                    t.Fixture.PadLeftWorks();
                },
                PadLeftWithCharWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PadLeftWithCharWorks()", $t.Line = "537", $t));
                    t.Fixture.PadLeftWithCharWorks();
                },
                PadRightWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PadRightWorks()", $t.Line = "543", $t));
                    t.Fixture.PadRightWorks();
                },
                PadRightWithCharWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PadRightWithCharWorks()", $t.Line = "549", $t));
                    t.Fixture.PadRightWithCharWorks();
                },
                RemoveWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveWorks()", $t.Line = "555", $t));
                    t.Fixture.RemoveWorks();
                },
                RemoveWithCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveWithCountWorks()", $t.Line = "561", $t));
                    t.Fixture.RemoveWithCountWorks();
                },
                ReplaceWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReplaceWorks()", $t.Line = "567", $t));
                    t.Fixture.ReplaceWorks();
                },
                ReplaceCharWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReplaceCharWorks()", $t.Line = "574", $t));
                    t.Fixture.ReplaceCharWorks();
                },
                ReplaceRegexWithReplaceCallbackWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReplaceRegexWithReplaceCallbackWorks()", $t.Line = "593", $t));
                    t.Fixture.ReplaceRegexWithReplaceCallbackWorks();
                },
                SearchWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SearchWorks()", $t.Line = "599", $t));
                    t.Fixture.SearchWorks();
                },
                SplitWithStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithStringWorks()", $t.Line = "607", $t));
                    t.Fixture.SplitWithStringWorks();
                },
                SplitWithCharWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithCharWorks()", $t.Line = "613", $t));
                    t.Fixture.SplitWithCharWorks();
                },
                SplitWithCharsAndLimitWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithCharsAndLimitWorks()", $t.Line = "633", $t));
                    t.Fixture.SplitWithCharsAndLimitWorks();
                },
                SplitWithCharsAndStringSplitOptionsAndLimitWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithCharsAndStringSplitOptionsAndLimitWorks()", $t.Line = "639", $t));
                    t.Fixture.SplitWithCharsAndStringSplitOptionsAndLimitWorks();
                },
                SomeNetSplitTests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SomeNetSplitTests()", $t.Line = "658", $t));
                    t.Fixture.SomeNetSplitTests();
                },
                SplitWithCharsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithCharsWorks()", $t.Line = "690", $t));
                    t.Fixture.SplitWithCharsWorks();
                },
                SplitWithStringsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithStringsWorks()", $t.Line = "698", $t));
                    t.Fixture.SplitWithStringsWorks();
                },
                SplitWithStringsAndLimitWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithStringsAndLimitWorks()", $t.Line = "705", $t));
                    t.Fixture.SplitWithStringsAndLimitWorks();
                },
                StartsWithStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StartsWithStringWorks()", $t.Line = "719", $t));
                    t.Fixture.StartsWithStringWorks();
                },
                SubstrWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubstrWorks()", $t.Line = "727", $t));
                    t.Fixture.SubstrWorks();
                },
                SubstrWithLengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubstrWithLengthWorks()", $t.Line = "734", $t));
                    t.Fixture.SubstrWithLengthWorks();
                },
                SubstringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubstringWorks()", $t.Line = "740", $t));
                    t.Fixture.SubstringWorks();
                },
                SubstringWithLengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubstringWithLengthWorks()", $t.Line = "746", $t));
                    t.Fixture.SubstringWithLengthWorks();
                },
                JavaScriptSubstringWithEndIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "JavaScriptSubstringWithEndIndexWorks()", $t.Line = "753", $t));
                    t.Fixture.JavaScriptSubstringWithEndIndexWorks();
                },
                ToLowerWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToLowerWorks()", $t.Line = "787", $t));
                    t.Fixture.ToLowerWorks();
                },
                ToUpperWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToUpperWorks()", $t.Line = "793", $t));
                    t.Fixture.ToUpperWorks();
                },
                TrimWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TrimWorks()", $t.Line = "799", $t));
                    t.Fixture.TrimWorks();
                },
                TrimCharsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TrimCharsWorks()", $t.Line = "805", $t));
                    t.Fixture.TrimCharsWorks();
                },
                TrimStartCharsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TrimStartCharsWorks()", $t.Line = "811", $t));
                    t.Fixture.TrimStartCharsWorks();
                },
                TrimEndCharsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TrimEndCharsWorks()", $t.Line = "817", $t));
                    t.Fixture.TrimEndCharsWorks();
                },
                TrimStartWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TrimStartWorks()", $t.Line = "823", $t));
                    t.Fixture.TrimStartWorks();
                },
                TrimEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TrimEndWorks()", $t.Line = "829", $t));
                    t.Fixture.TrimEndWorks();
                },
                StringEqualityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringEqualityWorks()", $t.Line = "835", $t));
                    t.Fixture.StringEqualityWorks();
                },
                StringInequalityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringInequalityWorks()", $t.Line = "845", $t));
                    t.Fixture.StringInequalityWorks();
                },
                StringIndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringIndexingWorks()", $t.Line = "855", $t));
                    t.Fixture.StringIndexingWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "865", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                InstanceEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InstanceEqualsWorks()", $t.Line = "875", $t));
                    t.Fixture.InstanceEqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "886", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "904", $t));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "915", $t));
                    t.Fixture.IComparableCompareToWorks();
                },
                JoinWorks_SPI_1599: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "JoinWorks_SPI_1599()", $t.Line = "926", $t));
                    t.Fixture.JoinWorks_SPI_1599();
                },
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "942", $t));
                    t.Fixture.ContainsWorks();
                },
                ToCharArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToCharArrayWorks()", $t.Line = "951", $t));
                    t.Fixture.ToCharArrayWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.SimpleTypes.StringTests", $t.File = "Batch4\\SimpleTypes\\StringTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskCanceledExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.TaskCanceledExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.TaskCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskCanceledExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "11", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.TaskCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskCanceledExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "26", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                MessageOnlyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.TaskCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskCanceledExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MessageOnlyConstructorWorks()", $t.Line = "37", $t));
                    t.Fixture.MessageOnlyConstructorWorks();
                },
                TaskOnlyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.TaskCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskCanceledExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TaskOnlyConstructorWorks()", $t.Line = "48", $t));
                    t.Fixture.TaskOnlyConstructorWorks();
                },
                MessageAndInnerExceptionConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.TaskCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskCanceledExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MessageAndInnerExceptionConstructorWorks()", $t.Line = "60", $t));
                    t.Fixture.MessageAndInnerExceptionConstructorWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Exceptions.TaskCanceledExceptionTests", $t.File = "Batch4\\Exceptions\\TaskCanceledExceptionTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests)],
        statics: {
            methods: {
                TaskCompletionSourceTypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 2, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TaskCompletionSourceTypePropertiesAreCorrect()", $t.Line = "18", $t));
                    t.Fixture.TaskCompletionSourceTypePropertiesAreCorrect();
                },
                TaskTypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 5, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TaskTypePropertiesAreCorrect()", $t.Line = "26", $t));
                    t.Fixture.TaskTypePropertiesAreCorrect();
                },
                TaskCompletionSourceWorksWhenSettingResult: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 10, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TaskCompletionSourceWorksWhenSettingResult()", $t.Line = "40", $t));
                    t.Fixture.TaskCompletionSourceWorksWhenSettingResult();
                },
                TaskCompletionSourceWorksWhenSettingASingleException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 12, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TaskCompletionSourceWorksWhenSettingASingleException()", $t.Line = "77", $t));
                    t.Fixture.TaskCompletionSourceWorksWhenSettingASingleException();
                },
                TaskCompletionSourceWorksWhenSettingTwoExceptions: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 14, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TaskCompletionSourceWorksWhenSettingTwoExceptions()", $t.Line = "124", $t));
                    t.Fixture.TaskCompletionSourceWorksWhenSettingTwoExceptions();
                },
                TaskCompletionSourceWorksWhenCancelling: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 10, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TaskCompletionSourceWorksWhenCancelling()", $t.Line = "172", $t));
                    t.Fixture.TaskCompletionSourceWorksWhenCancelling();
                },
                CancelledTaskThrowsTaskCanceledExceptionWhenAwaited: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 2, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CancelledTaskThrowsTaskCanceledExceptionWhenAwaited()", $t.Line = "214", $t));
                    t.Fixture.CancelledTaskThrowsTaskCanceledExceptionWhenAwaited();
                },
                CancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 3, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed()", $t.Line = "249", $t));
                    t.Fixture.CancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed();
                },
                SetResultFailsWhenTheTaskIsCompleted: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 1, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetResultFailsWhenTheTaskIsCompleted()", $t.Line = "270", $t));
                    t.Fixture.SetResultFailsWhenTheTaskIsCompleted();
                },
                SetCanceledFailsWhenTheTaskIsCompleted: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 1, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetCanceledFailsWhenTheTaskIsCompleted()", $t.Line = "278", $t));
                    t.Fixture.SetCanceledFailsWhenTheTaskIsCompleted();
                },
                SetExceptionFailsWhenTheTaskIsCompleted: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 1, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetExceptionFailsWhenTheTaskIsCompleted()", $t.Line = "286", $t));
                    t.Fixture.SetExceptionFailsWhenTheTaskIsCompleted();
                },
                CompletedTaskHasCorrectIsXProperties: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 3, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompletedTaskHasCorrectIsXProperties()", $t.Line = "295", $t));
                    t.Fixture.CompletedTaskHasCorrectIsXProperties();
                },
                CancelledTaskHasCorrectIsXProperties: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 3, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CancelledTaskHasCorrectIsXProperties()", $t.Line = "305", $t));
                    t.Fixture.CancelledTaskHasCorrectIsXProperties();
                },
                FaultedTaskHasCorrectIsXProperties: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 3, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FaultedTaskHasCorrectIsXProperties()", $t.Line = "315", $t));
                    t.Fixture.FaultedTaskHasCorrectIsXProperties();
                },
                TrySetResultReturnsFalseWhenTheTaskIsCompleted: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 2, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TrySetResultReturnsFalseWhenTheTaskIsCompleted()", $t.Line = "325", $t));
                    t.Fixture.TrySetResultReturnsFalseWhenTheTaskIsCompleted();
                },
                TrySetCanceledReturnsFalseWhenTheTaskIsCompleted: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 2, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TrySetCanceledReturnsFalseWhenTheTaskIsCompleted()", $t.Line = "333", $t));
                    t.Fixture.TrySetCanceledReturnsFalseWhenTheTaskIsCompleted();
                },
                TrySetExceptionReturnsFalseWhenTheTaskIsCompleted: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 2, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TrySetExceptionReturnsFalseWhenTheTaskIsCompleted()", $t.Line = "341", $t));
                    t.Fixture.TrySetExceptionReturnsFalseWhenTheTaskIsCompleted();
                },
                ContinueWithForNonGenericTaskWorkWithNoResultAndNoException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 10, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContinueWithForNonGenericTaskWorkWithNoResultAndNoException()", $t.Line = "350", $t));
                    t.Fixture.ContinueWithForNonGenericTaskWorkWithNoResultAndNoException();
                },
                ContinueWithWhenCallbackThrowsAnException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 6, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContinueWithWhenCallbackThrowsAnException()", $t.Line = "392", $t));
                    t.Fixture.ContinueWithWhenCallbackThrowsAnException();
                },
                ExceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 8, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask()", $t.Line = "430", $t));
                    t.Fixture.ExceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask();
                },
                ContinueWithForNonGenericTaskCanReturnAValue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 11, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContinueWithForNonGenericTaskCanReturnAValue()", $t.Line = "471", $t));
                    t.Fixture.ContinueWithForNonGenericTaskCanReturnAValue();
                },
                ContinueWithWithNoReturnValueForGenericTaskWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 10, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContinueWithWithNoReturnValueForGenericTaskWorks()", $t.Line = "516", $t));
                    t.Fixture.ContinueWithWithNoReturnValueForGenericTaskWorks();
                },
                ContinueWithForGenericTaskCanReturnAValue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 11, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContinueWithForGenericTaskCanReturnAValue()", $t.Line = "558", $t));
                    t.Fixture.ContinueWithForGenericTaskCanReturnAValue();
                },
                DelayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 6, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DelayWorks()", $t.Line = "603", $t));
                    t.Fixture.DelayWorks();
                },
                FromResultWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 3, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromResultWorks()", $t.Line = "636", $t));
                    t.Fixture.FromResultWorks();
                },
                RunWithoutResultWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 6, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RunWithoutResultWorks()", $t.Line = "645", $t));
                    t.Fixture.RunWithoutResultWorks();
                },
                RunWithResultWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 7, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RunWithResultWorks()", $t.Line = "676", $t));
                    t.Fixture.RunWithResultWorks();
                },
                RunWorksWhenBodyThrows: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 7, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RunWorksWhenBodyThrows()", $t.Line = "709", $t));
                    t.Fixture.RunWorksWhenBodyThrows();
                },
                WhenAllParamArrayWithResultWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 13, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WhenAllParamArrayWithResultWorks()", $t.Line = "742", $t));
                    t.Fixture.WhenAllParamArrayWithResultWorks();
                },
                WhenAllEnumerableWithResultWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 13, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WhenAllEnumerableWithResultWorks()", $t.Line = "799", $t));
                    t.Fixture.WhenAllEnumerableWithResultWorks();
                },
                WhenAllParamArrayWithoutResultWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 12, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WhenAllParamArrayWithoutResultWorks()", $t.Line = "856", $t));
                    t.Fixture.WhenAllParamArrayWithoutResultWorks();
                },
                WhenAllEnumerableWithoutResultWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 12, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WhenAllEnumerableWithoutResultWorks()", $t.Line = "912", $t));
                    t.Fixture.WhenAllEnumerableWithoutResultWorks();
                },
                WhenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 17, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WhenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted()", $t.Line = "968", $t));
                    t.Fixture.WhenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted();
                },
                WhenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 12, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WhenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled()", $t.Line = "1038", $t));
                    t.Fixture.WhenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled();
                },
                WhenAnyParamArrayWithResultWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 10, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WhenAnyParamArrayWithResultWorks()", $t.Line = "1093", $t));
                    t.Fixture.WhenAnyParamArrayWithResultWorks();
                },
                WhenAnyEnumerableWithResultWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 10, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WhenAnyEnumerableWithResultWorks()", $t.Line = "1141", $t));
                    t.Fixture.WhenAnyEnumerableWithResultWorks();
                },
                WhenAnyParamArrayWithoutResultWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 9, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WhenAnyParamArrayWithoutResultWorks()", $t.Line = "1188", $t));
                    t.Fixture.WhenAnyParamArrayWithoutResultWorks();
                },
                WhenAnyEnumerableWithoutResultWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 9, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WhenAnyEnumerableWithoutResultWorks()", $t.Line = "1235", $t));
                    t.Fixture.WhenAnyEnumerableWithoutResultWorks();
                },
                WhenAnyFaultsIfTheFirstTaskFaulted: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 9, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WhenAnyFaultsIfTheFirstTaskFaulted()", $t.Line = "1282", $t));
                    t.Fixture.WhenAnyFaultsIfTheFirstTaskFaulted();
                },
                WhenAnyIsCancelledIfTheFirstTaskWasCancelled: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 8, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WhenAnyIsCancelledIfTheFirstTaskWasCancelled()", $t.Line = "1330", $t));
                    t.Fixture.WhenAnyIsCancelledIfTheFirstTaskWasCancelled();
                },
                ConstructorWithOnlyActionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 7, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithOnlyActionWorks()", $t.Line = "1375", $t));
                    t.Fixture.ConstructorWithOnlyActionWorks();
                },
                ConstructorWithActionAndStateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 8, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithActionAndStateWorks()", $t.Line = "1414", $t));
                    t.Fixture.ConstructorWithActionAndStateWorks();
                },
                ExceptionInManuallyCreatedTaskIsStoredOnTheTask: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 8, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExceptionInManuallyCreatedTaskIsStoredOnTheTask()", $t.Line = "1456", $t));
                    t.Fixture.ExceptionInManuallyCreatedTaskIsStoredOnTheTask();
                },
                ConstructorWithOnlyFunctionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 8, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithOnlyFunctionWorks()", $t.Line = "1498", $t));
                    t.Fixture.ConstructorWithOnlyFunctionWorks();
                },
                ConstructorWithFunctionAndStateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TaskTests, 9, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithFunctionAndStateWorks()", $t.Line = "1540", $t));
                    t.Fixture.ConstructorWithFunctionAndStateWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Threading.TaskTests", $t.File = "Batch4\\Threading\\Tasks\\TaskTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1717: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1717()", $t.Line = "9", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1717();
                },
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "27", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                DefaultValueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueWorks()", $t.Line = "34", $t));
                    t.Fixture.DefaultValueWorks();
                },
                ZeroWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ZeroWorks()", $t.Line = "41", $t));
                    t.Fixture.ZeroWorks();
                },
                CreatingInstanceReturnsTimeSpanWithZeroValue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsTimeSpanWithZeroValue()", $t.Line = "48", $t));
                    t.Fixture.CreatingInstanceReturnsTimeSpanWithZeroValue();
                },
                ParameterConstructorsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParameterConstructorsWorks()", $t.Line = "55", $t));
                    t.Fixture.ParameterConstructorsWorks();
                },
                FactoryMethodsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FactoryMethodsWork()", $t.Line = "75", $t));
                    t.Fixture.FactoryMethodsWork();
                },
                PropertiesWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesWork()", $t.Line = "103", $t));
                    t.Fixture.PropertiesWork();
                },
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "120", $t));
                    t.Fixture.CompareToWorks();
                },
                CompareWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareWorks()", $t.Line = "133", $t));
                    t.Fixture.CompareWorks();
                },
                StaticEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticEqualsWorks()", $t.Line = "146", $t));
                    t.Fixture.StaticEqualsWorks();
                },
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "157", $t));
                    t.Fixture.EqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "168", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                ToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWorks()", $t.Line = "179", $t));
                    t.Fixture.ToStringWorks();
                },
                AddWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddWorks()", $t.Line = "192", $t));
                    t.Fixture.AddWorks();
                },
                SubtractWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubtractWorks()", $t.Line = "202", $t));
                    t.Fixture.SubtractWorks();
                },
                DurationWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DurationWorks()", $t.Line = "212", $t));
                    t.Fixture.DurationWorks();
                },
                NegateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NegateWorks()", $t.Line = "224", $t));
                    t.Fixture.NegateWorks();
                },
                ComparisonOperatorsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ComparisonOperatorsWork()", $t.Line = "241", $t));
                    t.Fixture.ComparisonOperatorsWork();
                },
                AdditionOperatorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AdditionOperatorWorks()", $t.Line = "278", $t));
                    t.Fixture.AdditionOperatorWorks();
                },
                SubtractionOperatorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubtractionOperatorWorks()", $t.Line = "288", $t));
                    t.Fixture.SubtractionOperatorWorks();
                },
                UnaryPlusWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UnaryPlusWorks()", $t.Line = "298", $t));
                    t.Fixture.UnaryPlusWorks();
                },
                UnaryMinusWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UnaryMinusWorks()", $t.Line = "307", $t));
                    t.Fixture.UnaryMinusWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests", $t.File = "Batch4\\SimpleTypes\\TimeSpanTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TupleTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TupleTests)],
        statics: {
            methods: {
                Tuple1Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TupleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TupleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Tuple1Works()", $t.Line = "9", $t));
                    t.Fixture.Tuple1Works();
                },
                Tuple2Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TupleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TupleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Tuple2Works()", $t.Line = "19", $t));
                    t.Fixture.Tuple2Works();
                },
                Tuple3Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TupleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TupleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Tuple3Works()", $t.Line = "30", $t));
                    t.Fixture.Tuple3Works();
                },
                Tuple4Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TupleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TupleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Tuple4Works()", $t.Line = "42", $t));
                    t.Fixture.Tuple4Works();
                },
                Tuple5Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TupleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TupleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Tuple5Works()", $t.Line = "55", $t));
                    t.Fixture.Tuple5Works();
                },
                Tuple6Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TupleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TupleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Tuple6Works()", $t.Line = "69", $t));
                    t.Fixture.Tuple6Works();
                },
                Tuple7Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TupleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TupleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Tuple7Works()", $t.Line = "84", $t));
                    t.Fixture.Tuple7Works();
                },
                Tuple8Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TupleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TupleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Tuple8Works()", $t.Line = "100", $t));
                    t.Fixture.Tuple8Works();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.SimpleTypes.TupleTests", $t.File = "Batch4\\SimpleTypes\\TupleTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemLanguageSupportTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests)],
        statics: {
            methods: {
                TypeIsWorksForReferenceTypes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemLanguageSupportTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeIsWorksForReferenceTypes()", $t.Line = "205", $t));
                    t.Fixture.TypeIsWorksForReferenceTypes();
                },
                TypeAsWorksForReferenceTypes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemLanguageSupportTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeAsWorksForReferenceTypes()", $t.Line = "348", $t));
                    t.Fixture.TypeAsWorksForReferenceTypes();
                },
                CastWorksForReferenceTypes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemLanguageSupportTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastWorksForReferenceTypes()", $t.Line = "491", $t));
                    t.Fixture.CastWorksForReferenceTypes();
                },
                GetTypeWorksOnObjects: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemLanguageSupportTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetTypeWorksOnObjects()", $t.Line = "634", $t));
                    t.Fixture.GetTypeWorksOnObjects();
                },
                GetTypeOnNullInstanceThrowsException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemLanguageSupportTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetTypeOnNullInstanceThrowsException()", $t.Line = "648", $t));
                    t.Fixture.GetTypeOnNullInstanceThrowsException();
                },
                CastOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemLanguageSupportTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric()", $t.Line = "661", $t));
                    t.Fixture.CastOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric();
                },
                TypeCheckForSubTypeOfGenericType: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemLanguageSupportTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeCheckForSubTypeOfGenericType()", $t.Line = "703", $t));
                    t.Fixture.TypeCheckForSubTypeOfGenericType();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests", $t.File = "Batch4\\Reflection\\TypeSystemLanguageSupportTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests)],
        statics: {
            methods: {
                FullNamePropertyReturnsTheNameWithTheNamespace: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FullNamePropertyReturnsTheNameWithTheNamespace()", $t.Line = "122", $t));
                    t.Fixture.FullNamePropertyReturnsTheNameWithTheNamespace();
                },
                AssemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AssemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName()", $t.Line = "128", $t));
                    t.Fixture.AssemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName();
                },
                AssemblyPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AssemblyPropertyWorks()", $t.Line = "136", $t));
                    t.Fixture.AssemblyPropertyWorks();
                },
                NamespacePropertyReturnsTheNamespaceWithoutTheName: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NamespacePropertyReturnsTheNamespaceWithoutTheName()", $t.Line = "148", $t));
                    t.Fixture.NamespacePropertyReturnsTheNamespaceWithoutTheName();
                },
                InstantiatingClassWithConstructorThatNeedsToBeAppliedWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InstantiatingClassWithConstructorThatNeedsToBeAppliedWorks()", $t.Line = "155", $t));
                    t.Fixture.InstantiatingClassWithConstructorThatNeedsToBeAppliedWorks();
                },
                NamePropertyRemovesTheNamespace: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NamePropertyRemovesTheNamespace()", $t.Line = "165", $t));
                    t.Fixture.NamePropertyRemovesTheNamespace();
                },
                GettingBaseTypeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GettingBaseTypeWorks()", $t.Line = "173", $t));
                    t.Fixture.GettingBaseTypeWorks();
                },
                GettingImplementedInterfacesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GettingImplementedInterfacesWorks()", $t.Line = "181", $t));
                    t.Fixture.GettingImplementedInterfacesWorks();
                },
                TypeOfAnOpenGenericClassWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeOfAnOpenGenericClassWorks()", $t.Line = "192", $t));
                    t.Fixture.TypeOfAnOpenGenericClassWorks();
                },
                TypeOfAnOpenGenericInterfaceWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeOfAnOpenGenericInterfaceWorks()", $t.Line = "198", $t));
                    t.Fixture.TypeOfAnOpenGenericInterfaceWorks();
                },
                TypeOfInstantiatedGenericClassWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeOfInstantiatedGenericClassWorks()", $t.Line = "204", $t));
                    t.Fixture.TypeOfInstantiatedGenericClassWorks();
                },
                TypeOfInstantiatedGenericInterfaceWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeOfInstantiatedGenericInterfaceWorks()", $t.Line = "210", $t));
                    t.Fixture.TypeOfInstantiatedGenericInterfaceWorks();
                },
                ConstructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance()", $t.Line = "216", $t));
                    t.Fixture.ConstructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance();
                },
                AccessingAStaticMemberInAGenericClassWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AccessingAStaticMemberInAGenericClassWorks()", $t.Line = "226", $t));
                    t.Fixture.AccessingAStaticMemberInAGenericClassWorks();
                },
                TypeOfNestedGenericClassWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeOfNestedGenericClassWorks()", $t.Line = "234", $t));
                    t.Fixture.TypeOfNestedGenericClassWorks();
                },
                BaseTypeAndImplementedInterfacesForGenericTypeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BaseTypeAndImplementedInterfacesForGenericTypeWorks()", $t.Line = "240", $t));
                    t.Fixture.BaseTypeAndImplementedInterfacesForGenericTypeWorks();
                },
                IsGenericTypeDefinitionWorksAsExpected: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsGenericTypeDefinitionWorksAsExpected()", $t.Line = "247", $t));
                    t.Fixture.IsGenericTypeDefinitionWorksAsExpected();
                },
                GenericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GenericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes()", $t.Line = "259", $t));
                    t.Fixture.GenericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes();
                },
                GetGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull()", $t.Line = "271", $t));
                    t.Fixture.GetGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull();
                },
                GetGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull()", $t.Line = "283", $t));
                    t.Fixture.GetGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull();
                },
                IsAssignableFromWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsAssignableFromWorks()", $t.Line = "433", $t));
                    t.Fixture.IsAssignableFromWorks();
                },
                IsSubclassOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsSubclassOfWorks()", $t.Line = "651", $t));
                    t.Fixture.IsSubclassOfWorks();
                },
                IsClassWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsClassWorks()", $t.Line = "668", $t));
                    t.Fixture.IsClassWorks();
                },
                IsEnumWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsEnumWorks()", $t.Line = "681", $t));
                    t.Fixture.IsEnumWorks();
                },
                IsArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsArrayWorks()", $t.Line = "694", $t));
                    t.Fixture.IsArrayWorks();
                },
                IsFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsFlagsWorks()", $t.Line = "706", $t));
                    t.Fixture.IsFlagsWorks();
                },
                IsInterfaceWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsInterfaceWorks()", $t.Line = "719", $t));
                    t.Fixture.IsInterfaceWorks();
                },
                IsInstanceOfTypeWorksForReferenceTypes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsInstanceOfTypeWorksForReferenceTypes()", $t.Line = "732", $t));
                    t.Fixture.IsInstanceOfTypeWorksForReferenceTypes();
                },
                InvokingBaseUnnamedConstructorWithoutArgumentsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokingBaseUnnamedConstructorWithoutArgumentsWorks()", $t.Line = "924", $t));
                    t.Fixture.InvokingBaseUnnamedConstructorWithoutArgumentsWorks();
                },
                InvokingBaseUnnamedConstructorWithArgumentsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokingBaseUnnamedConstructorWithArgumentsWorks()", $t.Line = "954", $t));
                    t.Fixture.InvokingBaseUnnamedConstructorWithArgumentsWorks();
                },
                InvokingBaseNamedConstructorWithoutArgumentsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokingBaseNamedConstructorWithoutArgumentsWorks()", $t.Line = "984", $t));
                    t.Fixture.InvokingBaseNamedConstructorWithoutArgumentsWorks();
                },
                InvokingBaseNamedConstructorWithArgumentsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokingBaseNamedConstructorWithArgumentsWorks()", $t.Line = "1014", $t));
                    t.Fixture.InvokingBaseNamedConstructorWithArgumentsWorks();
                },
                ConstructingInstanceWithNamedConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructingInstanceWithNamedConstructorWorks()", $t.Line = "1054", $t));
                    t.Fixture.ConstructingInstanceWithNamedConstructorWorks();
                },
                ConstructingInstanceWithNamedConstructorWorks2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructingInstanceWithNamedConstructorWorks2()", $t.Line = "1063", $t));
                    t.Fixture.ConstructingInstanceWithNamedConstructorWorks2();
                },
                InvokingBaseMethodWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokingBaseMethodWorks()", $t.Line = "1114", $t));
                    t.Fixture.InvokingBaseMethodWorks();
                },
                InvokingGenericBaseMethodWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokingGenericBaseMethodWorks()", $t.Line = "1120", $t));
                    t.Fixture.InvokingGenericBaseMethodWorks();
                },
                MethodGroupConversionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MethodGroupConversionWorks()", $t.Line = "1206", $t));
                    t.Fixture.MethodGroupConversionWorks();
                },
                MethodGroupConversionOnGenericMethodWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MethodGroupConversionOnGenericMethodWorks()", $t.Line = "1213", $t));
                    t.Fixture.MethodGroupConversionOnGenericMethodWorks();
                },
                MethodGroupConversionOnBaseMethodWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MethodGroupConversionOnBaseMethodWorks()", $t.Line = "1220", $t));
                    t.Fixture.MethodGroupConversionOnBaseMethodWorks();
                },
                MethodGroupConversionOnGenericBaseMethodWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MethodGroupConversionOnGenericBaseMethodWorks()", $t.Line = "1227", $t));
                    t.Fixture.MethodGroupConversionOnGenericBaseMethodWorks();
                },
                ImportedInterfaceAppearsAsObjectWhenUsedAsGenericArgument: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ImportedInterfaceAppearsAsObjectWhenUsedAsGenericArgument()", $t.Line = "1234", $t));
                    t.Fixture.ImportedInterfaceAppearsAsObjectWhenUsedAsGenericArgument();
                },
                FalseIsFunctionShouldReturnFalse: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FalseIsFunctionShouldReturnFalse()", $t.Line = "1240", $t));
                    t.Fixture.FalseIsFunctionShouldReturnFalse();
                },
                CastingUndefinedToOtherTypeShouldReturnUndefined: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastingUndefinedToOtherTypeShouldReturnUndefined()", $t.Line = "1246", $t));
                    t.Fixture.CastingUndefinedToOtherTypeShouldReturnUndefined();
                },
                NonSerializableTypeCanInheritFromSerializableType: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonSerializableTypeCanInheritFromSerializableType()", $t.Line = "1252", $t));
                    t.Fixture.NonSerializableTypeCanInheritFromSerializableType();
                },
                InheritingFromRecordWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InheritingFromRecordWorks()", $t.Line = "1260", $t));
                    t.Fixture.InheritingFromRecordWorks();
                },
                InstanceOfWorksForSerializableTypesWithCustomTypeCheckCode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InstanceOfWorksForSerializableTypesWithCustomTypeCheckCode()", $t.Line = "1267", $t));
                    t.Fixture.InstanceOfWorksForSerializableTypesWithCustomTypeCheckCode();
                },
                StaticGetTypeMethodWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticGetTypeMethodWorks()", $t.Line = "1276", $t));
                    t.Fixture.StaticGetTypeMethodWorks();
                },
                StaticGetTypeMethodWithGenericsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticGetTypeMethodWithGenericsWorks()", $t.Line = "1286", $t));
                    t.Fixture.StaticGetTypeMethodWithGenericsWorks();
                },
                CastingToNamedValuesEnumCastsToString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastingToNamedValuesEnumCastsToString()", $t.Line = "1335", $t));
                    t.Fixture.CastingToNamedValuesEnumCastsToString();
                },
                CastingToImportedNamedValuesEnumCastsToString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastingToImportedNamedValuesEnumCastsToString()", $t.Line = "1355", $t));
                    t.Fixture.CastingToImportedNamedValuesEnumCastsToString();
                },
                DefaultValueOfNamedValuesEnumIsNull: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueOfNamedValuesEnumIsNull()", $t.Line = "1371", $t));
                    t.Fixture.DefaultValueOfNamedValuesEnumIsNull();
                },
                DefaultValueOfImportedNamedValuesEnumIsNull: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueOfImportedNamedValuesEnumIsNull()", $t.Line = "1378", $t));
                    t.Fixture.DefaultValueOfImportedNamedValuesEnumIsNull();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Reflection.TypeSystemTests", $t.File = "Batch4\\Reflection\\TypeSystemTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1559()", $t.Line = "29", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1559();
                },
                LengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthConstructorWorks()", $t.Line = "53", $t));
                    t.Fixture.LengthConstructorWorks();
                },
                ConstructorFromIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorFromIntWorks()", $t.Line = "61", $t));
                    t.Fixture.ConstructorFromIntWorks();
                },
                CopyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyConstructorWorks()", $t.Line = "71", $t));
                    t.Fixture.CopyConstructorWorks();
                },
                ArrayBufferConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferConstructorWorks()", $t.Line = "81", $t));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetConstructorWorks()", $t.Line = "91", $t));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetAndLengthConstructorWorks()", $t.Line = "101", $t));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                StaticBytesPerElementWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticBytesPerElementWorks()", $t.Line = "118", $t));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                LengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthWorks()", $t.Line = "124", $t));
                    t.Fixture.LengthWorks();
                },
                IndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexingWorks()", $t.Line = "131", $t));
                    t.Fixture.IndexingWorks();
                },
                SetUint16ArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUint16ArrayWorks()", $t.Line = "140", $t));
                    t.Fixture.SetUint16ArrayWorks();
                },
                SetUint16ArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUint16ArrayWithOffsetWorks()", $t.Line = "148", $t));
                    t.Fixture.SetUint16ArrayWithOffsetWorks();
                },
                SetNormalArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWorks()", $t.Line = "156", $t));
                    t.Fixture.SetNormalArrayWorks();
                },
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWithOffsetWorks()", $t.Line = "164", $t));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                SubarrayWithBeginWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginWorks()", $t.Line = "172", $t));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginAndEndWorks()", $t.Line = "182", $t));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                BufferPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BufferPropertyWorks()", $t.Line = "193", $t));
                    t.Fixture.BufferPropertyWorks();
                },
                ByteOffsetPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteOffsetPropertyWorks()", $t.Line = "201", $t));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                ByteLengthPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteLengthPropertyWorks()", $t.Line = "209", $t));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                IndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWorks()", $t.Line = "216", $t));
                    t.Fixture.IndexOfWorks();
                },
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "225", $t));
                    t.Fixture.ContainsWorks();
                },
                ForeachWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks_SPI_1401()", $t.Line = "234", $t));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumeratorWorks_SPI_1401()", $t.Line = "248", $t));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEnumerableGetEnumeratorWorks()", $t.Line = "262", $t));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                ICollectionMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionMethodsWork_SPI_1559()", $t.Line = "275", $t));
                    t.Fixture.ICollectionMethodsWork_SPI_1559();
                },
                IListMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListMethodsWork_SPI_1559()", $t.Line = "288", $t));
                    t.Fixture.IListMethodsWork_SPI_1559();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests", $t.File = "Batch4\\Collections\\TypedArrays\\Uint16ArrayTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1717: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1717()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1717();
                },
                CastsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastsWork()", $t.Line = "35", $t));
                    t.Fixture.CastsWork();
                },
                DefaultValueIs0: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueIs0()", $t.Line = "91", $t));
                    t.Fixture.DefaultValueIs0();
                },
                DefaultConstructorReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsZero()", $t.Line = "97", $t));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                CreatingInstanceReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsZero()", $t.Line = "103", $t));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                ConstantsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWork()", $t.Line = "109", $t));
                    t.Fixture.ConstantsWork();
                },
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "116", $t));
                    t.Fixture.FormatWorks();
                },
                ToStringWithFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatWorks()", $t.Line = "122", $t));
                    t.Fixture.ToStringWithFormatWorks();
                },
                ToStringWithFormatAndProviderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatAndProviderWorks()", $t.Line = "128", $t));
                    t.Fixture.ToStringWithFormatAndProviderWorks();
                },
                IFormattableToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks()", $t.Line = "134", $t));
                    t.Fixture.IFormattableToStringWorks();
                },
                TryParseWorks_SPI_1592: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseWorks_SPI_1592()", $t.Line = "147", $t));
                    t.Fixture.TryParseWorks_SPI_1592();
                },
                ParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks()", $t.Line = "181", $t));
                    t.Fixture.ParseWorks();
                },
                ToStringWithoutRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithoutRadixWorks()", $t.Line = "193", $t));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                ToStringWithRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithRadixWorks()", $t.Line = "199", $t));
                    t.Fixture.ToStringWithRadixWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "206", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "214", $t));
                    t.Fixture.EqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "223", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "237", $t));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "245", $t));
                    t.Fixture.IComparableCompareToWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests", $t.File = "Batch4\\SimpleTypes\\UInt16Tests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1559()", $t.Line = "29", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1559();
                },
                LengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthConstructorWorks()", $t.Line = "53", $t));
                    t.Fixture.LengthConstructorWorks();
                },
                ConstructorFromIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorFromIntWorks()", $t.Line = "61", $t));
                    t.Fixture.ConstructorFromIntWorks();
                },
                CopyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyConstructorWorks()", $t.Line = "71", $t));
                    t.Fixture.CopyConstructorWorks();
                },
                ArrayBufferConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferConstructorWorks()", $t.Line = "81", $t));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetConstructorWorks()", $t.Line = "91", $t));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetAndLengthConstructorWorks()", $t.Line = "101", $t));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                StaticBytesPerElementWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticBytesPerElementWorks()", $t.Line = "118", $t));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                LengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthWorks()", $t.Line = "124", $t));
                    t.Fixture.LengthWorks();
                },
                IndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexingWorks()", $t.Line = "131", $t));
                    t.Fixture.IndexingWorks();
                },
                SetUint32ArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUint32ArrayWorks()", $t.Line = "140", $t));
                    t.Fixture.SetUint32ArrayWorks();
                },
                SetUint32ArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUint32ArrayWithOffsetWorks()", $t.Line = "148", $t));
                    t.Fixture.SetUint32ArrayWithOffsetWorks();
                },
                SetNormalArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWorks()", $t.Line = "156", $t));
                    t.Fixture.SetNormalArrayWorks();
                },
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWithOffsetWorks()", $t.Line = "164", $t));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                SubarrayWithBeginWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginWorks()", $t.Line = "172", $t));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginAndEndWorks()", $t.Line = "182", $t));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                BufferPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BufferPropertyWorks()", $t.Line = "193", $t));
                    t.Fixture.BufferPropertyWorks();
                },
                ByteOffsetPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteOffsetPropertyWorks()", $t.Line = "201", $t));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                ByteLengthPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteLengthPropertyWorks()", $t.Line = "209", $t));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                IndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWorks()", $t.Line = "216", $t));
                    t.Fixture.IndexOfWorks();
                },
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "225", $t));
                    t.Fixture.ContainsWorks();
                },
                ForeachWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks_SPI_1401()", $t.Line = "234", $t));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumeratorWorks_SPI_1401()", $t.Line = "248", $t));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEnumerableGetEnumeratorWorks()", $t.Line = "262", $t));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                ICollectionMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionMethodsWork_SPI_1559()", $t.Line = "275", $t));
                    t.Fixture.ICollectionMethodsWork_SPI_1559();
                },
                IListMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListMethodsWork_SPI_1559()", $t.Line = "288", $t));
                    t.Fixture.IListMethodsWork_SPI_1559();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests", $t.File = "Batch4\\Collections\\TypedArrays\\Uint32ArrayTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1717: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1717()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1717();
                },
                CastsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastsWork()", $t.Line = "35", $t));
                    t.Fixture.CastsWork();
                },
                DefaultValueIs0: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueIs0()", $t.Line = "91", $t));
                    t.Fixture.DefaultValueIs0();
                },
                DefaultConstructorReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsZero()", $t.Line = "97", $t));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                CreatingInstanceReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsZero()", $t.Line = "103", $t));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                ConstantsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWork()", $t.Line = "109", $t));
                    t.Fixture.ConstantsWork();
                },
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "116", $t));
                    t.Fixture.FormatWorks();
                },
                ToStringWithFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatWorks()", $t.Line = "122", $t));
                    t.Fixture.ToStringWithFormatWorks();
                },
                ToStringWithFormatAndProviderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatAndProviderWorks()", $t.Line = "128", $t));
                    t.Fixture.ToStringWithFormatAndProviderWorks();
                },
                IFormattableToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks()", $t.Line = "134", $t));
                    t.Fixture.IFormattableToStringWorks();
                },
                TryParseWorks_SPI_1592: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseWorks_SPI_1592()", $t.Line = "147", $t));
                    t.Fixture.TryParseWorks_SPI_1592();
                },
                ParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks()", $t.Line = "177", $t));
                    t.Fixture.ParseWorks();
                },
                ToStringWithoutRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithoutRadixWorks()", $t.Line = "189", $t));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                ToStringWithRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithRadixWorks()", $t.Line = "195", $t));
                    t.Fixture.ToStringWithRadixWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "202", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "210", $t));
                    t.Fixture.EqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "219", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "233", $t));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "241", $t));
                    t.Fixture.IComparableCompareToWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests", $t.File = "Batch4\\SimpleTypes\\UInt32Tests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1717: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1717()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1717();
                },
                CastsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastsWork()", $t.Line = "33", $t));
                    t.Fixture.CastsWork();
                },
                DefaultValueIs0: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueIs0()", $t.Line = "79", $t));
                    t.Fixture.DefaultValueIs0();
                },
                DefaultConstructorReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsZero()", $t.Line = "85", $t));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                CreatingInstanceReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsZero()", $t.Line = "91", $t));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                ConstantsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWork()", $t.Line = "97", $t));
                    t.Fixture.ConstantsWork();
                },
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "103", $t));
                    t.Fixture.FormatWorks();
                },
                ToStringWithFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatWorks()", $t.Line = "109", $t));
                    t.Fixture.ToStringWithFormatWorks();
                },
                ToStringWithFormatAndProviderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatAndProviderWorks()", $t.Line = "115", $t));
                    t.Fixture.ToStringWithFormatAndProviderWorks();
                },
                IFormattableToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks()", $t.Line = "121", $t));
                    t.Fixture.IFormattableToStringWorks();
                },
                CastingOfLargeValuesToUInt64Works_SPI_1591: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastingOfLargeValuesToUInt64Works_SPI_1591()", $t.Line = "134", $t));
                    t.Fixture.CastingOfLargeValuesToUInt64Works_SPI_1591();
                },
                DivisionOfLargeUInt64Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DivisionOfLargeUInt64Works()", $t.Line = "143", $t));
                    t.Fixture.DivisionOfLargeUInt64Works();
                },
                TryParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseWorks()", $t.Line = "150", $t));
                    t.Fixture.TryParseWorks();
                },
                ParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks()", $t.Line = "183", $t));
                    t.Fixture.ParseWorks();
                },
                ToStringWithoutRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithoutRadixWorks()", $t.Line = "195", $t));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                ToStringWithRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithRadixWorks()", $t.Line = "201", $t));
                    t.Fixture.ToStringWithRadixWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "208", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "216", $t));
                    t.Fixture.EqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "225", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "239", $t));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "247", $t));
                    t.Fixture.IComparableCompareToWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests", $t.File = "Batch4\\SimpleTypes\\UInt64Tests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1559()", $t.Line = "29", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1559();
                },
                LengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthConstructorWorks()", $t.Line = "53", $t));
                    t.Fixture.LengthConstructorWorks();
                },
                ConstructorFromIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorFromIntWorks()", $t.Line = "61", $t));
                    t.Fixture.ConstructorFromIntWorks();
                },
                CopyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyConstructorWorks()", $t.Line = "71", $t));
                    t.Fixture.CopyConstructorWorks();
                },
                ArrayBufferConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferConstructorWorks()", $t.Line = "81", $t));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetConstructorWorks()", $t.Line = "91", $t));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetAndLengthConstructorWorks()", $t.Line = "101", $t));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                StaticBytesPerElementWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticBytesPerElementWorks()", $t.Line = "118", $t));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                LengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthWorks()", $t.Line = "124", $t));
                    t.Fixture.LengthWorks();
                },
                IndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexingWorks()", $t.Line = "131", $t));
                    t.Fixture.IndexingWorks();
                },
                SetUint8ArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUint8ArrayWorks()", $t.Line = "140", $t));
                    t.Fixture.SetUint8ArrayWorks();
                },
                SetUint8ArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUint8ArrayWithOffsetWorks()", $t.Line = "148", $t));
                    t.Fixture.SetUint8ArrayWithOffsetWorks();
                },
                SetNormalArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWorks()", $t.Line = "156", $t));
                    t.Fixture.SetNormalArrayWorks();
                },
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWithOffsetWorks()", $t.Line = "164", $t));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                SubarrayWithBeginWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginWorks()", $t.Line = "172", $t));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginAndEndWorks()", $t.Line = "182", $t));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                BufferPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BufferPropertyWorks()", $t.Line = "193", $t));
                    t.Fixture.BufferPropertyWorks();
                },
                ByteOffsetPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteOffsetPropertyWorks()", $t.Line = "201", $t));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                ByteLengthPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteLengthPropertyWorks()", $t.Line = "209", $t));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                IndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWorks()", $t.Line = "216", $t));
                    t.Fixture.IndexOfWorks();
                },
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "225", $t));
                    t.Fixture.ContainsWorks();
                },
                ForeachWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks_SPI_1401()", $t.Line = "234", $t));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumeratorWorks_SPI_1401()", $t.Line = "248", $t));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEnumerableGetEnumeratorWorks()", $t.Line = "262", $t));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                ICollectionMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionMethodsWork_SPI_1559()", $t.Line = "275", $t));
                    t.Fixture.ICollectionMethodsWork_SPI_1559();
                },
                IListMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListMethodsWork_SPI_1559()", $t.Line = "288", $t));
                    t.Fixture.IListMethodsWork_SPI_1559();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests", $t.File = "Batch4\\Collections\\TypedArrays\\Uint8ArrayTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1560: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1560()", $t.Line = "29", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1560();
                },
                TypePropertiesAreCorrect_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1559()", $t.Line = "37", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1559();
                },
                LengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthConstructorWorks()", $t.Line = "62", $t));
                    t.Fixture.LengthConstructorWorks();
                },
                ConstructorFromIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorFromIntWorks()", $t.Line = "70", $t));
                    t.Fixture.ConstructorFromIntWorks();
                },
                ConstructorFromUint8ArrayWorks_SPI_TODO: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorFromUint8ArrayWorks_SPI_TODO()", $t.Line = "80", $t));
                    t.Fixture.ConstructorFromUint8ArrayWorks_SPI_TODO();
                },
                CopyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyConstructorWorks()", $t.Line = "90", $t));
                    t.Fixture.CopyConstructorWorks();
                },
                ArrayBufferConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferConstructorWorks()", $t.Line = "100", $t));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetConstructorWorks()", $t.Line = "110", $t));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetAndLengthConstructorWorks()", $t.Line = "120", $t));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                StaticBytesPerElementWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticBytesPerElementWorks()", $t.Line = "137", $t));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                LengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthWorks()", $t.Line = "143", $t));
                    t.Fixture.LengthWorks();
                },
                IndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexingWorks()", $t.Line = "150", $t));
                    t.Fixture.IndexingWorks();
                },
                SetUint8ClampedArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUint8ClampedArrayWorks()", $t.Line = "179", $t));
                    t.Fixture.SetUint8ClampedArrayWorks();
                },
                SetUint8ClampedArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUint8ClampedArrayWithOffsetWorks()", $t.Line = "187", $t));
                    t.Fixture.SetUint8ClampedArrayWithOffsetWorks();
                },
                SetNormalArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWorks()", $t.Line = "195", $t));
                    t.Fixture.SetNormalArrayWorks();
                },
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWithOffsetWorks()", $t.Line = "203", $t));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                SubarrayWithBeginWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginWorks()", $t.Line = "211", $t));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginAndEndWorks()", $t.Line = "221", $t));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                BufferPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BufferPropertyWorks()", $t.Line = "232", $t));
                    t.Fixture.BufferPropertyWorks();
                },
                ByteOffsetPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteOffsetPropertyWorks()", $t.Line = "240", $t));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                ByteLengthPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteLengthPropertyWorks()", $t.Line = "248", $t));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                IndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWorks()", $t.Line = "255", $t));
                    t.Fixture.IndexOfWorks();
                },
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "264", $t));
                    t.Fixture.ContainsWorks();
                },
                ForeachWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks_SPI_1401()", $t.Line = "273", $t));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumeratorWorks_SPI_1401()", $t.Line = "287", $t));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                IEnumerableGetEnumeratorWorks_SPI_1560: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEnumerableGetEnumeratorWorks_SPI_1560()", $t.Line = "301", $t));
                    t.Fixture.IEnumerableGetEnumeratorWorks_SPI_1560();
                },
                ICollectionMethodsWork_SPI_1559_1560: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionMethodsWork_SPI_1559_1560()", $t.Line = "319", $t));
                    t.Fixture.ICollectionMethodsWork_SPI_1559_1560();
                },
                IListMethodsWork_SPI_1559_1560: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListMethodsWork_SPI_1559_1560()", $t.Line = "332", $t));
                    t.Fixture.IListMethodsWork_SPI_1559_1560();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests", $t.File = "Batch4\\Collections\\TypedArrays\\Uint8ClampedArrayTests.cs", $t);
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UserDefinedStructTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests)],
        statics: {
            methods: {
                DefaultValueOfStructWithInlineCodeDefaultConstructorWorks_SPI_1610: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UserDefinedStructTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueOfStructWithInlineCodeDefaultConstructorWorks_SPI_1610()", $t.Line = "187", $t));
                    t.Fixture.DefaultValueOfStructWithInlineCodeDefaultConstructorWorks_SPI_1610();
                },
                DefaultValueOfStructWithInlineCodeDefaultConstructorWorksGeneric_SPI_1610: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UserDefinedStructTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueOfStructWithInlineCodeDefaultConstructorWorksGeneric_SPI_1610()", $t.Line = "197", $t));
                    t.Fixture.DefaultValueOfStructWithInlineCodeDefaultConstructorWorksGeneric_SPI_1610();
                },
                CanLiftUserDefinedConversionOperator_SPI_1611: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UserDefinedStructTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanLiftUserDefinedConversionOperator_SPI_1611()", $t.Line = "207", $t));
                    t.Fixture.CanLiftUserDefinedConversionOperator_SPI_1611();
                },
                AutoEventBackingFieldsAreClonedWhenValueTypeIsCopied_SPI_1612: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestBatch4Runner.UserDefinedStructTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AutoEventBackingFieldsAreClonedWhenValueTypeIsCopied_SPI_1612()", $t.Line = "220", $t));
                    t.Fixture.AutoEventBackingFieldsAreClonedWhenValueTypeIsCopied_SPI_1612();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch4", $t.ClassName = "Bridge.ClientTest.Batch4.UserDefinedStructTests", $t.File = "Batch4\\UserDefinedStructTests.cs", $t);
                }
                return this.context;
            }
        }
    });
});
